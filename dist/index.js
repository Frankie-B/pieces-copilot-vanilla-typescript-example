"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/@pieces.app/pieces-os-client/dist/runtime.js
  var require_runtime = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/runtime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TextApiResponse = exports.BlobApiResponse = exports.VoidApiResponse = exports.JSONApiResponse = exports.canConsumeForm = exports.mapValues = exports.querystring = exports.exists = exports.Configuration = exports.COLLECTION_FORMATS = exports.RequiredError = exports.BaseAPI = exports.BASE_PATH = void 0;
      exports.BASE_PATH = "http://localhost:1000".replace(/\/+$/, "");
      var isBlob = (value) => typeof Blob !== "undefined" && value instanceof Blob;
      var BaseAPI = class {
        constructor(configuration = new Configuration()) {
          this.configuration = configuration;
          this.fetchApi = async (url, init) => {
            let fetchParams = { url, init };
            for (const middleware of this.middleware) {
              if (middleware.pre) {
                fetchParams = await middleware.pre({
                  // @ts-ignore
                  fetch: this.fetchApi,
                  ...fetchParams
                }) || fetchParams;
              }
            }
            let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
            for (const middleware of this.middleware) {
              if (middleware.post) {
                response = await middleware.post({
                  // @ts-ignore
                  fetch: this.fetchApi,
                  url: fetchParams.url,
                  init: fetchParams.init,
                  response: response.clone()
                }) || response;
              }
            }
            return response;
          };
          this.middleware = configuration.middleware;
        }
        withMiddleware(...middlewares) {
          const next = this.clone();
          next.middleware = next.middleware.concat(...middlewares);
          return next;
        }
        withPreMiddleware(...preMiddlewares) {
          const middlewares = preMiddlewares.map((pre) => ({ pre }));
          return this.withMiddleware(...middlewares);
        }
        withPostMiddleware(...postMiddlewares) {
          const middlewares = postMiddlewares.map((post) => ({ post }));
          return this.withMiddleware(...middlewares);
        }
        async request(context, initOverrides) {
          const { url, init } = this.createFetchParams(context, initOverrides);
          let response;
          try {
            response = await fetch(url, init);
          } catch (err) {
            response = await this.fetchApi(url, init);
          }
          if (response.status >= 200 && response.status < 300) {
            return response;
          }
          throw response;
        }
        createFetchParams(context, initOverrides) {
          let url = this.configuration.basePath + context.path;
          if (context.query !== void 0 && Object.keys(context.query).length !== 0) {
            url += "?" + this.configuration.queryParamsStringify(context.query);
          }
          const body = typeof FormData !== "undefined" && context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);
          const headers = Object.assign({}, this.configuration.headers, context.headers);
          const init = {
            method: context.method,
            headers,
            body,
            credentials: this.configuration.credentials,
            ...initOverrides
          };
          return { url, init };
        }
        /**
         * Create a shallow clone of `this` by constructing a new instance
         * and then shallow cloning data members.
         */
        clone() {
          const constructor = this.constructor;
          const next = new constructor(this.configuration);
          next.middleware = this.middleware.slice();
          return next;
        }
      };
      exports.BaseAPI = BaseAPI;
      var RequiredError = class extends Error {
        constructor(field, msg) {
          super(msg);
          this.field = field;
          this.name = "RequiredError";
        }
      };
      exports.RequiredError = RequiredError;
      exports.COLLECTION_FORMATS = {
        csv: ",",
        ssv: " ",
        tsv: "	",
        pipes: "|"
      };
      var Configuration = class {
        constructor(configuration = {}) {
          this.configuration = configuration;
        }
        get basePath() {
          return this.configuration.basePath != null ? this.configuration.basePath : exports.BASE_PATH;
        }
        get fetchApi() {
          return this.configuration.fetchApi;
        }
        get middleware() {
          return this.configuration.middleware || [];
        }
        get queryParamsStringify() {
          return this.configuration.queryParamsStringify || querystring;
        }
        get username() {
          return this.configuration.username;
        }
        get password() {
          return this.configuration.password;
        }
        get apiKey() {
          const apiKey = this.configuration.apiKey;
          if (apiKey) {
            return typeof apiKey === "function" ? apiKey : () => apiKey;
          }
          return void 0;
        }
        get accessToken() {
          const accessToken = this.configuration.accessToken;
          if (accessToken) {
            return typeof accessToken === "function" ? accessToken : () => accessToken;
          }
          return void 0;
        }
        get headers() {
          return this.configuration.headers;
        }
        get credentials() {
          return this.configuration.credentials;
        }
      };
      exports.Configuration = Configuration;
      function exists(json, key) {
        const value = json[key];
        return value !== null && value !== void 0;
      }
      exports.exists = exists;
      function querystring(params, prefix = "") {
        return Object.keys(params).map((key) => {
          const fullKey = prefix + (prefix.length ? `[${key}]` : key);
          const value = params[key];
          if (value instanceof Array) {
            const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
            return `${encodeURIComponent(fullKey)}=${multiValue}`;
          }
          if (value instanceof Date) {
            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
          }
          if (value instanceof Object) {
            return querystring(value, fullKey);
          }
          return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
        }).filter((part) => part.length > 0).join("&");
      }
      exports.querystring = querystring;
      function mapValues(data, fn) {
        return Object.keys(data).reduce((acc, key) => ({ ...acc, [key]: fn(data[key]) }), {});
      }
      exports.mapValues = mapValues;
      function canConsumeForm(consumes) {
        for (const consume of consumes) {
          if ("multipart/form-data" === consume.contentType) {
            return true;
          }
        }
        return false;
      }
      exports.canConsumeForm = canConsumeForm;
      var JSONApiResponse = class {
        constructor(raw, transformer = (jsonValue) => jsonValue) {
          this.raw = raw;
          this.transformer = transformer;
        }
        async value() {
          return this.transformer(await this.raw.json());
        }
      };
      exports.JSONApiResponse = JSONApiResponse;
      var VoidApiResponse = class {
        constructor(raw) {
          this.raw = raw;
        }
        async value() {
          return void 0;
        }
      };
      exports.VoidApiResponse = VoidApiResponse;
      var BlobApiResponse = class {
        constructor(raw) {
          this.raw = raw;
        }
        async value() {
          return await this.raw.blob();
        }
      };
      exports.BlobApiResponse = BlobApiResponse;
      var TextApiResponse = class {
        constructor(raw) {
          this.raw = raw;
        }
        async value() {
          return await this.raw.text();
        }
      };
      exports.TextApiResponse = TextApiResponse;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AccessEnum.js
  var require_AccessEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AccessEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccessEnumToJSON = exports.AccessEnumFromJSONTyped = exports.AccessEnumFromJSON = exports.AccessEnum = void 0;
      var AccessEnum;
      (function(AccessEnum2) {
        AccessEnum2["Public"] = "PUBLIC";
        AccessEnum2["Private"] = "PRIVATE";
      })(AccessEnum || (exports.AccessEnum = AccessEnum = {}));
      function AccessEnumFromJSON(json) {
        return AccessEnumFromJSONTyped(json, false);
      }
      exports.AccessEnumFromJSON = AccessEnumFromJSON;
      function AccessEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.AccessEnumFromJSONTyped = AccessEnumFromJSONTyped;
      function AccessEnumToJSON(value) {
        return value;
      }
      exports.AccessEnumToJSON = AccessEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Accessor.js
  var require_Accessor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Accessor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccessorToJSON = exports.AccessorFromJSONTyped = exports.AccessorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AccessorFromJSON(json) {
        return AccessorFromJSONTyped(json, false);
      }
      exports.AccessorFromJSON = AccessorFromJSON;
      function AccessorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "os": json["os"],
          "share": json["share"],
          "count": json["count"],
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.FlattenedUserProfileFromJSON)(json["user"])
        };
      }
      exports.AccessorFromJSONTyped = AccessorFromJSONTyped;
      function AccessorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "os": value.os,
          "share": value.share,
          "count": value.count,
          "user": (0, _1.FlattenedUserProfileToJSON)(value.user)
        };
      }
      exports.AccessorToJSON = AccessorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Accessors.js
  var require_Accessors = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Accessors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccessorsToJSON = exports.AccessorsFromJSONTyped = exports.AccessorsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AccessorsFromJSON(json) {
        return AccessorsFromJSONTyped(json, false);
      }
      exports.AccessorsFromJSON = AccessorsFromJSON;
      function AccessorsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AccessorFromJSON)
        };
      }
      exports.AccessorsFromJSONTyped = AccessorsFromJSONTyped;
      function AccessorsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AccessorToJSON)
        };
      }
      exports.AccessorsToJSON = AccessorsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Activities.js
  var require_Activities = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Activities.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivitiesToJSON = exports.ActivitiesFromJSONTyped = exports.ActivitiesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ActivitiesFromJSON(json) {
        return ActivitiesFromJSONTyped(json, false);
      }
      exports.ActivitiesFromJSON = ActivitiesFromJSON;
      function ActivitiesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ActivityFromJSON)
        };
      }
      exports.ActivitiesFromJSONTyped = ActivitiesFromJSONTyped;
      function ActivitiesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ActivityToJSON)
        };
      }
      exports.ActivitiesToJSON = ActivitiesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Activity.js
  var require_Activity = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Activity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivityToJSON = exports.ActivityFromJSONTyped = exports.ActivityFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ActivityFromJSON(json) {
        return ActivityFromJSONTyped(json, false);
      }
      exports.ActivityFromJSON = ActivityFromJSON;
      function ActivityFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "event": (0, _1.SeededConnectorTrackingFromJSON)(json["event"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.FlattenedAssetFromJSON)(json["asset"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.FlattenedUserProfileFromJSON)(json["user"]),
          "format": !(0, runtime_1.exists)(json, "format") ? void 0 : (0, _1.FlattenedFormatFromJSON)(json["format"]),
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "rank": !(0, runtime_1.exists)(json, "rank") ? void 0 : json["rank"]
        };
      }
      exports.ActivityFromJSONTyped = ActivityFromJSONTyped;
      function ActivityToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "event": (0, _1.SeededConnectorTrackingToJSON)(value.event),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "asset": (0, _1.FlattenedAssetToJSON)(value.asset),
          "user": (0, _1.FlattenedUserProfileToJSON)(value.user),
          "format": (0, _1.FlattenedFormatToJSON)(value.format),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "rank": value.rank
        };
      }
      exports.ActivityToJSON = ActivityToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Aesthetics.js
  var require_Aesthetics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Aesthetics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AestheticsToJSON = exports.AestheticsFromJSONTyped = exports.AestheticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AestheticsFromJSON(json) {
        return AestheticsFromJSONTyped(json, false);
      }
      exports.AestheticsFromJSON = AestheticsFromJSON;
      function AestheticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "theme": (0, _1.ThemeFromJSON)(json["theme"]),
          "font": (0, _1.FontFromJSON)(json["font"])
        };
      }
      exports.AestheticsFromJSONTyped = AestheticsFromJSONTyped;
      function AestheticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "theme": (0, _1.ThemeToJSON)(value.theme),
          "font": (0, _1.FontToJSON)(value.font)
        };
      }
      exports.AestheticsToJSON = AestheticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloud.js
  var require_AllocationCloud = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloud.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationCloudToJSON = exports.AllocationCloudFromJSONTyped = exports.AllocationCloudFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AllocationCloudFromJSON(json) {
        return AllocationCloudFromJSONTyped(json, false);
      }
      exports.AllocationCloudFromJSON = AllocationCloudFromJSON;
      function AllocationCloudFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "user": json["user"],
          "urls": (0, _1.AllocationCloudUrlsFromJSON)(json["urls"]),
          "status": (0, _1.AllocationCloudStatusFromJSON)(json["status"]),
          "project": json["project"],
          "updated": !(0, runtime_1.exists)(json, "updated") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "version": !(0, runtime_1.exists)(json, "version") ? void 0 : json["version"],
          "region": !(0, runtime_1.exists)(json, "region") ? void 0 : json["region"]
        };
      }
      exports.AllocationCloudFromJSONTyped = AllocationCloudFromJSONTyped;
      function AllocationCloudToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "user": value.user,
          "urls": (0, _1.AllocationCloudUrlsToJSON)(value.urls),
          "status": (0, _1.AllocationCloudStatusToJSON)(value.status),
          "project": value.project,
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "version": value.version,
          "region": value.region
        };
      }
      exports.AllocationCloudToJSON = AllocationCloudToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudStatus.js
  var require_AllocationCloudStatus = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationCloudStatusToJSON = exports.AllocationCloudStatusFromJSONTyped = exports.AllocationCloudStatusFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AllocationCloudStatusFromJSON(json) {
        return AllocationCloudStatusFromJSONTyped(json, false);
      }
      exports.AllocationCloudStatusFromJSON = AllocationCloudStatusFromJSON;
      function AllocationCloudStatusFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "cloud": (0, _1.AllocationStatusEnumFromJSON)(json["cloud"])
        };
      }
      exports.AllocationCloudStatusFromJSONTyped = AllocationCloudStatusFromJSONTyped;
      function AllocationCloudStatusToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "cloud": (0, _1.AllocationStatusEnumToJSON)(value.cloud)
        };
      }
      exports.AllocationCloudStatusToJSON = AllocationCloudStatusToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudUrl.js
  var require_AllocationCloudUrl = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudUrl.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationCloudUrlToJSON = exports.AllocationCloudUrlFromJSONTyped = exports.AllocationCloudUrlFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AllocationCloudUrlFromJSON(json) {
        return AllocationCloudUrlFromJSONTyped(json, false);
      }
      exports.AllocationCloudUrlFromJSON = AllocationCloudUrlFromJSON;
      function AllocationCloudUrlFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "status": (0, _1.AllocationStatusEnumFromJSON)(json["status"]),
          "url": json["url"]
        };
      }
      exports.AllocationCloudUrlFromJSONTyped = AllocationCloudUrlFromJSONTyped;
      function AllocationCloudUrlToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "status": (0, _1.AllocationStatusEnumToJSON)(value.status),
          "url": value.url
        };
      }
      exports.AllocationCloudUrlToJSON = AllocationCloudUrlToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudUrls.js
  var require_AllocationCloudUrls = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AllocationCloudUrls.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationCloudUrlsToJSON = exports.AllocationCloudUrlsFromJSONTyped = exports.AllocationCloudUrlsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AllocationCloudUrlsFromJSON(json) {
        return AllocationCloudUrlsFromJSONTyped(json, false);
      }
      exports.AllocationCloudUrlsFromJSON = AllocationCloudUrlsFromJSON;
      function AllocationCloudUrlsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "base": (0, _1.AllocationCloudUrlFromJSON)(json["base"]),
          "id": (0, _1.AllocationCloudUrlFromJSON)(json["id"]),
          "vanity": !(0, runtime_1.exists)(json, "vanity") ? void 0 : (0, _1.AllocationCloudUrlFromJSON)(json["vanity"])
        };
      }
      exports.AllocationCloudUrlsFromJSONTyped = AllocationCloudUrlsFromJSONTyped;
      function AllocationCloudUrlsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "base": (0, _1.AllocationCloudUrlToJSON)(value.base),
          "id": (0, _1.AllocationCloudUrlToJSON)(value.id),
          "vanity": (0, _1.AllocationCloudUrlToJSON)(value.vanity)
        };
      }
      exports.AllocationCloudUrlsToJSON = AllocationCloudUrlsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AllocationStatusEnum.js
  var require_AllocationStatusEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AllocationStatusEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationStatusEnumToJSON = exports.AllocationStatusEnumFromJSONTyped = exports.AllocationStatusEnumFromJSON = exports.AllocationStatusEnum = void 0;
      var AllocationStatusEnum;
      (function(AllocationStatusEnum2) {
        AllocationStatusEnum2["Pending"] = "PENDING";
        AllocationStatusEnum2["Running"] = "RUNNING";
        AllocationStatusEnum2["Failed"] = "FAILED";
        AllocationStatusEnum2["Succeeded"] = "SUCCEEDED";
        AllocationStatusEnum2["Unknown"] = "UNKNOWN";
      })(AllocationStatusEnum || (exports.AllocationStatusEnum = AllocationStatusEnum = {}));
      function AllocationStatusEnumFromJSON(json) {
        return AllocationStatusEnumFromJSONTyped(json, false);
      }
      exports.AllocationStatusEnumFromJSON = AllocationStatusEnumFromJSON;
      function AllocationStatusEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.AllocationStatusEnumFromJSONTyped = AllocationStatusEnumFromJSONTyped;
      function AllocationStatusEnumToJSON(value) {
        return value;
      }
      exports.AllocationStatusEnumToJSON = AllocationStatusEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Allocations.js
  var require_Allocations = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Allocations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationsToJSON = exports.AllocationsFromJSONTyped = exports.AllocationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AllocationsFromJSON(json) {
        return AllocationsFromJSONTyped(json, false);
      }
      exports.AllocationsFromJSON = AllocationsFromJSON;
      function AllocationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AllocationCloudFromJSON)
        };
      }
      exports.AllocationsFromJSONTyped = AllocationsFromJSONTyped;
      function AllocationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AllocationCloudToJSON)
        };
      }
      exports.AllocationsToJSON = AllocationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Analyses.js
  var require_Analyses = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Analyses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnalysesToJSON = exports.AnalysesFromJSONTyped = exports.AnalysesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnalysesFromJSON(json) {
        return AnalysesFromJSONTyped(json, false);
      }
      exports.AnalysesFromJSON = AnalysesFromJSON;
      function AnalysesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AnalysisFromJSON)
        };
      }
      exports.AnalysesFromJSONTyped = AnalysesFromJSONTyped;
      function AnalysesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AnalysisToJSON)
        };
      }
      exports.AnalysesToJSON = AnalysesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Analysis.js
  var require_Analysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Analysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnalysisToJSON = exports.AnalysisFromJSONTyped = exports.AnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnalysisFromJSON(json) {
        return AnalysisFromJSONTyped(json, false);
      }
      exports.AnalysisFromJSON = AnalysisFromJSON;
      function AnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "code": !(0, runtime_1.exists)(json, "code") ? void 0 : (0, _1.CodeAnalysisFromJSON)(json["code"]),
          "id": json["id"],
          "format": json["format"],
          "image": !(0, runtime_1.exists)(json, "image") ? void 0 : (0, _1.ImageAnalysisFromJSON)(json["image"])
        };
      }
      exports.AnalysisFromJSONTyped = AnalysisFromJSONTyped;
      function AnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "code": (0, _1.CodeAnalysisToJSON)(value.code),
          "id": value.id,
          "format": value.format,
          "image": (0, _1.ImageAnalysisToJSON)(value.image)
        };
      }
      exports.AnalysisToJSON = AnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AnalyticsTrackedAdoptionEventIdentifierDescriptionPairs.js
  var require_AnalyticsTrackedAdoptionEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AnalyticsTrackedAdoptionEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsToJSON = exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSONTyped = exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSON = exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum = exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum;
      (function(AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum2) {
        AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum2["TheUserHasInstalledAPiecesApplication"] = "the_user_has_installed_a_pieces_application";
      })(AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum || (exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum = AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionInstallEnum = {}));
      var AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum;
      (function(AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum2) {
        AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum2["TheUserHasUninstalledAPiecesApplication"] = "the_user_has_uninstalled_a_pieces_application";
      })(AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum || (exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum = AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsAdoptionUninstallEnum = {}));
      function AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSON(json) {
        return AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSON = AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSON;
      function AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "adoptionInstall": !(0, runtime_1.exists)(json, "adoption_install") ? void 0 : json["adoption_install"],
          "adoptionUninstall": !(0, runtime_1.exists)(json, "adoption_uninstall") ? void 0 : json["adoption_uninstall"]
        };
      }
      exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSONTyped = AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSONTyped;
      function AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "adoption_install": value.adoptionInstall,
          "adoption_uninstall": value.adoptionUninstall
        };
      }
      exports.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsToJSON = AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Anchor.js
  var require_Anchor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Anchor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorToJSON = exports.AnchorFromJSONTyped = exports.AnchorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnchorFromJSON(json) {
        return AnchorFromJSONTyped(json, false);
      }
      exports.AnchorFromJSON = AnchorFromJSON;
      function AnchorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "type": (0, _1.AnchorTypeEnumFromJSON)(json["type"]),
          "watch": !(0, runtime_1.exists)(json, "watch") ? void 0 : json["watch"],
          "points": (0, _1.FlattenedAnchorPointsFromJSON)(json["points"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : (0, _1.FlattenedConversationsFromJSON)(json["conversations"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AnchorFromJSONTyped = AnchorFromJSONTyped;
      function AnchorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": value.name,
          "type": (0, _1.AnchorTypeEnumToJSON)(value.type),
          "watch": value.watch,
          "points": (0, _1.FlattenedAnchorPointsToJSON)(value.points),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "conversations": (0, _1.FlattenedConversationsToJSON)(value.conversations),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AnchorToJSON = AnchorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AnchorPoint.js
  var require_AnchorPoint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AnchorPoint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorPointToJSON = exports.AnchorPointFromJSONTyped = exports.AnchorPointFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnchorPointFromJSON(json) {
        return AnchorPointFromJSONTyped(json, false);
      }
      exports.AnchorPointFromJSON = AnchorPointFromJSON;
      function AnchorPointFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "verified": !(0, runtime_1.exists)(json, "verified") ? void 0 : json["verified"],
          "fullpath": json["fullpath"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "platform": !(0, runtime_1.exists)(json, "platform") ? void 0 : (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "anchor": (0, _1.ReferencedAnchorFromJSON)(json["anchor"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AnchorPointFromJSONTyped = AnchorPointFromJSONTyped;
      function AnchorPointToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "verified": value.verified,
          "fullpath": value.fullpath,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "anchor": (0, _1.ReferencedAnchorToJSON)(value.anchor),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AnchorPointToJSON = AnchorPointToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AnchorPoints.js
  var require_AnchorPoints = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AnchorPoints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorPointsToJSON = exports.AnchorPointsFromJSONTyped = exports.AnchorPointsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnchorPointsFromJSON(json) {
        return AnchorPointsFromJSONTyped(json, false);
      }
      exports.AnchorPointsFromJSON = AnchorPointsFromJSON;
      function AnchorPointsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AnchorPointFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AnchorPointsFromJSONTyped = AnchorPointsFromJSONTyped;
      function AnchorPointsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AnchorPointToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AnchorPointsToJSON = AnchorPointsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AnchorTypeEnum.js
  var require_AnchorTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AnchorTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorTypeEnumToJSON = exports.AnchorTypeEnumFromJSONTyped = exports.AnchorTypeEnumFromJSON = exports.AnchorTypeEnum = void 0;
      var AnchorTypeEnum;
      (function(AnchorTypeEnum2) {
        AnchorTypeEnum2["File"] = "FILE";
        AnchorTypeEnum2["Directory"] = "DIRECTORY";
      })(AnchorTypeEnum || (exports.AnchorTypeEnum = AnchorTypeEnum = {}));
      function AnchorTypeEnumFromJSON(json) {
        return AnchorTypeEnumFromJSONTyped(json, false);
      }
      exports.AnchorTypeEnumFromJSON = AnchorTypeEnumFromJSON;
      function AnchorTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.AnchorTypeEnumFromJSONTyped = AnchorTypeEnumFromJSONTyped;
      function AnchorTypeEnumToJSON(value) {
        return value;
      }
      exports.AnchorTypeEnumToJSON = AnchorTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Anchors.js
  var require_Anchors = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Anchors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorsToJSON = exports.AnchorsFromJSONTyped = exports.AnchorsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnchorsFromJSON(json) {
        return AnchorsFromJSONTyped(json, false);
      }
      exports.AnchorsFromJSON = AnchorsFromJSON;
      function AnchorsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AnchorFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AnchorsFromJSONTyped = AnchorsFromJSONTyped;
      function AnchorsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AnchorToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AnchorsToJSON = AnchorsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Annotation.js
  var require_Annotation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Annotation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnnotationToJSON = exports.AnnotationFromJSONTyped = exports.AnnotationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnnotationFromJSON(json) {
        return AnnotationFromJSONTyped(json, false);
      }
      exports.AnnotationFromJSON = AnnotationFromJSON;
      function AnnotationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : (0, _1.ReferencedPersonFromJSON)(json["person"]),
          "type": (0, _1.AnnotationTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"],
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : (0, _1.ReferencedAnchorFromJSON)(json["anchor"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.AnnotationFromJSONTyped = AnnotationFromJSONTyped;
      function AnnotationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "person": (0, _1.ReferencedPersonToJSON)(value.person),
          "type": (0, _1.AnnotationTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "pseudo": value.pseudo,
          "favorited": value.favorited,
          "anchor": (0, _1.ReferencedAnchorToJSON)(value.anchor),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "score": (0, _1.ScoreToJSON)(value.score),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.AnnotationToJSON = AnnotationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AnnotationTypeEnum.js
  var require_AnnotationTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AnnotationTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnnotationTypeEnumToJSON = exports.AnnotationTypeEnumFromJSONTyped = exports.AnnotationTypeEnumFromJSON = exports.AnnotationTypeEnum = void 0;
      var AnnotationTypeEnum;
      (function(AnnotationTypeEnum2) {
        AnnotationTypeEnum2["Description"] = "DESCRIPTION";
        AnnotationTypeEnum2["Comment"] = "COMMENT";
        AnnotationTypeEnum2["Documentation"] = "DOCUMENTATION";
        AnnotationTypeEnum2["Summary"] = "SUMMARY";
        AnnotationTypeEnum2["Explanation"] = "EXPLANATION";
        AnnotationTypeEnum2["GitCommit"] = "GIT_COMMIT";
      })(AnnotationTypeEnum || (exports.AnnotationTypeEnum = AnnotationTypeEnum = {}));
      function AnnotationTypeEnumFromJSON(json) {
        return AnnotationTypeEnumFromJSONTyped(json, false);
      }
      exports.AnnotationTypeEnumFromJSON = AnnotationTypeEnumFromJSON;
      function AnnotationTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.AnnotationTypeEnumFromJSONTyped = AnnotationTypeEnumFromJSONTyped;
      function AnnotationTypeEnumToJSON(value) {
        return value;
      }
      exports.AnnotationTypeEnumToJSON = AnnotationTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Annotations.js
  var require_Annotations = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Annotations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnnotationsToJSON = exports.AnnotationsFromJSONTyped = exports.AnnotationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AnnotationsFromJSON(json) {
        return AnnotationsFromJSONTyped(json, false);
      }
      exports.AnnotationsFromJSON = AnnotationsFromJSON;
      function AnnotationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AnnotationFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AnnotationsFromJSONTyped = AnnotationsFromJSONTyped;
      function AnnotationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AnnotationToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AnnotationsToJSON = AnnotationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Application.js
  var require_Application = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Application.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationToJSON = exports.ApplicationFromJSONTyped = exports.ApplicationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ApplicationFromJSON(json) {
        return ApplicationFromJSONTyped(json, false);
      }
      exports.ApplicationFromJSON = ApplicationFromJSON;
      function ApplicationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": (0, _1.ApplicationNameEnumFromJSON)(json["name"]),
          "version": json["version"],
          "platform": (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "onboarded": json["onboarded"],
          "privacy": (0, _1.PrivacyEnumFromJSON)(json["privacy"]),
          "capabilities": !(0, runtime_1.exists)(json, "capabilities") ? void 0 : (0, _1.CapabilitiesEnumFromJSON)(json["capabilities"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "automaticUnload": !(0, runtime_1.exists)(json, "automaticUnload") ? void 0 : json["automaticUnload"]
        };
      }
      exports.ApplicationFromJSONTyped = ApplicationFromJSONTyped;
      function ApplicationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": (0, _1.ApplicationNameEnumToJSON)(value.name),
          "version": value.version,
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "onboarded": value.onboarded,
          "privacy": (0, _1.PrivacyEnumToJSON)(value.privacy),
          "capabilities": (0, _1.CapabilitiesEnumToJSON)(value.capabilities),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "automaticUnload": value.automaticUnload
        };
      }
      exports.ApplicationToJSON = ApplicationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ApplicationNameEnum.js
  var require_ApplicationNameEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ApplicationNameEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationNameEnumToJSON = exports.ApplicationNameEnumFromJSONTyped = exports.ApplicationNameEnumFromJSON = exports.ApplicationNameEnum = void 0;
      var ApplicationNameEnum;
      (function(ApplicationNameEnum2) {
        ApplicationNameEnum2["Sublime"] = "SUBLIME";
        ApplicationNameEnum2["VsCode"] = "VS_CODE";
        ApplicationNameEnum2["Jetbrains"] = "JETBRAINS";
        ApplicationNameEnum2["FirefoxAddonMv2"] = "FIREFOX_ADDON_MV2";
        ApplicationNameEnum2["FirefoxAddonMv3"] = "FIREFOX_ADDON_MV3";
        ApplicationNameEnum2["SafariExtensionMv2"] = "SAFARI_EXTENSION_MV2";
        ApplicationNameEnum2["SafariExtensionMv3"] = "SAFARI_EXTENSION_MV3";
        ApplicationNameEnum2["PiecesForDevelopers"] = "PIECES_FOR_DEVELOPERS";
        ApplicationNameEnum2["PiecesForDevelopersCli"] = "PIECES_FOR_DEVELOPERS_CLI";
        ApplicationNameEnum2["OsServer"] = "OS_SERVER";
        ApplicationNameEnum2["GoogleChromeExtensionMv2"] = "GOOGLE_CHROME_EXTENSION_MV2";
        ApplicationNameEnum2["GoogleChromeExtensionMv3"] = "GOOGLE_CHROME_EXTENSION_MV3";
        ApplicationNameEnum2["UltraEdit"] = "ULTRA_EDIT";
        ApplicationNameEnum2["AtomPackage"] = "ATOM_PACKAGE";
        ApplicationNameEnum2["AdobeIllustratorPiecesColorShare"] = "ADOBE_ILLUSTRATOR_PIECES_COLOR_SHARE";
        ApplicationNameEnum2["MicrosoftTeams"] = "MICROSOFT_TEAMS";
        ApplicationNameEnum2["ChatGpt"] = "CHAT_GPT";
        ApplicationNameEnum2["Obsidian"] = "OBSIDIAN";
        ApplicationNameEnum2["JupyterHub"] = "JUPYTER_HUB";
        ApplicationNameEnum2["VisualStudio"] = "VISUAL_STUDIO";
        ApplicationNameEnum2["MicrosoftEdge"] = "MICROSOFT_EDGE";
        ApplicationNameEnum2["Brave"] = "BRAVE";
        ApplicationNameEnum2["GoogleChat"] = "GOOGLE_CHAT";
        ApplicationNameEnum2["Slack"] = "SLACK";
        ApplicationNameEnum2["AzureDataStudio"] = "AZURE_DATA_STUDIO";
        ApplicationNameEnum2["OpenSource"] = "OPEN_SOURCE";
        ApplicationNameEnum2["Unknown"] = "UNKNOWN";
      })(ApplicationNameEnum || (exports.ApplicationNameEnum = ApplicationNameEnum = {}));
      function ApplicationNameEnumFromJSON(json) {
        return ApplicationNameEnumFromJSONTyped(json, false);
      }
      exports.ApplicationNameEnumFromJSON = ApplicationNameEnumFromJSON;
      function ApplicationNameEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ApplicationNameEnumFromJSONTyped = ApplicationNameEnumFromJSONTyped;
      function ApplicationNameEnumToJSON(value) {
        return value;
      }
      exports.ApplicationNameEnumToJSON = ApplicationNameEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Applications.js
  var require_Applications = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Applications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationsToJSON = exports.ApplicationsFromJSONTyped = exports.ApplicationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ApplicationsFromJSON(json) {
        return ApplicationsFromJSONTyped(json, false);
      }
      exports.ApplicationsFromJSON = ApplicationsFromJSON;
      function ApplicationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ApplicationFromJSON)
        };
      }
      exports.ApplicationsFromJSONTyped = ApplicationsFromJSONTyped;
      function ApplicationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ApplicationToJSON)
        };
      }
      exports.ApplicationsToJSON = ApplicationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Asset.js
  var require_Asset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Asset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetToJSON = exports.AssetFromJSONTyped = exports.AssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFromJSON(json) {
        return AssetFromJSONTyped(json, false);
      }
      exports.AssetFromJSON = AssetFromJSON;
      function AssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "creator": json["creator"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "synced": !(0, runtime_1.exists)(json, "synced") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["synced"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "formats": (0, _1.FormatsFromJSON)(json["formats"]),
          "preview": (0, _1.PreviewFromJSON)(json["preview"]),
          "original": (0, _1.ReferencedFormatFromJSON)(json["original"]),
          "shares": !(0, runtime_1.exists)(json, "shares") ? void 0 : (0, _1.SharesFromJSON)(json["shares"]),
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : (0, _1.WebsitesFromJSON)(json["websites"]),
          "interacted": !(0, runtime_1.exists)(json, "interacted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["interacted"]),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : (0, _1.TagsFromJSON)(json["tags"]),
          "sensitives": !(0, runtime_1.exists)(json, "sensitives") ? void 0 : (0, _1.SensitivesFromJSON)(json["sensitives"]),
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.PersonsFromJSON)(json["persons"]),
          "curated": !(0, runtime_1.exists)(json, "curated") ? void 0 : json["curated"],
          "discovered": !(0, runtime_1.exists)(json, "discovered") ? void 0 : json["discovered"],
          "activities": !(0, runtime_1.exists)(json, "activities") ? void 0 : (0, _1.ActivitiesFromJSON)(json["activities"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"],
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.AnnotationsFromJSON)(json["annotations"]),
          "hints": !(0, runtime_1.exists)(json, "hints") ? void 0 : (0, _1.HintsFromJSON)(json["hints"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : (0, _1.AnchorsFromJSON)(json["anchors"]),
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : (0, _1.ConversationsFromJSON)(json["conversations"])
        };
      }
      exports.AssetFromJSONTyped = AssetFromJSONTyped;
      function AssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": value.name,
          "creator": value.creator,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "synced": (0, _1.GroupedTimestampToJSON)(value.synced),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "formats": (0, _1.FormatsToJSON)(value.formats),
          "preview": (0, _1.PreviewToJSON)(value.preview),
          "original": (0, _1.ReferencedFormatToJSON)(value.original),
          "shares": (0, _1.SharesToJSON)(value.shares),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "websites": (0, _1.WebsitesToJSON)(value.websites),
          "interacted": (0, _1.GroupedTimestampToJSON)(value.interacted),
          "tags": (0, _1.TagsToJSON)(value.tags),
          "sensitives": (0, _1.SensitivesToJSON)(value.sensitives),
          "persons": (0, _1.PersonsToJSON)(value.persons),
          "curated": value.curated,
          "discovered": value.discovered,
          "activities": (0, _1.ActivitiesToJSON)(value.activities),
          "score": (0, _1.ScoreToJSON)(value.score),
          "favorited": value.favorited,
          "pseudo": value.pseudo,
          "annotations": (0, _1.AnnotationsToJSON)(value.annotations),
          "hints": (0, _1.HintsToJSON)(value.hints),
          "anchors": (0, _1.AnchorsToJSON)(value.anchors),
          "conversations": (0, _1.ConversationsToJSON)(value.conversations)
        };
      }
      exports.AssetToJSON = AssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilter.js
  var require_AssetFilter = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetFilterToJSON = exports.AssetFilterFromJSONTyped = exports.AssetFilterFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFilterFromJSON(json) {
        return AssetFilterFromJSONTyped(json, false);
      }
      exports.AssetFilterFromJSON = AssetFilterFromJSON;
      function AssetFilterFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "classification": !(0, runtime_1.exists)(json, "classification") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["classification"]),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : json["tags"],
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : json["websites"],
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : json["persons"],
          "phrase": !(0, runtime_1.exists)(json, "phrase") ? void 0 : (0, _1.AssetFilterPhraseFromJSON)(json["phrase"]),
          "created": !(0, runtime_1.exists)(json, "created") ? void 0 : (0, _1.AssetFilterTimestampFromJSON)(json["created"]),
          "updated": !(0, runtime_1.exists)(json, "updated") ? void 0 : (0, _1.AssetFilterTimestampFromJSON)(json["updated"]),
          "operations": !(0, runtime_1.exists)(json, "operations") ? void 0 : (0, _1.AssetFiltersFromJSON)(json["operations"])
        };
      }
      exports.AssetFilterFromJSONTyped = AssetFilterFromJSONTyped;
      function AssetFilterToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "classification": (0, _1.ClassificationSpecificEnumToJSON)(value.classification),
          "tags": value.tags,
          "websites": value.websites,
          "persons": value.persons,
          "phrase": (0, _1.AssetFilterPhraseToJSON)(value.phrase),
          "created": (0, _1.AssetFilterTimestampToJSON)(value.created),
          "updated": (0, _1.AssetFilterTimestampToJSON)(value.updated),
          "operations": (0, _1.AssetFiltersToJSON)(value.operations)
        };
      }
      exports.AssetFilterToJSON = AssetFilterToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterPhrase.js
  var require_AssetFilterPhrase = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterPhrase.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetFilterPhraseToJSON = exports.AssetFilterPhraseFromJSONTyped = exports.AssetFilterPhraseFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFilterPhraseFromJSON(json) {
        return AssetFilterPhraseFromJSONTyped(json, false);
      }
      exports.AssetFilterPhraseFromJSON = AssetFilterPhraseFromJSON;
      function AssetFilterPhraseFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "value": !(0, runtime_1.exists)(json, "value") ? void 0 : json["value"],
          "annotation": !(0, runtime_1.exists)(json, "annotation") ? void 0 : json["annotation"],
          "title": !(0, runtime_1.exists)(json, "title") ? void 0 : json["title"],
          "content": !(0, runtime_1.exists)(json, "content") ? void 0 : json["content"],
          "options": !(0, runtime_1.exists)(json, "options") ? void 0 : (0, _1.AssetFilterPhraseOptionsFromJSON)(json["options"])
        };
      }
      exports.AssetFilterPhraseFromJSONTyped = AssetFilterPhraseFromJSONTyped;
      function AssetFilterPhraseToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "value": value.value,
          "annotation": value.annotation,
          "title": value.title,
          "content": value.content,
          "options": (0, _1.AssetFilterPhraseOptionsToJSON)(value.options)
        };
      }
      exports.AssetFilterPhraseToJSON = AssetFilterPhraseToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterPhraseOptions.js
  var require_AssetFilterPhraseOptions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterPhraseOptions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetFilterPhraseOptionsToJSON = exports.AssetFilterPhraseOptionsFromJSONTyped = exports.AssetFilterPhraseOptionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFilterPhraseOptionsFromJSON(json) {
        return AssetFilterPhraseOptionsFromJSONTyped(json, false);
      }
      exports.AssetFilterPhraseOptionsFromJSON = AssetFilterPhraseOptionsFromJSON;
      function AssetFilterPhraseOptionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "annotation": !(0, runtime_1.exists)(json, "annotation") ? void 0 : (0, _1.AnnotationTypeEnumFromJSON)(json["annotation"])
        };
      }
      exports.AssetFilterPhraseOptionsFromJSONTyped = AssetFilterPhraseOptionsFromJSONTyped;
      function AssetFilterPhraseOptionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "annotation": (0, _1.AnnotationTypeEnumToJSON)(value.annotation)
        };
      }
      exports.AssetFilterPhraseOptionsToJSON = AssetFilterPhraseOptionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterTimestamp.js
  var require_AssetFilterTimestamp = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilterTimestamp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetFilterTimestampToJSON = exports.AssetFilterTimestampFromJSONTyped = exports.AssetFilterTimestampFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFilterTimestampFromJSON(json) {
        return AssetFilterTimestampFromJSONTyped(json, false);
      }
      exports.AssetFilterTimestampFromJSON = AssetFilterTimestampFromJSON;
      function AssetFilterTimestampFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "from": !(0, runtime_1.exists)(json, "from") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["from"]),
          "to": !(0, runtime_1.exists)(json, "to") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["to"]),
          "between": !(0, runtime_1.exists)(json, "between") ? void 0 : json["between"]
        };
      }
      exports.AssetFilterTimestampFromJSONTyped = AssetFilterTimestampFromJSONTyped;
      function AssetFilterTimestampToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "from": (0, _1.GroupedTimestampToJSON)(value.from),
          "to": (0, _1.GroupedTimestampToJSON)(value.to),
          "between": value.between
        };
      }
      exports.AssetFilterTimestampToJSON = AssetFilterTimestampToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilters.js
  var require_AssetFilters = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetFilters.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetFiltersToJSON = exports.AssetFiltersFromJSONTyped = exports.AssetFiltersFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetFiltersFromJSON(json) {
        return AssetFiltersFromJSONTyped(json, false);
      }
      exports.AssetFiltersFromJSON = AssetFiltersFromJSON;
      function AssetFiltersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AssetFilterFromJSON),
          "type": !(0, runtime_1.exists)(json, "type") ? void 0 : (0, _1.FilterOperationTypeEnumFromJSON)(json["type"])
        };
      }
      exports.AssetFiltersFromJSONTyped = AssetFiltersFromJSONTyped;
      function AssetFiltersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AssetFilterToJSON),
          "type": (0, _1.FilterOperationTypeEnumToJSON)(value.type)
        };
      }
      exports.AssetFiltersToJSON = AssetFiltersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetReclassification.js
  var require_AssetReclassification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetReclassification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetReclassificationToJSON = exports.AssetReclassificationFromJSONTyped = exports.AssetReclassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetReclassificationFromJSON(json) {
        return AssetReclassificationFromJSONTyped(json, false);
      }
      exports.AssetReclassificationFromJSON = AssetReclassificationFromJSON;
      function AssetReclassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "ext": (0, _1.ClassificationSpecificEnumFromJSON)(json["ext"]),
          "asset": (0, _1.AssetFromJSON)(json["asset"])
        };
      }
      exports.AssetReclassificationFromJSONTyped = AssetReclassificationFromJSONTyped;
      function AssetReclassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "ext": (0, _1.ClassificationSpecificEnumToJSON)(value.ext),
          "asset": (0, _1.AssetToJSON)(value.asset)
        };
      }
      exports.AssetReclassificationToJSON = AssetReclassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetSearchSpace.js
  var require_AssetSearchSpace = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetSearchSpace.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetSearchSpaceToJSON = exports.AssetSearchSpaceFromJSONTyped = exports.AssetSearchSpaceFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetSearchSpaceFromJSON(json) {
        return AssetSearchSpaceFromJSONTyped(json, false);
      }
      exports.AssetSearchSpaceFromJSON = AssetSearchSpaceFromJSON;
      function AssetSearchSpaceFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifers": (0, _1.FlattenedAssetsFromJSON)(json["identifers"])
        };
      }
      exports.AssetSearchSpaceFromJSONTyped = AssetSearchSpaceFromJSONTyped;
      function AssetSearchSpaceToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifers": (0, _1.FlattenedAssetsToJSON)(value.identifers)
        };
      }
      exports.AssetSearchSpaceToJSON = AssetSearchSpaceToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Assets.js
  var require_Assets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Assets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetsToJSON = exports.AssetsFromJSONTyped = exports.AssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetsFromJSON(json) {
        return AssetsFromJSONTyped(json, false);
      }
      exports.AssetsFromJSON = AssetsFromJSON;
      function AssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.AssetFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.AssetsFromJSONTyped = AssetsFromJSONTyped;
      function AssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.AssetToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.AssetsToJSON = AssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetsSearchWithFiltersInput.js
  var require_AssetsSearchWithFiltersInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetsSearchWithFiltersInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetsSearchWithFiltersInputToJSON = exports.AssetsSearchWithFiltersInputFromJSONTyped = exports.AssetsSearchWithFiltersInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetsSearchWithFiltersInputFromJSON(json) {
        return AssetsSearchWithFiltersInputFromJSONTyped(json, false);
      }
      exports.AssetsSearchWithFiltersInputFromJSON = AssetsSearchWithFiltersInputFromJSON;
      function AssetsSearchWithFiltersInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "query": !(0, runtime_1.exists)(json, "query") ? void 0 : json["query"],
          "space": !(0, runtime_1.exists)(json, "space") ? void 0 : (0, _1.AssetSearchSpaceFromJSON)(json["space"]),
          "filters": !(0, runtime_1.exists)(json, "filters") ? void 0 : (0, _1.AssetFiltersFromJSON)(json["filters"]),
          "casing": !(0, runtime_1.exists)(json, "casing") ? void 0 : json["casing"]
        };
      }
      exports.AssetsSearchWithFiltersInputFromJSONTyped = AssetsSearchWithFiltersInputFromJSONTyped;
      function AssetsSearchWithFiltersInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "query": value.query,
          "space": (0, _1.AssetSearchSpaceToJSON)(value.space),
          "filters": (0, _1.AssetFiltersToJSON)(value.filters),
          "casing": value.casing
        };
      }
      exports.AssetsSearchWithFiltersInputToJSON = AssetsSearchWithFiltersInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AssetsSearchWithFiltersOutput.js
  var require_AssetsSearchWithFiltersOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AssetsSearchWithFiltersOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetsSearchWithFiltersOutputToJSON = exports.AssetsSearchWithFiltersOutputFromJSONTyped = exports.AssetsSearchWithFiltersOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AssetsSearchWithFiltersOutputFromJSON(json) {
        return AssetsSearchWithFiltersOutputFromJSONTyped(json, false);
      }
      exports.AssetsSearchWithFiltersOutputFromJSON = AssetsSearchWithFiltersOutputFromJSON;
      function AssetsSearchWithFiltersOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "results": (0, _1.SearchedAssetsFromJSON)(json["results"])
        };
      }
      exports.AssetsSearchWithFiltersOutputFromJSONTyped = AssetsSearchWithFiltersOutputFromJSONTyped;
      function AssetsSearchWithFiltersOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "results": (0, _1.SearchedAssetsToJSON)(value.results)
        };
      }
      exports.AssetsSearchWithFiltersOutputToJSON = AssetsSearchWithFiltersOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0.js
  var require_Auth0 = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0ToJSON = exports.Auth0FromJSONTyped = exports.Auth0FromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function Auth0FromJSON(json) {
        return Auth0FromJSONTyped(json, false);
      }
      exports.Auth0FromJSON = Auth0FromJSON;
      function Auth0FromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "identity": !(0, runtime_1.exists)(json, "identity") ? void 0 : (0, _1.Auth0IdentityFromJSON)(json["identity"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.Auth0UserFromJSON)(json["user"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.Auth0UserMetadataFromJSON)(json["metadata"]),
          "domain": json["domain"],
          "client": json["client"],
          "audience": json["audience"],
          "redirects": (0, _1.Auth0RedirectsFromJSON)(json["redirects"]),
          "oAuth": (0, _1.OAuthGroupFromJSON)(json["oAuth"]),
          "namespace": !(0, runtime_1.exists)(json, "namespace") ? void 0 : json["namespace"]
        };
      }
      exports.Auth0FromJSONTyped = Auth0FromJSONTyped;
      function Auth0ToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "identity": (0, _1.Auth0IdentityToJSON)(value.identity),
          "user": (0, _1.Auth0UserToJSON)(value.user),
          "metadata": (0, _1.Auth0UserMetadataToJSON)(value.metadata),
          "domain": value.domain,
          "client": value.client,
          "audience": value.audience,
          "redirects": (0, _1.Auth0RedirectsToJSON)(value.redirects),
          "oAuth": (0, _1.OAuthGroupToJSON)(value.oAuth),
          "namespace": value.namespace
        };
      }
      exports.Auth0ToJSON = Auth0ToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0Identity.js
  var require_Auth0Identity = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0Identity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0IdentityToJSON = exports.Auth0IdentityFromJSONTyped = exports.Auth0IdentityFromJSON = void 0;
      var runtime_1 = require_runtime();
      function Auth0IdentityFromJSON(json) {
        return Auth0IdentityFromJSONTyped(json, false);
      }
      exports.Auth0IdentityFromJSON = Auth0IdentityFromJSON;
      function Auth0IdentityFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "connection": !(0, runtime_1.exists)(json, "connection") ? void 0 : json["connection"],
          "isSocial": !(0, runtime_1.exists)(json, "isSocial") ? void 0 : json["isSocial"],
          "provider": !(0, runtime_1.exists)(json, "provider") ? void 0 : json["provider"],
          "userId": !(0, runtime_1.exists)(json, "user_id") ? void 0 : json["user_id"],
          "accessToken": !(0, runtime_1.exists)(json, "access_token") ? void 0 : json["access_token"],
          "expiresIn": !(0, runtime_1.exists)(json, "expires_in") ? void 0 : json["expires_in"]
        };
      }
      exports.Auth0IdentityFromJSONTyped = Auth0IdentityFromJSONTyped;
      function Auth0IdentityToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "connection": value.connection,
          "isSocial": value.isSocial,
          "provider": value.provider,
          "user_id": value.userId,
          "access_token": value.accessToken,
          "expires_in": value.expiresIn
        };
      }
      exports.Auth0IdentityToJSON = Auth0IdentityToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0OpenAIUserMetadata.js
  var require_Auth0OpenAIUserMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0OpenAIUserMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0OpenAIUserMetadataToJSON = exports.Auth0OpenAIUserMetadataFromJSONTyped = exports.Auth0OpenAIUserMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function Auth0OpenAIUserMetadataFromJSON(json) {
        return Auth0OpenAIUserMetadataFromJSONTyped(json, false);
      }
      exports.Auth0OpenAIUserMetadataFromJSON = Auth0OpenAIUserMetadataFromJSON;
      function Auth0OpenAIUserMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "apiKey": !(0, runtime_1.exists)(json, "api_key") ? void 0 : json["api_key"],
          "apiKeyName": !(0, runtime_1.exists)(json, "api_key_name") ? void 0 : json["api_key_name"],
          "organizationKey": !(0, runtime_1.exists)(json, "organization_key") ? void 0 : json["organization_key"]
        };
      }
      exports.Auth0OpenAIUserMetadataFromJSONTyped = Auth0OpenAIUserMetadataFromJSONTyped;
      function Auth0OpenAIUserMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "api_key": value.apiKey,
          "api_key_name": value.apiKeyName,
          "organization_key": value.organizationKey
        };
      }
      exports.Auth0OpenAIUserMetadataToJSON = Auth0OpenAIUserMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0Redirects.js
  var require_Auth0Redirects = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0Redirects.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0RedirectsToJSON = exports.Auth0RedirectsFromJSONTyped = exports.Auth0RedirectsFromJSON = void 0;
      var runtime_1 = require_runtime();
      function Auth0RedirectsFromJSON(json) {
        return Auth0RedirectsFromJSONTyped(json, false);
      }
      exports.Auth0RedirectsFromJSON = Auth0RedirectsFromJSON;
      function Auth0RedirectsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "authenticated": !(0, runtime_1.exists)(json, "authenticated") ? void 0 : json["authenticated"],
          "unauthenticated": !(0, runtime_1.exists)(json, "unauthenticated") ? void 0 : json["unauthenticated"]
        };
      }
      exports.Auth0RedirectsFromJSONTyped = Auth0RedirectsFromJSONTyped;
      function Auth0RedirectsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "authenticated": value.authenticated,
          "unauthenticated": value.unauthenticated
        };
      }
      exports.Auth0RedirectsToJSON = Auth0RedirectsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0User.js
  var require_Auth0User = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0User.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0UserToJSON = exports.Auth0UserFromJSONTyped = exports.Auth0UserFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function Auth0UserFromJSON(json) {
        return Auth0UserFromJSONTyped(json, false);
      }
      exports.Auth0UserFromJSON = Auth0UserFromJSON;
      function Auth0UserFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "picture": !(0, runtime_1.exists)(json, "picture") ? void 0 : json["picture"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "createdAt": !(0, runtime_1.exists)(json, "created_at") ? void 0 : new Date(json["created_at"]),
          "emailVerified": !(0, runtime_1.exists)(json, "email_verified") ? void 0 : json["email_verified"],
          "familyName": !(0, runtime_1.exists)(json, "family_name") ? void 0 : json["family_name"],
          "givenName": !(0, runtime_1.exists)(json, "given_name") ? void 0 : json["given_name"],
          "identities": !(0, runtime_1.exists)(json, "identities") ? void 0 : json["identities"].map(_1.Auth0IdentityFromJSON),
          "nickname": !(0, runtime_1.exists)(json, "nickname") ? void 0 : json["nickname"],
          "updatedAt": !(0, runtime_1.exists)(json, "updated_at") ? void 0 : new Date(json["updated_at"]),
          "username": !(0, runtime_1.exists)(json, "username") ? void 0 : json["username"],
          "userMetadata": !(0, runtime_1.exists)(json, "user_metadata") ? void 0 : (0, _1.Auth0UserMetadataFromJSON)(json["user_metadata"]),
          "locale": !(0, runtime_1.exists)(json, "locale") ? void 0 : json["locale"],
          "userId": !(0, runtime_1.exists)(json, "user_id") ? void 0 : json["user_id"],
          "lastIp": !(0, runtime_1.exists)(json, "last_ip") ? void 0 : json["last_ip"],
          "lastLogin": !(0, runtime_1.exists)(json, "last_login") ? void 0 : new Date(json["last_login"]),
          "loginsCount": !(0, runtime_1.exists)(json, "logins_count") ? void 0 : json["logins_count"],
          "blockedFor": !(0, runtime_1.exists)(json, "blocked_for") ? void 0 : json["blocked_for"],
          "guardianAuthenticators": !(0, runtime_1.exists)(json, "guardian_authenticators") ? void 0 : json["guardian_authenticators"]
        };
      }
      exports.Auth0UserFromJSONTyped = Auth0UserFromJSONTyped;
      function Auth0UserToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "name": value.name,
          "picture": value.picture,
          "email": value.email,
          "created_at": value.createdAt === void 0 ? void 0 : value.createdAt.toISOString(),
          "email_verified": value.emailVerified,
          "family_name": value.familyName,
          "given_name": value.givenName,
          "identities": value.identities === void 0 ? void 0 : value.identities.map(_1.Auth0IdentityToJSON),
          "nickname": value.nickname,
          "updated_at": value.updatedAt === void 0 ? void 0 : value.updatedAt.toISOString(),
          "username": value.username,
          "user_metadata": (0, _1.Auth0UserMetadataToJSON)(value.userMetadata),
          "locale": value.locale,
          "user_id": value.userId,
          "last_ip": value.lastIp,
          "last_login": value.lastLogin === void 0 ? void 0 : value.lastLogin.toISOString(),
          "logins_count": value.loginsCount,
          "blocked_for": value.blockedFor,
          "guardian_authenticators": value.guardianAuthenticators
        };
      }
      exports.Auth0UserToJSON = Auth0UserToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0UserAllocationMetadata.js
  var require_Auth0UserAllocationMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0UserAllocationMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0UserAllocationMetadataToJSON = exports.Auth0UserAllocationMetadataFromJSONTyped = exports.Auth0UserAllocationMetadataFromJSON = void 0;
      function Auth0UserAllocationMetadataFromJSON(json) {
        return Auth0UserAllocationMetadataFromJSONTyped(json, false);
      }
      exports.Auth0UserAllocationMetadataFromJSON = Auth0UserAllocationMetadataFromJSON;
      function Auth0UserAllocationMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "project": json["project"],
          "region": json["region"]
        };
      }
      exports.Auth0UserAllocationMetadataFromJSONTyped = Auth0UserAllocationMetadataFromJSONTyped;
      function Auth0UserAllocationMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "project": value.project,
          "region": value.region
        };
      }
      exports.Auth0UserAllocationMetadataToJSON = Auth0UserAllocationMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Auth0UserMetadata.js
  var require_Auth0UserMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Auth0UserMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Auth0UserMetadataToJSON = exports.Auth0UserMetadataFromJSONTyped = exports.Auth0UserMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function Auth0UserMetadataFromJSON(json) {
        return Auth0UserMetadataFromJSONTyped(json, false);
      }
      exports.Auth0UserMetadataFromJSON = Auth0UserMetadataFromJSON;
      function Auth0UserMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "globalId": json["global_id"],
          "cloudKey": !(0, runtime_1.exists)(json, "cloud_key") ? void 0 : json["cloud_key"],
          "stripeCustomerId": !(0, runtime_1.exists)(json, "stripe_customer_id") ? void 0 : json["stripe_customer_id"],
          "vanityname": !(0, runtime_1.exists)(json, "vanityname") ? void 0 : json["vanityname"],
          "allocation": !(0, runtime_1.exists)(json, "allocation") ? void 0 : (0, _1.Auth0UserAllocationMetadataFromJSON)(json["allocation"]),
          "openAI": !(0, runtime_1.exists)(json, "open_AI") ? void 0 : (0, _1.Auth0OpenAIUserMetadataFromJSON)(json["open_AI"])
        };
      }
      exports.Auth0UserMetadataFromJSONTyped = Auth0UserMetadataFromJSONTyped;
      function Auth0UserMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "global_id": value.globalId,
          "cloud_key": value.cloudKey,
          "stripe_customer_id": value.stripeCustomerId,
          "vanityname": value.vanityname,
          "allocation": (0, _1.Auth0UserAllocationMetadataToJSON)(value.allocation),
          "open_AI": (0, _1.Auth0OpenAIUserMetadataToJSON)(value.openAI)
        };
      }
      exports.Auth0UserMetadataToJSON = Auth0UserMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/AvailableFormats.js
  var require_AvailableFormats = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/AvailableFormats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AvailableFormatsToJSON = exports.AvailableFormatsFromJSONTyped = exports.AvailableFormatsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function AvailableFormatsFromJSON(json) {
        return AvailableFormatsFromJSONTyped(json, false);
      }
      exports.AvailableFormatsFromJSON = AvailableFormatsFromJSON;
      function AvailableFormatsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ClassificationFromJSON)
        };
      }
      exports.AvailableFormatsFromJSONTyped = AvailableFormatsFromJSONTyped;
      function AvailableFormatsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ClassificationToJSON)
        };
      }
      exports.AvailableFormatsToJSON = AvailableFormatsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ByteDescriptor.js
  var require_ByteDescriptor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ByteDescriptor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ByteDescriptorToJSON = exports.ByteDescriptorFromJSONTyped = exports.ByteDescriptorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ByteDescriptorFromJSON(json) {
        return ByteDescriptorFromJSONTyped(json, false);
      }
      exports.ByteDescriptorFromJSON = ByteDescriptorFromJSON;
      function ByteDescriptorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "value": json["value"],
          "readable": json["readable"]
        };
      }
      exports.ByteDescriptorFromJSONTyped = ByteDescriptorFromJSONTyped;
      function ByteDescriptorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "value": value.value,
          "readable": value.readable
        };
      }
      exports.ByteDescriptorToJSON = ByteDescriptorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/CapabilitiesEnum.js
  var require_CapabilitiesEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/CapabilitiesEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CapabilitiesEnumToJSON = exports.CapabilitiesEnumFromJSONTyped = exports.CapabilitiesEnumFromJSON = exports.CapabilitiesEnum = void 0;
      var CapabilitiesEnum;
      (function(CapabilitiesEnum2) {
        CapabilitiesEnum2["Local"] = "LOCAL";
        CapabilitiesEnum2["Cloud"] = "CLOUD";
        CapabilitiesEnum2["Blended"] = "BLENDED";
      })(CapabilitiesEnum || (exports.CapabilitiesEnum = CapabilitiesEnum = {}));
      function CapabilitiesEnumFromJSON(json) {
        return CapabilitiesEnumFromJSONTyped(json, false);
      }
      exports.CapabilitiesEnumFromJSON = CapabilitiesEnumFromJSON;
      function CapabilitiesEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.CapabilitiesEnumFromJSONTyped = CapabilitiesEnumFromJSONTyped;
      function CapabilitiesEnumToJSON(value) {
        return value;
      }
      exports.CapabilitiesEnumToJSON = CapabilitiesEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ChallengedPKCE.js
  var require_ChallengedPKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ChallengedPKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChallengedPKCEToJSON = exports.ChallengedPKCEFromJSONTyped = exports.ChallengedPKCEFromJSON = exports.ChallengedPKCEMethodEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var ChallengedPKCEMethodEnum;
      (function(ChallengedPKCEMethodEnum2) {
        ChallengedPKCEMethodEnum2["S256"] = "S256";
      })(ChallengedPKCEMethodEnum || (exports.ChallengedPKCEMethodEnum = ChallengedPKCEMethodEnum = {}));
      function ChallengedPKCEFromJSON(json) {
        return ChallengedPKCEFromJSONTyped(json, false);
      }
      exports.ChallengedPKCEFromJSON = ChallengedPKCEFromJSON;
      function ChallengedPKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "state": json["state"],
          "nonce": json["nonce"],
          "challenge": json["challenge"],
          "method": json["method"],
          "verifier": json["verifier"]
        };
      }
      exports.ChallengedPKCEFromJSONTyped = ChallengedPKCEFromJSONTyped;
      function ChallengedPKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "state": value.state,
          "nonce": value.nonce,
          "challenge": value.challenge,
          "method": value.method,
          "verifier": value.verifier
        };
      }
      exports.ChallengedPKCEToJSON = ChallengedPKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/CheckedOSUpdate.js
  var require_CheckedOSUpdate = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/CheckedOSUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CheckedOSUpdateToJSON = exports.CheckedOSUpdateFromJSONTyped = exports.CheckedOSUpdateFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function CheckedOSUpdateFromJSON(json) {
        return CheckedOSUpdateFromJSONTyped(json, false);
      }
      exports.CheckedOSUpdateFromJSON = CheckedOSUpdateFromJSON;
      function CheckedOSUpdateFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "status": (0, _1.UpdatingStatusEnumFromJSON)(json["status"])
        };
      }
      exports.CheckedOSUpdateFromJSONTyped = CheckedOSUpdateFromJSONTyped;
      function CheckedOSUpdateToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "status": (0, _1.UpdatingStatusEnumToJSON)(value.status)
        };
      }
      exports.CheckedOSUpdateToJSON = CheckedOSUpdateToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Classification.js
  var require_Classification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Classification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClassificationToJSON = exports.ClassificationFromJSONTyped = exports.ClassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ClassificationFromJSON(json) {
        return ClassificationFromJSONTyped(json, false);
      }
      exports.ClassificationFromJSON = ClassificationFromJSON;
      function ClassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "generic": (0, _1.ClassificationGenericEnumFromJSON)(json["generic"]),
          "specific": (0, _1.ClassificationSpecificEnumFromJSON)(json["specific"]),
          "rendering": !(0, runtime_1.exists)(json, "rendering") ? void 0 : (0, _1.ClassificationRenderingEnumFromJSON)(json["rendering"])
        };
      }
      exports.ClassificationFromJSONTyped = ClassificationFromJSONTyped;
      function ClassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "generic": (0, _1.ClassificationGenericEnumToJSON)(value.generic),
          "specific": (0, _1.ClassificationSpecificEnumToJSON)(value.specific),
          "rendering": (0, _1.ClassificationRenderingEnumToJSON)(value.rendering)
        };
      }
      exports.ClassificationToJSON = ClassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationGenericEnum.js
  var require_ClassificationGenericEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationGenericEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClassificationGenericEnumToJSON = exports.ClassificationGenericEnumFromJSONTyped = exports.ClassificationGenericEnumFromJSON = exports.ClassificationGenericEnum = void 0;
      var ClassificationGenericEnum;
      (function(ClassificationGenericEnum2) {
        ClassificationGenericEnum2["Code"] = "CODE";
        ClassificationGenericEnum2["Text"] = "TEXT";
        ClassificationGenericEnum2["Image"] = "IMAGE";
        ClassificationGenericEnum2["Video"] = "VIDEO";
        ClassificationGenericEnum2["ExternalResourceReference"] = "EXTERNAL_RESOURCE_REFERENCE";
        ClassificationGenericEnum2["Unknown"] = "UNKNOWN";
        ClassificationGenericEnum2["File"] = "FILE";
      })(ClassificationGenericEnum || (exports.ClassificationGenericEnum = ClassificationGenericEnum = {}));
      function ClassificationGenericEnumFromJSON(json) {
        return ClassificationGenericEnumFromJSONTyped(json, false);
      }
      exports.ClassificationGenericEnumFromJSON = ClassificationGenericEnumFromJSON;
      function ClassificationGenericEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ClassificationGenericEnumFromJSONTyped = ClassificationGenericEnumFromJSONTyped;
      function ClassificationGenericEnumToJSON(value) {
        return value;
      }
      exports.ClassificationGenericEnumToJSON = ClassificationGenericEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationRenderingEnum.js
  var require_ClassificationRenderingEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationRenderingEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClassificationRenderingEnumToJSON = exports.ClassificationRenderingEnumFromJSONTyped = exports.ClassificationRenderingEnumFromJSON = exports.ClassificationRenderingEnum = void 0;
      var ClassificationRenderingEnum;
      (function(ClassificationRenderingEnum2) {
        ClassificationRenderingEnum2["Html"] = "HTML";
        ClassificationRenderingEnum2["TwentyFourBitAnsiEscapedSequences"] = "TWENTY_FOUR_BIT_ANSI_ESCAPED_SEQUENCES";
        ClassificationRenderingEnum2["HighlightJsHtml"] = "HIGHLIGHT_JS_HTML";
      })(ClassificationRenderingEnum || (exports.ClassificationRenderingEnum = ClassificationRenderingEnum = {}));
      function ClassificationRenderingEnumFromJSON(json) {
        return ClassificationRenderingEnumFromJSONTyped(json, false);
      }
      exports.ClassificationRenderingEnumFromJSON = ClassificationRenderingEnumFromJSON;
      function ClassificationRenderingEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ClassificationRenderingEnumFromJSONTyped = ClassificationRenderingEnumFromJSONTyped;
      function ClassificationRenderingEnumToJSON(value) {
        return value;
      }
      exports.ClassificationRenderingEnumToJSON = ClassificationRenderingEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationSpecificEnum.js
  var require_ClassificationSpecificEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ClassificationSpecificEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClassificationSpecificEnumToJSON = exports.ClassificationSpecificEnumFromJSONTyped = exports.ClassificationSpecificEnumFromJSON = exports.ClassificationSpecificEnum = void 0;
      var ClassificationSpecificEnum;
      (function(ClassificationSpecificEnum2) {
        ClassificationSpecificEnum2["Csx"] = "csx";
        ClassificationSpecificEnum2["Cs"] = "cs";
        ClassificationSpecificEnum2["Html"] = "html";
        ClassificationSpecificEnum2["Htm"] = "htm";
        ClassificationSpecificEnum2["Shtml"] = "shtml";
        ClassificationSpecificEnum2["Xhtml"] = "xhtml";
        ClassificationSpecificEnum2["Hs"] = "hs";
        ClassificationSpecificEnum2["HsBoot"] = "hs-boot";
        ClassificationSpecificEnum2["Hsig"] = "hsig";
        ClassificationSpecificEnum2["Cpp"] = "cpp";
        ClassificationSpecificEnum2["Cc"] = "cc";
        ClassificationSpecificEnum2["Cp"] = "cp";
        ClassificationSpecificEnum2["Cxx"] = "cxx";
        ClassificationSpecificEnum2["C"] = "c";
        ClassificationSpecificEnum2["H"] = "h";
        ClassificationSpecificEnum2["Hh"] = "hh";
        ClassificationSpecificEnum2["Hpp"] = "hpp";
        ClassificationSpecificEnum2["Hxx"] = "hxx";
        ClassificationSpecificEnum2["Inl"] = "inl";
        ClassificationSpecificEnum2["Ipp"] = "ipp";
        ClassificationSpecificEnum2["Ixx"] = "ixx";
        ClassificationSpecificEnum2["Cppm"] = "cppm";
        ClassificationSpecificEnum2["Csv"] = "csv";
        ClassificationSpecificEnum2["Doc"] = "doc";
        ClassificationSpecificEnum2["Docm"] = "docm";
        ClassificationSpecificEnum2["Docx"] = "docx";
        ClassificationSpecificEnum2["Exe"] = "exe";
        ClassificationSpecificEnum2["Gif"] = "gif";
        ClassificationSpecificEnum2["Ico"] = "ico";
        ClassificationSpecificEnum2["Jpe"] = "jpe";
        ClassificationSpecificEnum2["Jpeg"] = "jpeg";
        ClassificationSpecificEnum2["Jpg"] = "jpg";
        ClassificationSpecificEnum2["Jpgm"] = "jpgm";
        ClassificationSpecificEnum2["Jpgv"] = "jpgv";
        ClassificationSpecificEnum2["Log"] = "log";
        ClassificationSpecificEnum2["Mp2"] = "mp2";
        ClassificationSpecificEnum2["Mp2a"] = "mp2a";
        ClassificationSpecificEnum2["Mp3"] = "mp3";
        ClassificationSpecificEnum2["Mp4"] = "mp4";
        ClassificationSpecificEnum2["Mp4a"] = "mp4a";
        ClassificationSpecificEnum2["Oga"] = "oga";
        ClassificationSpecificEnum2["Ogg"] = "ogg";
        ClassificationSpecificEnum2["Ogv"] = "ogv";
        ClassificationSpecificEnum2["Ogx"] = "ogx";
        ClassificationSpecificEnum2["Ppt"] = "ppt";
        ClassificationSpecificEnum2["Pptx"] = "pptx";
        ClassificationSpecificEnum2["Pptm"] = "pptm";
        ClassificationSpecificEnum2["Qt"] = "qt";
        ClassificationSpecificEnum2["Text"] = "text";
        ClassificationSpecificEnum2["Tif"] = "tif";
        ClassificationSpecificEnum2["Tiff"] = "tiff";
        ClassificationSpecificEnum2["Txt"] = "txt";
        ClassificationSpecificEnum2["Wav"] = "wav";
        ClassificationSpecificEnum2["Weba"] = "weba";
        ClassificationSpecificEnum2["Webm"] = "webm";
        ClassificationSpecificEnum2["Webp"] = "webp";
        ClassificationSpecificEnum2["Xla"] = "xla";
        ClassificationSpecificEnum2["Xlam"] = "xlam";
        ClassificationSpecificEnum2["Xlc"] = "xlc";
        ClassificationSpecificEnum2["Xlm"] = "xlm";
        ClassificationSpecificEnum2["Xls"] = "xls";
        ClassificationSpecificEnum2["Xlsb"] = "xlsb";
        ClassificationSpecificEnum2["Xlsm"] = "xlsm";
        ClassificationSpecificEnum2["Xlsx"] = "xlsx";
        ClassificationSpecificEnum2["Xlt"] = "xlt";
        ClassificationSpecificEnum2["Xltm"] = "xltm";
        ClassificationSpecificEnum2["Xltx"] = "xltx";
        ClassificationSpecificEnum2["Pdf"] = "pdf";
        ClassificationSpecificEnum2["Png"] = "png";
        ClassificationSpecificEnum2["Rpm"] = "rpm";
        ClassificationSpecificEnum2["Zip"] = "zip";
        ClassificationSpecificEnum2["Woff"] = "woff";
        ClassificationSpecificEnum2["Woff2"] = "woff2";
        ClassificationSpecificEnum2["Svgz"] = "svgz";
        ClassificationSpecificEnum2["Bin"] = "bin";
        ClassificationSpecificEnum2["Bmp"] = "bmp";
        ClassificationSpecificEnum2["Eot"] = "eot";
        ClassificationSpecificEnum2["Gz"] = "gz";
        ClassificationSpecificEnum2["Jar"] = "jar";
        ClassificationSpecificEnum2["Mpkg"] = "mpkg";
        ClassificationSpecificEnum2["Ai"] = "ai";
        ClassificationSpecificEnum2["Eps"] = "eps";
        ClassificationSpecificEnum2["Dmg"] = "dmg";
        ClassificationSpecificEnum2["List"] = "list";
        ClassificationSpecificEnum2["Rtx"] = "rtx";
        ClassificationSpecificEnum2["Uri"] = "uri";
        ClassificationSpecificEnum2["Uris"] = "uris";
        ClassificationSpecificEnum2["Urls"] = "urls";
        ClassificationSpecificEnum2["Css"] = "css";
        ClassificationSpecificEnum2["Dart"] = "dart";
        ClassificationSpecificEnum2["Java"] = "java";
        ClassificationSpecificEnum2["Bsh"] = "bsh";
        ClassificationSpecificEnum2["Js"] = "js";
        ClassificationSpecificEnum2["Jsx"] = "jsx";
        ClassificationSpecificEnum2["Mjs"] = "mjs";
        ClassificationSpecificEnum2["Htc"] = "htc";
        ClassificationSpecificEnum2["Json"] = "json";
        ClassificationSpecificEnum2["Ipynb"] = "ipynb";
        ClassificationSpecificEnum2["Gltf"] = "gltf";
        ClassificationSpecificEnum2["Jsonml"] = "jsonml";
        ClassificationSpecificEnum2["Ps"] = "ps";
        ClassificationSpecificEnum2["Ssml"] = "ssml";
        ClassificationSpecificEnum2["Wasm"] = "wasm";
        ClassificationSpecificEnum2["Rtf"] = "rtf";
        ClassificationSpecificEnum2["Cco"] = "cco";
        ClassificationSpecificEnum2["Pl"] = "pl";
        ClassificationSpecificEnum2["Pc"] = "pc";
        ClassificationSpecificEnum2["Pm"] = "pm";
        ClassificationSpecificEnum2["Pmc"] = "pmc";
        ClassificationSpecificEnum2["Pod"] = "pod";
        ClassificationSpecificEnum2["T"] = "t";
        ClassificationSpecificEnum2["Xml"] = "xml";
        ClassificationSpecificEnum2["Tld"] = "tld";
        ClassificationSpecificEnum2["Dtml"] = "dtml";
        ClassificationSpecificEnum2["Rng"] = "rng";
        ClassificationSpecificEnum2["Rss"] = "rss";
        ClassificationSpecificEnum2["Opml"] = "opml";
        ClassificationSpecificEnum2["Svg"] = "svg";
        ClassificationSpecificEnum2["Xaml"] = "xaml";
        ClassificationSpecificEnum2["SublimeSnippet"] = "sublime-snippet";
        ClassificationSpecificEnum2["TmLanguage"] = "tmLanguage";
        ClassificationSpecificEnum2["TmPreferences"] = "tmPreferences";
        ClassificationSpecificEnum2["TmSnippet"] = "tmSnippet";
        ClassificationSpecificEnum2["TmTheme"] = "tmTheme";
        ClassificationSpecificEnum2["Csproj"] = "csproj";
        ClassificationSpecificEnum2["Fsproj"] = "fsproj";
        ClassificationSpecificEnum2["Sqlproj"] = "sqlproj";
        ClassificationSpecificEnum2["Vbproj"] = "vbproj";
        ClassificationSpecificEnum2["Vcproj"] = "vcproj";
        ClassificationSpecificEnum2["Vcxproj"] = "vcxproj";
        ClassificationSpecificEnum2["Dae"] = "dae";
        ClassificationSpecificEnum2["Props"] = "props";
        ClassificationSpecificEnum2["Targets"] = "targets";
        ClassificationSpecificEnum2["Xsd"] = "xsd";
        ClassificationSpecificEnum2["Xsl"] = "xsl";
        ClassificationSpecificEnum2["Xslt"] = "xslt";
        ClassificationSpecificEnum2["Ecma"] = "ecma";
        ClassificationSpecificEnum2["Node"] = "node";
        ClassificationSpecificEnum2["Php"] = "php";
        ClassificationSpecificEnum2["Php3"] = "php3";
        ClassificationSpecificEnum2["Php4"] = "php4";
        ClassificationSpecificEnum2["Php5"] = "php5";
        ClassificationSpecificEnum2["Php7"] = "php7";
        ClassificationSpecificEnum2["Php8"] = "php8";
        ClassificationSpecificEnum2["Phps"] = "phps";
        ClassificationSpecificEnum2["Phpt"] = "phpt";
        ClassificationSpecificEnum2["Phtml"] = "phtml";
        ClassificationSpecificEnum2["Py"] = "py";
        ClassificationSpecificEnum2["Py3"] = "py3";
        ClassificationSpecificEnum2["Pyw"] = "pyw";
        ClassificationSpecificEnum2["Pyi"] = "pyi";
        ClassificationSpecificEnum2["Pyx"] = "pyx";
        ClassificationSpecificEnum2["PyxIn"] = "pyx.in";
        ClassificationSpecificEnum2["Pxd"] = "pxd";
        ClassificationSpecificEnum2["PxdIn"] = "pxd.in";
        ClassificationSpecificEnum2["Pxi"] = "pxi";
        ClassificationSpecificEnum2["PxiIn"] = "pxi.in";
        ClassificationSpecificEnum2["Rpy"] = "rpy";
        ClassificationSpecificEnum2["Cpy"] = "cpy";
        ClassificationSpecificEnum2["Gyp"] = "gyp";
        ClassificationSpecificEnum2["Gypi"] = "gypi";
        ClassificationSpecificEnum2["Vpy"] = "vpy";
        ClassificationSpecificEnum2["Smk"] = "smk";
        ClassificationSpecificEnum2["Wscript"] = "wscript";
        ClassificationSpecificEnum2["Bazel"] = "bazel";
        ClassificationSpecificEnum2["Bzl"] = "bzl";
        ClassificationSpecificEnum2["Pyc"] = "pyc";
        ClassificationSpecificEnum2["Class"] = "class";
        ClassificationSpecificEnum2["P"] = "p";
        ClassificationSpecificEnum2["Pas"] = "pas";
        ClassificationSpecificEnum2["Curl"] = "curl";
        ClassificationSpecificEnum2["Mcurl"] = "mcurl";
        ClassificationSpecificEnum2["Go"] = "go";
        ClassificationSpecificEnum2["Swift"] = "swift";
        ClassificationSpecificEnum2["Rs"] = "rs";
        ClassificationSpecificEnum2["Ts"] = "ts";
        ClassificationSpecificEnum2["Tsx"] = "tsx";
        ClassificationSpecificEnum2["Rb"] = "rb";
        ClassificationSpecificEnum2["Rbi"] = "rbi";
        ClassificationSpecificEnum2["Rbx"] = "rbx";
        ClassificationSpecificEnum2["Rjs"] = "rjs";
        ClassificationSpecificEnum2["Rabl"] = "rabl";
        ClassificationSpecificEnum2["Rake"] = "rake";
        ClassificationSpecificEnum2["Capfile"] = "capfile";
        ClassificationSpecificEnum2["Jbuilder"] = "jbuilder";
        ClassificationSpecificEnum2["Gemspec"] = "gemspec";
        ClassificationSpecificEnum2["Podspec"] = "podspec";
        ClassificationSpecificEnum2["Irbrc"] = "irbrc";
        ClassificationSpecificEnum2["Pryrc"] = "pryrc";
        ClassificationSpecificEnum2["Prawn"] = "prawn";
        ClassificationSpecificEnum2["Thor"] = "thor";
        ClassificationSpecificEnum2["Appfile"] = "Appfile";
        ClassificationSpecificEnum2["Appraisals"] = "Appraisals";
        ClassificationSpecificEnum2["Berksfile"] = "Berksfile";
        ClassificationSpecificEnum2["Brewfile"] = "Brewfile";
        ClassificationSpecificEnum2["Cheffile"] = "Cheffile";
        ClassificationSpecificEnum2["Deliverfile"] = "Deliverfile";
        ClassificationSpecificEnum2["Fastfile"] = "Fastfile";
        ClassificationSpecificEnum2["Gemfile"] = "Gemfile";
        ClassificationSpecificEnum2["Guardfile"] = "Guardfile";
        ClassificationSpecificEnum2["Podfile"] = "Podfile";
        ClassificationSpecificEnum2["Rakefile"] = "Rakefile";
        ClassificationSpecificEnum2["Rantfile"] = "Rantfile";
        ClassificationSpecificEnum2["Scanfile"] = "Scanfile";
        ClassificationSpecificEnum2["Simplecov"] = "simplecov";
        ClassificationSpecificEnum2["Snapfile"] = "Snapfile";
        ClassificationSpecificEnum2["Thorfile"] = "Thorfile";
        ClassificationSpecificEnum2["Vagrantfile"] = "Vagrantfile";
        ClassificationSpecificEnum2["Scala"] = "scala";
        ClassificationSpecificEnum2["Sbt"] = "sbt";
        ClassificationSpecificEnum2["Sc"] = "sc";
        ClassificationSpecificEnum2["Cmd"] = "cmd";
        ClassificationSpecificEnum2["Bat"] = "bat";
        ClassificationSpecificEnum2["Coffee"] = "coffee";
        ClassificationSpecificEnum2["Erl"] = "erl";
        ClassificationSpecificEnum2["Hrl"] = "hrl";
        ClassificationSpecificEnum2["Escript"] = "escript";
        ClassificationSpecificEnum2["Lua"] = "lua";
        ClassificationSpecificEnum2["Md"] = "md";
        ClassificationSpecificEnum2["Mdown"] = "mdown";
        ClassificationSpecificEnum2["Mdwn"] = "mdwn";
        ClassificationSpecificEnum2["Markdown"] = "markdown";
        ClassificationSpecificEnum2["Markdn"] = "markdn";
        ClassificationSpecificEnum2["Matlab"] = "matlab";
        ClassificationSpecificEnum2["M"] = "m";
        ClassificationSpecificEnum2["Ps1"] = "ps1";
        ClassificationSpecificEnum2["Sh"] = "sh";
        ClassificationSpecificEnum2["Bash"] = "bash";
        ClassificationSpecificEnum2["Bashrc"] = "bashrc";
        ClassificationSpecificEnum2["Ash"] = "ash";
        ClassificationSpecificEnum2["Zsh"] = "zsh";
        ClassificationSpecificEnum2["BashAliases"] = ".bash_aliases";
        ClassificationSpecificEnum2["BashCompletions"] = ".bash_completions";
        ClassificationSpecificEnum2["BashFunctions"] = ".bash_functions";
        ClassificationSpecificEnum2["BashLogin"] = ".bash_login";
        ClassificationSpecificEnum2["BashLogout"] = ".bash_logout";
        ClassificationSpecificEnum2["BashProfile"] = ".bash_profile";
        ClassificationSpecificEnum2["BashVariables"] = ".bash_variables";
        ClassificationSpecificEnum2["Profile"] = ".profile";
        ClassificationSpecificEnum2["TextmateInit"] = ".textmate_init";
        ClassificationSpecificEnum2["Zlogin"] = ".zlogin";
        ClassificationSpecificEnum2["Zlogout"] = ".zlogout";
        ClassificationSpecificEnum2["Zprofile"] = ".zprofile";
        ClassificationSpecificEnum2["Zshenv"] = ".zshenv";
        ClassificationSpecificEnum2["Zshrc"] = ".zshrc";
        ClassificationSpecificEnum2["Pkgbuild"] = "PKGBUILD";
        ClassificationSpecificEnum2["Ebuild"] = "ebuild";
        ClassificationSpecificEnum2["Eclass"] = "eclass";
        ClassificationSpecificEnum2["R"] = "r";
        ClassificationSpecificEnum2["Sql"] = "sql";
        ClassificationSpecificEnum2["Ddl"] = "ddl";
        ClassificationSpecificEnum2["Dml"] = "dml";
        ClassificationSpecificEnum2["Tex"] = "tex";
        ClassificationSpecificEnum2["Ltx"] = "ltx";
        ClassificationSpecificEnum2["Sty"] = "sty";
        ClassificationSpecificEnum2["Cls"] = "cls";
        ClassificationSpecificEnum2["Unknown"] = "UNKNOWN";
        ClassificationSpecificEnum2["Yaml"] = "yaml";
        ClassificationSpecificEnum2["Yml"] = "yml";
        ClassificationSpecificEnum2["Toml"] = "toml";
        ClassificationSpecificEnum2["Tml"] = "tml";
        ClassificationSpecificEnum2["CargoLock"] = "Cargo.lock";
        ClassificationSpecificEnum2["GopkgLock"] = "Gopkg.lock";
        ClassificationSpecificEnum2["Pipfile"] = "Pipfile";
        ClassificationSpecificEnum2["PoetryLock"] = "poetry.lock";
        ClassificationSpecificEnum2["UniformResourceLocator"] = "uniform_resource_locator";
        ClassificationSpecificEnum2["CustomUrlScheme"] = "custom_url_scheme";
        ClassificationSpecificEnum2["UnixFilePath"] = "unix_file_path";
        ClassificationSpecificEnum2["WindowsFilePath"] = "windows_file_path";
        ClassificationSpecificEnum2["UniformResourceIdentifier"] = "uniform_resource_identifier";
        ClassificationSpecificEnum2["Hljs1c"] = "hljs-1c";
        ClassificationSpecificEnum2["HljsAbnf"] = "hljs-abnf";
        ClassificationSpecificEnum2["HljsAccesslog"] = "hljs-accesslog";
        ClassificationSpecificEnum2["HljsActionscript"] = "hljs-actionscript";
        ClassificationSpecificEnum2["HljsAda"] = "hljs-ada";
        ClassificationSpecificEnum2["HljsAngelscript"] = "hljs-angelscript";
        ClassificationSpecificEnum2["HljsApache"] = "hljs-apache";
        ClassificationSpecificEnum2["HljsApplescript"] = "hljs-applescript";
        ClassificationSpecificEnum2["HljsArcade"] = "hljs-arcade";
        ClassificationSpecificEnum2["HljsArduino"] = "hljs-arduino";
        ClassificationSpecificEnum2["HljsArmasm"] = "hljs-armasm";
        ClassificationSpecificEnum2["HljsAsciidoc"] = "hljs-asciidoc";
        ClassificationSpecificEnum2["HljsAspectj"] = "hljs-aspectj";
        ClassificationSpecificEnum2["HljsAutohotkey"] = "hljs-autohotkey";
        ClassificationSpecificEnum2["HljsAutoit"] = "hljs-autoit";
        ClassificationSpecificEnum2["HljsAvrasm"] = "hljs-avrasm";
        ClassificationSpecificEnum2["HljsAwk"] = "hljs-awk";
        ClassificationSpecificEnum2["HljsAxapta"] = "hljs-axapta";
        ClassificationSpecificEnum2["HljsBash"] = "hljs-bash";
        ClassificationSpecificEnum2["HljsBasic"] = "hljs-basic";
        ClassificationSpecificEnum2["HljsBnf"] = "hljs-bnf";
        ClassificationSpecificEnum2["HljsBrainfuck"] = "hljs-brainfuck";
        ClassificationSpecificEnum2["HljsCal"] = "hljs-cal";
        ClassificationSpecificEnum2["HljsCapnproto"] = "hljs-capnproto";
        ClassificationSpecificEnum2["HljsCeylon"] = "hljs-ceylon";
        ClassificationSpecificEnum2["HljsClean"] = "hljs-clean";
        ClassificationSpecificEnum2["HljsClojureRepl"] = "hljs-clojure-repl";
        ClassificationSpecificEnum2["HljsClojure"] = "hljs-clojure";
        ClassificationSpecificEnum2["HljsCmake"] = "hljs-cmake";
        ClassificationSpecificEnum2["HljsCoffeescript"] = "hljs-coffeescript";
        ClassificationSpecificEnum2["HljsCoq"] = "hljs-coq";
        ClassificationSpecificEnum2["HljsCos"] = "hljs-cos";
        ClassificationSpecificEnum2["HljsCpp"] = "hljs-cpp";
        ClassificationSpecificEnum2["HljsCrmsh"] = "hljs-crmsh";
        ClassificationSpecificEnum2["HljsCrystal"] = "hljs-crystal";
        ClassificationSpecificEnum2["HljsC"] = "hljs-c";
        ClassificationSpecificEnum2["HljsCs"] = "hljs-cs";
        ClassificationSpecificEnum2["HljsCsp"] = "hljs-csp";
        ClassificationSpecificEnum2["HljsCss"] = "hljs-css";
        ClassificationSpecificEnum2["HljsD"] = "hljs-d";
        ClassificationSpecificEnum2["HljsDart"] = "hljs-dart";
        ClassificationSpecificEnum2["HljsDelphi"] = "hljs-delphi";
        ClassificationSpecificEnum2["HljsDiff"] = "hljs-diff";
        ClassificationSpecificEnum2["HljsDjango"] = "hljs-django";
        ClassificationSpecificEnum2["HljsDns"] = "hljs-dns";
        ClassificationSpecificEnum2["HljsDockerfile"] = "hljs-dockerfile";
        ClassificationSpecificEnum2["HljsDos"] = "hljs-dos";
        ClassificationSpecificEnum2["HljsDsconfig"] = "hljs-dsconfig";
        ClassificationSpecificEnum2["HljsDts"] = "hljs-dts";
        ClassificationSpecificEnum2["HljsDust"] = "hljs-dust";
        ClassificationSpecificEnum2["HljsEbnf"] = "hljs-ebnf";
        ClassificationSpecificEnum2["HljsElixir"] = "hljs-elixir";
        ClassificationSpecificEnum2["HljsElm"] = "hljs-elm";
        ClassificationSpecificEnum2["HljsErb"] = "hljs-erb";
        ClassificationSpecificEnum2["HljsErlangRepl"] = "hljs-erlang-repl";
        ClassificationSpecificEnum2["HljsErlang"] = "hljs-erlang";
        ClassificationSpecificEnum2["HljsExcel"] = "hljs-excel";
        ClassificationSpecificEnum2["HljsFix"] = "hljs-fix";
        ClassificationSpecificEnum2["HljsFlix"] = "hljs-flix";
        ClassificationSpecificEnum2["HljsFortran"] = "hljs-fortran";
        ClassificationSpecificEnum2["HljsFsharp"] = "hljs-fsharp";
        ClassificationSpecificEnum2["HljsGams"] = "hljs-gams";
        ClassificationSpecificEnum2["HljsGauss"] = "hljs-gauss";
        ClassificationSpecificEnum2["HljsGcode"] = "hljs-gcode";
        ClassificationSpecificEnum2["HljsGherkin"] = "hljs-gherkin";
        ClassificationSpecificEnum2["HljsGlsl"] = "hljs-glsl";
        ClassificationSpecificEnum2["HljsGml"] = "hljs-gml";
        ClassificationSpecificEnum2["HljsGo"] = "hljs-go";
        ClassificationSpecificEnum2["HljsGolo"] = "hljs-golo";
        ClassificationSpecificEnum2["HljsGradle"] = "hljs-gradle";
        ClassificationSpecificEnum2["HljsGroovy"] = "hljs-groovy";
        ClassificationSpecificEnum2["HljsHaml"] = "hljs-haml";
        ClassificationSpecificEnum2["HljsHandlebars"] = "hljs-handlebars";
        ClassificationSpecificEnum2["HljsHaskell"] = "hljs-haskell";
        ClassificationSpecificEnum2["HljsHaxe"] = "hljs-haxe";
        ClassificationSpecificEnum2["HljsHsp"] = "hljs-hsp";
        ClassificationSpecificEnum2["HljsHtmlbars"] = "hljs-htmlbars";
        ClassificationSpecificEnum2["HljsHttp"] = "hljs-http";
        ClassificationSpecificEnum2["HljsHy"] = "hljs-hy";
        ClassificationSpecificEnum2["HljsInform7"] = "hljs-inform7";
        ClassificationSpecificEnum2["HljsIni"] = "hljs-ini";
        ClassificationSpecificEnum2["HljsIrpf90"] = "hljs-irpf90";
        ClassificationSpecificEnum2["HljsIsbl"] = "hljs-isbl";
        ClassificationSpecificEnum2["HljsJava"] = "hljs-java";
        ClassificationSpecificEnum2["HljsJavascript"] = "hljs-javascript";
        ClassificationSpecificEnum2["HljsJbossCli"] = "hljs-jboss-cli";
        ClassificationSpecificEnum2["HljsJson"] = "hljs-json";
        ClassificationSpecificEnum2["HljsJuliaRepl"] = "hljs-julia-repl";
        ClassificationSpecificEnum2["HljsJulia"] = "hljs-julia";
        ClassificationSpecificEnum2["HljsKotlin"] = "hljs-kotlin";
        ClassificationSpecificEnum2["HljsLasso"] = "hljs-lasso";
        ClassificationSpecificEnum2["HljsLdif"] = "hljs-ldif";
        ClassificationSpecificEnum2["HljsLeaf"] = "hljs-leaf";
        ClassificationSpecificEnum2["HljsLess"] = "hljs-less";
        ClassificationSpecificEnum2["HljsLisp"] = "hljs-lisp";
        ClassificationSpecificEnum2["HljsLivecodeserver"] = "hljs-livecodeserver";
        ClassificationSpecificEnum2["HljsLivescript"] = "hljs-livescript";
        ClassificationSpecificEnum2["HljsLlvm"] = "hljs-llvm";
        ClassificationSpecificEnum2["HljsLsl"] = "hljs-lsl";
        ClassificationSpecificEnum2["HljsLua"] = "hljs-lua";
        ClassificationSpecificEnum2["HljsMakefile"] = "hljs-makefile";
        ClassificationSpecificEnum2["HljsMarkdown"] = "hljs-markdown";
        ClassificationSpecificEnum2["HljsMathematica"] = "hljs-mathematica";
        ClassificationSpecificEnum2["HljsMatlab"] = "hljs-matlab";
        ClassificationSpecificEnum2["HljsMaxima"] = "hljs-maxima";
        ClassificationSpecificEnum2["HljsMel"] = "hljs-mel";
        ClassificationSpecificEnum2["HljsMercury"] = "hljs-mercury";
        ClassificationSpecificEnum2["HljsMipsasm"] = "hljs-mipsasm";
        ClassificationSpecificEnum2["HljsMizar"] = "hljs-mizar";
        ClassificationSpecificEnum2["HljsMojolicious"] = "hljs-mojolicious";
        ClassificationSpecificEnum2["HljsMonkey"] = "hljs-monkey";
        ClassificationSpecificEnum2["HljsMoonscript"] = "hljs-moonscript";
        ClassificationSpecificEnum2["HljsN1ql"] = "hljs-n1ql";
        ClassificationSpecificEnum2["HljsNginx"] = "hljs-nginx";
        ClassificationSpecificEnum2["HljsNimrod"] = "hljs-nimrod";
        ClassificationSpecificEnum2["HljsNix"] = "hljs-nix";
        ClassificationSpecificEnum2["HljsNsis"] = "hljs-nsis";
        ClassificationSpecificEnum2["HljsObjectivec"] = "hljs-objectivec";
        ClassificationSpecificEnum2["HljsOcaml"] = "hljs-ocaml";
        ClassificationSpecificEnum2["HljsOpenscad"] = "hljs-openscad";
        ClassificationSpecificEnum2["HljsOxygene"] = "hljs-oxygene";
        ClassificationSpecificEnum2["HljsParser3"] = "hljs-parser3";
        ClassificationSpecificEnum2["HljsPerl"] = "hljs-perl";
        ClassificationSpecificEnum2["HljsPf"] = "hljs-pf";
        ClassificationSpecificEnum2["HljsPgsql"] = "hljs-pgsql";
        ClassificationSpecificEnum2["HljsPhp"] = "hljs-php";
        ClassificationSpecificEnum2["HljsPlaintext"] = "hljs-plaintext";
        ClassificationSpecificEnum2["HljsPony"] = "hljs-pony";
        ClassificationSpecificEnum2["HljsPowershell"] = "hljs-powershell";
        ClassificationSpecificEnum2["HljsProcessing"] = "hljs-processing";
        ClassificationSpecificEnum2["HljsProfile"] = "hljs-profile";
        ClassificationSpecificEnum2["HljsProlog"] = "hljs-prolog";
        ClassificationSpecificEnum2["HljsProperties"] = "hljs-properties";
        ClassificationSpecificEnum2["HljsProtobuf"] = "hljs-protobuf";
        ClassificationSpecificEnum2["HljsPuppet"] = "hljs-puppet";
        ClassificationSpecificEnum2["HljsPurebasic"] = "hljs-purebasic";
        ClassificationSpecificEnum2["HljsPython"] = "hljs-python";
        ClassificationSpecificEnum2["HljsQ"] = "hljs-q";
        ClassificationSpecificEnum2["HljsQml"] = "hljs-qml";
        ClassificationSpecificEnum2["HljsR"] = "hljs-r";
        ClassificationSpecificEnum2["HljsReasonml"] = "hljs-reasonml";
        ClassificationSpecificEnum2["HljsRib"] = "hljs-rib";
        ClassificationSpecificEnum2["HljsRoboconf"] = "hljs-roboconf";
        ClassificationSpecificEnum2["HljsRouteros"] = "hljs-routeros";
        ClassificationSpecificEnum2["HljsRsl"] = "hljs-rsl";
        ClassificationSpecificEnum2["HljsRuby"] = "hljs-ruby";
        ClassificationSpecificEnum2["HljsRuleslanguage"] = "hljs-ruleslanguage";
        ClassificationSpecificEnum2["HljsRust"] = "hljs-rust";
        ClassificationSpecificEnum2["HljsSas"] = "hljs-sas";
        ClassificationSpecificEnum2["HljsScala"] = "hljs-scala";
        ClassificationSpecificEnum2["HljsScheme"] = "hljs-scheme";
        ClassificationSpecificEnum2["HljsScilab"] = "hljs-scilab";
        ClassificationSpecificEnum2["HljsScss"] = "hljs-scss";
        ClassificationSpecificEnum2["HljsShell"] = "hljs-shell";
        ClassificationSpecificEnum2["HljsSmali"] = "hljs-smali";
        ClassificationSpecificEnum2["HljsSmalltalk"] = "hljs-smalltalk";
        ClassificationSpecificEnum2["HljsSml"] = "hljs-sml";
        ClassificationSpecificEnum2["HljsSqf"] = "hljs-sqf";
        ClassificationSpecificEnum2["HljsSql"] = "hljs-sql";
        ClassificationSpecificEnum2["HljsStan"] = "hljs-stan";
        ClassificationSpecificEnum2["HljsStata"] = "hljs-stata";
        ClassificationSpecificEnum2["HljsStep21"] = "hljs-step21";
        ClassificationSpecificEnum2["HljsStylus"] = "hljs-stylus";
        ClassificationSpecificEnum2["HljsSubunit"] = "hljs-subunit";
        ClassificationSpecificEnum2["HljsSwift"] = "hljs-swift";
        ClassificationSpecificEnum2["HljsTaggerscript"] = "hljs-taggerscript";
        ClassificationSpecificEnum2["HljsTap"] = "hljs-tap";
        ClassificationSpecificEnum2["HljsTcl"] = "hljs-tcl";
        ClassificationSpecificEnum2["HljsTex"] = "hljs-tex";
        ClassificationSpecificEnum2["HljsThrift"] = "hljs-thrift";
        ClassificationSpecificEnum2["HljsTp"] = "hljs-tp";
        ClassificationSpecificEnum2["HljsTwig"] = "hljs-twig";
        ClassificationSpecificEnum2["HljsTypescript"] = "hljs-typescript";
        ClassificationSpecificEnum2["HljsVala"] = "hljs-vala";
        ClassificationSpecificEnum2["HljsVbnet"] = "hljs-vbnet";
        ClassificationSpecificEnum2["HljsVbscriptHtml"] = "hljs-vbscript-html";
        ClassificationSpecificEnum2["HljsVbscript"] = "hljs-vbscript";
        ClassificationSpecificEnum2["HljsVerilog"] = "hljs-verilog";
        ClassificationSpecificEnum2["HljsVhdl"] = "hljs-vhdl";
        ClassificationSpecificEnum2["HljsVim"] = "hljs-vim";
        ClassificationSpecificEnum2["HljsX86asm"] = "hljs-x86asm";
        ClassificationSpecificEnum2["HljsXl"] = "hljs-xl";
        ClassificationSpecificEnum2["HljsXml"] = "hljs-xml";
        ClassificationSpecificEnum2["HljsXquery"] = "hljs-xquery";
        ClassificationSpecificEnum2["HljsYaml"] = "hljs-yaml";
        ClassificationSpecificEnum2["HljsToml"] = "hljs-toml";
        ClassificationSpecificEnum2["HljsZephir"] = "hljs-zephir";
        ClassificationSpecificEnum2["HljsHtml"] = "hljs-html";
        ClassificationSpecificEnum2["Groovy"] = "groovy";
        ClassificationSpecificEnum2["Kt"] = "kt";
        ClassificationSpecificEnum2["El"] = "el";
        ClassificationSpecificEnum2["Clj"] = "clj";
        ClassificationSpecificEnum2["Ex"] = "ex";
        ClassificationSpecificEnum2["Adb"] = "adb";
        ClassificationSpecificEnum2["Ads"] = "ads";
        ClassificationSpecificEnum2["Agda"] = "agda";
        ClassificationSpecificEnum2["Elm"] = "elm";
        ClassificationSpecificEnum2["Exs"] = "exs";
        ClassificationSpecificEnum2["Glsl"] = "glsl";
        ClassificationSpecificEnum2["Ml"] = "ml";
        ClassificationSpecificEnum2["Lean"] = "lean";
        ClassificationSpecificEnum2["Lisp"] = "lisp";
        ClassificationSpecificEnum2["Rkt"] = "rkt";
        ClassificationSpecificEnum2["Sparql"] = "sparql";
        ClassificationSpecificEnum2["Vhdl"] = "vhdl";
        ClassificationSpecificEnum2["Zig"] = "zig";
        ClassificationSpecificEnum2["Dockerfile"] = "dockerfile";
        ClassificationSpecificEnum2["F03"] = "f03";
        ClassificationSpecificEnum2["F08"] = "f08";
        ClassificationSpecificEnum2["F18"] = "f18";
        ClassificationSpecificEnum2["F90"] = "f90";
        ClassificationSpecificEnum2["F95"] = "f95";
        ClassificationSpecificEnum2["Jl"] = "jl";
        ClassificationSpecificEnum2["Mm"] = "mm";
        ClassificationSpecificEnum2["Scm"] = "scm";
        ClassificationSpecificEnum2["Sol"] = "sol";
        ClassificationSpecificEnum2["Sv"] = "sv";
        ClassificationSpecificEnum2["Asp"] = "asp";
        ClassificationSpecificEnum2["Cfm"] = "cfm";
        ClassificationSpecificEnum2["Fs"] = "fs";
        ClassificationSpecificEnum2["Fsi"] = "fsi";
        ClassificationSpecificEnum2["Fsx"] = "fsx";
      })(ClassificationSpecificEnum || (exports.ClassificationSpecificEnum = ClassificationSpecificEnum = {}));
      function ClassificationSpecificEnumFromJSON(json) {
        return ClassificationSpecificEnumFromJSONTyped(json, false);
      }
      exports.ClassificationSpecificEnumFromJSON = ClassificationSpecificEnumFromJSON;
      function ClassificationSpecificEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ClassificationSpecificEnumFromJSONTyped = ClassificationSpecificEnumFromJSONTyped;
      function ClassificationSpecificEnumToJSON(value) {
        return value;
      }
      exports.ClassificationSpecificEnumToJSON = ClassificationSpecificEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/CodeAnalyses.js
  var require_CodeAnalyses = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/CodeAnalyses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeAnalysesToJSON = exports.CodeAnalysesFromJSONTyped = exports.CodeAnalysesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function CodeAnalysesFromJSON(json) {
        return CodeAnalysesFromJSONTyped(json, false);
      }
      exports.CodeAnalysesFromJSON = CodeAnalysesFromJSON;
      function CodeAnalysesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.CodeAnalysisFromJSON)
        };
      }
      exports.CodeAnalysesFromJSONTyped = CodeAnalysesFromJSONTyped;
      function CodeAnalysesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.CodeAnalysisToJSON)
        };
      }
      exports.CodeAnalysesToJSON = CodeAnalysesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/CodeAnalysis.js
  var require_CodeAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/CodeAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeAnalysisToJSON = exports.CodeAnalysisFromJSONTyped = exports.CodeAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function CodeAnalysisFromJSON(json) {
        return CodeAnalysisFromJSONTyped(json, false);
      }
      exports.CodeAnalysisFromJSON = CodeAnalysisFromJSON;
      function CodeAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "tokenized": !(0, runtime_1.exists)(json, "tokenized") ? void 0 : json["tokenized"],
          "language": !(0, runtime_1.exists)(json, "language") ? void 0 : json["language"],
          "type": (0, _1.ClassificationGenericEnumFromJSON)(json["type"]),
          "prediction": !(0, runtime_1.exists)(json, "prediction") ? void 0 : json["prediction"],
          "similarity": !(0, runtime_1.exists)(json, "similarity") ? void 0 : json["similarity"],
          "top5Colors": !(0, runtime_1.exists)(json, "top5Colors") ? void 0 : json["top5Colors"],
          "top5Sorted": !(0, runtime_1.exists)(json, "top5Sorted") ? void 0 : json["top5Sorted"],
          "id": json["id"],
          "analysis": json["analysis"],
          "model": (0, _1.ModelFromJSON)(json["model"])
        };
      }
      exports.CodeAnalysisFromJSONTyped = CodeAnalysisFromJSONTyped;
      function CodeAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "tokenized": value.tokenized,
          "language": value.language,
          "type": (0, _1.ClassificationGenericEnumToJSON)(value.type),
          "prediction": value.prediction,
          "similarity": value.similarity,
          "top5Colors": value.top5Colors,
          "top5Sorted": value.top5Sorted,
          "id": value.id,
          "analysis": value.analysis,
          "model": (0, _1.ModelToJSON)(value.model)
        };
      }
      exports.CodeAnalysisToJSON = CodeAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Context.js
  var require_Context = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Context.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ContextToJSON = exports.ContextFromJSONTyped = exports.ContextFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ContextFromJSON(json) {
        return ContextFromJSONTyped(json, false);
      }
      exports.ContextFromJSON = ContextFromJSON;
      function ContextFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "os": json["os"],
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "health": (0, _1.HealthFromJSON)(json["health"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.UserProfileFromJSON)(json["user"])
        };
      }
      exports.ContextFromJSONTyped = ContextFromJSONTyped;
      function ContextToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "os": value.os,
          "application": (0, _1.ApplicationToJSON)(value.application),
          "health": (0, _1.HealthToJSON)(value.health),
          "user": (0, _1.UserProfileToJSON)(value.user)
        };
      }
      exports.ContextToJSON = ContextToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Conversation.js
  var require_Conversation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Conversation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationToJSON = exports.ConversationFromJSONTyped = exports.ConversationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationFromJSON(json) {
        return ConversationFromJSONTyped(json, false);
      }
      exports.ConversationFromJSON = ConversationFromJSON;
      function ConversationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : (0, _1.ApplicationFromJSON)(json["application"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "messages": (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : (0, _1.FlattenedAnchorsFromJSON)(json["anchors"]),
          "type": (0, _1.ConversationTypeEnumFromJSON)(json["type"]),
          "grounding": !(0, runtime_1.exists)(json, "grounding") ? void 0 : (0, _1.ConversationGroundingFromJSON)(json["grounding"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.ConversationFromJSONTyped = ConversationFromJSONTyped;
      function ConversationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": value.name,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "favorited": value.favorited,
          "application": (0, _1.ApplicationToJSON)(value.application),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages),
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "anchors": (0, _1.FlattenedAnchorsToJSON)(value.anchors),
          "type": (0, _1.ConversationTypeEnumToJSON)(value.type),
          "grounding": (0, _1.ConversationGroundingToJSON)(value.grounding),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.ConversationToJSON = ConversationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationGrounding.js
  var require_ConversationGrounding = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationGrounding.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationGroundingToJSON = exports.ConversationGroundingFromJSONTyped = exports.ConversationGroundingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationGroundingFromJSON(json) {
        return ConversationGroundingFromJSONTyped(json, false);
      }
      exports.ConversationGroundingFromJSON = ConversationGroundingFromJSON;
      function ConversationGroundingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.ConversationGroundingFromJSONTyped = ConversationGroundingFromJSONTyped;
      function ConversationGroundingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.ConversationGroundingToJSON = ConversationGroundingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessage.js
  var require_ConversationMessage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationMessageToJSON = exports.ConversationMessageFromJSONTyped = exports.ConversationMessageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationMessageFromJSON(json) {
        return ConversationMessageFromJSONTyped(json, false);
      }
      exports.ConversationMessageFromJSON = ConversationMessageFromJSON;
      function ConversationMessageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ModelFromJSON)(json["model"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.FragmentFormatFromJSON)(json["fragment"]),
          "conversation": (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "sentiment": !(0, runtime_1.exists)(json, "sentiment") ? void 0 : (0, _1.ConversationMessageSentimentEnumFromJSON)(json["sentiment"]),
          "role": (0, _1.QGPTConversationMessageRoleEnumFromJSON)(json["role"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"])
        };
      }
      exports.ConversationMessageFromJSONTyped = ConversationMessageFromJSONTyped;
      function ConversationMessageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "model": (0, _1.ModelToJSON)(value.model),
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "sentiment": (0, _1.ConversationMessageSentimentEnumToJSON)(value.sentiment),
          "role": (0, _1.QGPTConversationMessageRoleEnumToJSON)(value.role),
          "score": (0, _1.ScoreToJSON)(value.score),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations)
        };
      }
      exports.ConversationMessageToJSON = ConversationMessageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessageSentimentEnum.js
  var require_ConversationMessageSentimentEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessageSentimentEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationMessageSentimentEnumToJSON = exports.ConversationMessageSentimentEnumFromJSONTyped = exports.ConversationMessageSentimentEnumFromJSON = exports.ConversationMessageSentimentEnum = void 0;
      var ConversationMessageSentimentEnum;
      (function(ConversationMessageSentimentEnum2) {
        ConversationMessageSentimentEnum2["Like"] = "LIKE";
        ConversationMessageSentimentEnum2["Dislike"] = "DISLIKE";
        ConversationMessageSentimentEnum2["Report"] = "REPORT";
      })(ConversationMessageSentimentEnum || (exports.ConversationMessageSentimentEnum = ConversationMessageSentimentEnum = {}));
      function ConversationMessageSentimentEnumFromJSON(json) {
        return ConversationMessageSentimentEnumFromJSONTyped(json, false);
      }
      exports.ConversationMessageSentimentEnumFromJSON = ConversationMessageSentimentEnumFromJSON;
      function ConversationMessageSentimentEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ConversationMessageSentimentEnumFromJSONTyped = ConversationMessageSentimentEnumFromJSONTyped;
      function ConversationMessageSentimentEnumToJSON(value) {
        return value;
      }
      exports.ConversationMessageSentimentEnumToJSON = ConversationMessageSentimentEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessages.js
  var require_ConversationMessages = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationMessages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationMessagesToJSON = exports.ConversationMessagesFromJSONTyped = exports.ConversationMessagesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationMessagesFromJSON(json) {
        return ConversationMessagesFromJSONTyped(json, false);
      }
      exports.ConversationMessagesFromJSON = ConversationMessagesFromJSON;
      function ConversationMessagesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ConversationMessageFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.ConversationMessagesFromJSONTyped = ConversationMessagesFromJSONTyped;
      function ConversationMessagesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ConversationMessageToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.ConversationMessagesToJSON = ConversationMessagesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationSummarizeInput.js
  var require_ConversationSummarizeInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationSummarizeInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationSummarizeInputToJSON = exports.ConversationSummarizeInputFromJSONTyped = exports.ConversationSummarizeInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationSummarizeInputFromJSON(json) {
        return ConversationSummarizeInputFromJSONTyped(json, false);
      }
      exports.ConversationSummarizeInputFromJSON = ConversationSummarizeInputFromJSON;
      function ConversationSummarizeInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.ConversationSummarizeInputFromJSONTyped = ConversationSummarizeInputFromJSONTyped;
      function ConversationSummarizeInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.ConversationSummarizeInputToJSON = ConversationSummarizeInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationSummarizeOutput.js
  var require_ConversationSummarizeOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationSummarizeOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationSummarizeOutputToJSON = exports.ConversationSummarizeOutputFromJSONTyped = exports.ConversationSummarizeOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationSummarizeOutputFromJSON(json) {
        return ConversationSummarizeOutputFromJSONTyped(json, false);
      }
      exports.ConversationSummarizeOutputFromJSON = ConversationSummarizeOutputFromJSON;
      function ConversationSummarizeOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "conversation": (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "annotation": (0, _1.ReferencedAnnotationFromJSON)(json["annotation"])
        };
      }
      exports.ConversationSummarizeOutputFromJSONTyped = ConversationSummarizeOutputFromJSONTyped;
      function ConversationSummarizeOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "annotation": (0, _1.ReferencedAnnotationToJSON)(value.annotation)
        };
      }
      exports.ConversationSummarizeOutputToJSON = ConversationSummarizeOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationTypeEnum.js
  var require_ConversationTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationTypeEnumToJSON = exports.ConversationTypeEnumFromJSONTyped = exports.ConversationTypeEnumFromJSON = exports.ConversationTypeEnum = void 0;
      var ConversationTypeEnum;
      (function(ConversationTypeEnum2) {
        ConversationTypeEnum2["Copilot"] = "COPILOT";
      })(ConversationTypeEnum || (exports.ConversationTypeEnum = ConversationTypeEnum = {}));
      function ConversationTypeEnumFromJSON(json) {
        return ConversationTypeEnumFromJSONTyped(json, false);
      }
      exports.ConversationTypeEnumFromJSON = ConversationTypeEnumFromJSON;
      function ConversationTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ConversationTypeEnumFromJSONTyped = ConversationTypeEnumFromJSONTyped;
      function ConversationTypeEnumToJSON(value) {
        return value;
      }
      exports.ConversationTypeEnumToJSON = ConversationTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Conversations.js
  var require_Conversations = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Conversations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationsToJSON = exports.ConversationsFromJSONTyped = exports.ConversationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationsFromJSON(json) {
        return ConversationsFromJSONTyped(json, false);
      }
      exports.ConversationsFromJSON = ConversationsFromJSON;
      function ConversationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ConversationFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.ConversationsFromJSONTyped = ConversationsFromJSONTyped;
      function ConversationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ConversationToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.ConversationsToJSON = ConversationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ConversationsCreateFromAssetOutput.js
  var require_ConversationsCreateFromAssetOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ConversationsCreateFromAssetOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationsCreateFromAssetOutputToJSON = exports.ConversationsCreateFromAssetOutputFromJSONTyped = exports.ConversationsCreateFromAssetOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ConversationsCreateFromAssetOutputFromJSON(json) {
        return ConversationsCreateFromAssetOutputFromJSONTyped(json, false);
      }
      exports.ConversationsCreateFromAssetOutputFromJSON = ConversationsCreateFromAssetOutputFromJSON;
      function ConversationsCreateFromAssetOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "conversation": (0, _1.ReferencedConversationFromJSON)(json["conversation"])
        };
      }
      exports.ConversationsCreateFromAssetOutputFromJSONTyped = ConversationsCreateFromAssetOutputFromJSONTyped;
      function ConversationsCreateFromAssetOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation)
        };
      }
      exports.ConversationsCreateFromAssetOutputToJSON = ConversationsCreateFromAssetOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/CreatedExternalProviderApiKey.js
  var require_CreatedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/CreatedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CreatedExternalProviderApiKeyToJSON = exports.CreatedExternalProviderApiKeyFromJSONTyped = exports.CreatedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function CreatedExternalProviderApiKeyFromJSON(json) {
        return CreatedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.CreatedExternalProviderApiKeyFromJSON = CreatedExternalProviderApiKeyFromJSON;
      function CreatedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "metadata": (0, _1.Auth0UserMetadataFromJSON)(json["metadata"])
        };
      }
      exports.CreatedExternalProviderApiKeyFromJSONTyped = CreatedExternalProviderApiKeyFromJSONTyped;
      function CreatedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "metadata": (0, _1.Auth0UserMetadataToJSON)(value.metadata)
        };
      }
      exports.CreatedExternalProviderApiKeyToJSON = CreatedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DeletedExternalProviderApiKey.js
  var require_DeletedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DeletedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DeletedExternalProviderApiKeyToJSON = exports.DeletedExternalProviderApiKeyFromJSONTyped = exports.DeletedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DeletedExternalProviderApiKeyFromJSON(json) {
        return DeletedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.DeletedExternalProviderApiKeyFromJSON = DeletedExternalProviderApiKeyFromJSON;
      function DeletedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "metadata": (0, _1.Auth0UserMetadataFromJSON)(json["metadata"])
        };
      }
      exports.DeletedExternalProviderApiKeyFromJSONTyped = DeletedExternalProviderApiKeyFromJSONTyped;
      function DeletedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "metadata": (0, _1.Auth0UserMetadataToJSON)(value.metadata)
        };
      }
      exports.DeletedExternalProviderApiKeyToJSON = DeletedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredAsset.js
  var require_DiscoveredAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredAssetToJSON = exports.DiscoveredAssetFromJSONTyped = exports.DiscoveredAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredAssetFromJSON(json) {
        return DiscoveredAssetFromJSONTyped(json, false);
      }
      exports.DiscoveredAssetFromJSON = DiscoveredAssetFromJSON;
      function DiscoveredAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.SeededFileFromJSON)(json["file"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.SeededFragmentFromJSON)(json["fragment"]),
          "directory": !(0, runtime_1.exists)(json, "directory") ? void 0 : json["directory"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SeededAssetMetadataFromJSON)(json["metadata"]),
          "filters": !(0, runtime_1.exists)(json, "filters") ? void 0 : (0, _1.TLPDirectedDiscoveryFiltersFromJSON)(json["filters"])
        };
      }
      exports.DiscoveredAssetFromJSONTyped = DiscoveredAssetFromJSONTyped;
      function DiscoveredAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "file": (0, _1.SeededFileToJSON)(value.file),
          "fragment": (0, _1.SeededFragmentToJSON)(value.fragment),
          "directory": value.directory,
          "metadata": (0, _1.SeededAssetMetadataToJSON)(value.metadata),
          "filters": (0, _1.TLPDirectedDiscoveryFiltersToJSON)(value.filters)
        };
      }
      exports.DiscoveredAssetToJSON = DiscoveredAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredAssets.js
  var require_DiscoveredAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredAssetsToJSON = exports.DiscoveredAssetsFromJSONTyped = exports.DiscoveredAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredAssetsFromJSON(json) {
        return DiscoveredAssetsFromJSONTyped(json, false);
      }
      exports.DiscoveredAssetsFromJSON = DiscoveredAssetsFromJSON;
      function DiscoveredAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": json["application"],
          "iterable": json["iterable"].map(_1.DiscoveredAssetFromJSON)
        };
      }
      exports.DiscoveredAssetsFromJSONTyped = DiscoveredAssetsFromJSONTyped;
      function DiscoveredAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": value.application,
          "iterable": value.iterable.map(_1.DiscoveredAssetToJSON)
        };
      }
      exports.DiscoveredAssetsToJSON = DiscoveredAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredHtmlWebpage.js
  var require_DiscoveredHtmlWebpage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredHtmlWebpage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredHtmlWebpageToJSON = exports.DiscoveredHtmlWebpageFromJSONTyped = exports.DiscoveredHtmlWebpageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredHtmlWebpageFromJSON(json) {
        return DiscoveredHtmlWebpageFromJSONTyped(json, false);
      }
      exports.DiscoveredHtmlWebpageFromJSON = DiscoveredHtmlWebpageFromJSON;
      function DiscoveredHtmlWebpageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assets": (0, _1.DiscoveredAssetsFromJSON)(json["assets"]),
          "url": json["url"]
        };
      }
      exports.DiscoveredHtmlWebpageFromJSONTyped = DiscoveredHtmlWebpageFromJSONTyped;
      function DiscoveredHtmlWebpageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets": (0, _1.DiscoveredAssetsToJSON)(value.assets),
          "url": value.url
        };
      }
      exports.DiscoveredHtmlWebpageToJSON = DiscoveredHtmlWebpageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredHtmlWebpages.js
  var require_DiscoveredHtmlWebpages = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredHtmlWebpages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredHtmlWebpagesToJSON = exports.DiscoveredHtmlWebpagesFromJSONTyped = exports.DiscoveredHtmlWebpagesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredHtmlWebpagesFromJSON(json) {
        return DiscoveredHtmlWebpagesFromJSONTyped(json, false);
      }
      exports.DiscoveredHtmlWebpagesFromJSON = DiscoveredHtmlWebpagesFromJSON;
      function DiscoveredHtmlWebpagesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.DiscoveredHtmlWebpageFromJSON),
          "application": json["application"]
        };
      }
      exports.DiscoveredHtmlWebpagesFromJSONTyped = DiscoveredHtmlWebpagesFromJSONTyped;
      function DiscoveredHtmlWebpagesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.DiscoveredHtmlWebpageToJSON),
          "application": value.application
        };
      }
      exports.DiscoveredHtmlWebpagesToJSON = DiscoveredHtmlWebpagesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredRelatedTag.js
  var require_DiscoveredRelatedTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredRelatedTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredRelatedTagToJSON = exports.DiscoveredRelatedTagFromJSONTyped = exports.DiscoveredRelatedTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredRelatedTagFromJSON(json) {
        return DiscoveredRelatedTagFromJSONTyped(json, false);
      }
      exports.DiscoveredRelatedTagFromJSON = DiscoveredRelatedTagFromJSON;
      function DiscoveredRelatedTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "seed": (0, _1.SeededTagFromJSON)(json["seed"])
        };
      }
      exports.DiscoveredRelatedTagFromJSONTyped = DiscoveredRelatedTagFromJSONTyped;
      function DiscoveredRelatedTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "seed": (0, _1.SeededTagToJSON)(value.seed)
        };
      }
      exports.DiscoveredRelatedTagToJSON = DiscoveredRelatedTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredRelatedTags.js
  var require_DiscoveredRelatedTags = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredRelatedTags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredRelatedTagsToJSON = exports.DiscoveredRelatedTagsFromJSONTyped = exports.DiscoveredRelatedTagsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredRelatedTagsFromJSON(json) {
        return DiscoveredRelatedTagsFromJSONTyped(json, false);
      }
      exports.DiscoveredRelatedTagsFromJSON = DiscoveredRelatedTagsFromJSON;
      function DiscoveredRelatedTagsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": json["application"],
          "iterable": json["iterable"].map(_1.DiscoveredRelatedTagFromJSON)
        };
      }
      exports.DiscoveredRelatedTagsFromJSONTyped = DiscoveredRelatedTagsFromJSONTyped;
      function DiscoveredRelatedTagsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": value.application,
          "iterable": value.iterable.map(_1.DiscoveredRelatedTagToJSON)
        };
      }
      exports.DiscoveredRelatedTagsToJSON = DiscoveredRelatedTagsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredSensitive.js
  var require_DiscoveredSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredSensitiveToJSON = exports.DiscoveredSensitiveFromJSONTyped = exports.DiscoveredSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredSensitiveFromJSON(json) {
        return DiscoveredSensitiveFromJSONTyped(json, false);
      }
      exports.DiscoveredSensitiveFromJSON = DiscoveredSensitiveFromJSON;
      function DiscoveredSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "seed": (0, _1.SeededSensitiveFromJSON)(json["seed"]),
          "text": json["text"]
        };
      }
      exports.DiscoveredSensitiveFromJSONTyped = DiscoveredSensitiveFromJSONTyped;
      function DiscoveredSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "seed": (0, _1.SeededSensitiveToJSON)(value.seed),
          "text": value.text
        };
      }
      exports.DiscoveredSensitiveToJSON = DiscoveredSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredSensitives.js
  var require_DiscoveredSensitives = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/DiscoveredSensitives.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveredSensitivesToJSON = exports.DiscoveredSensitivesFromJSONTyped = exports.DiscoveredSensitivesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DiscoveredSensitivesFromJSON(json) {
        return DiscoveredSensitivesFromJSONTyped(json, false);
      }
      exports.DiscoveredSensitivesFromJSON = DiscoveredSensitivesFromJSON;
      function DiscoveredSensitivesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.DiscoveredSensitiveFromJSON),
          "application": json["application"]
        };
      }
      exports.DiscoveredSensitivesFromJSONTyped = DiscoveredSensitivesFromJSONTyped;
      function DiscoveredSensitivesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.DiscoveredSensitiveToJSON),
          "application": value.application
        };
      }
      exports.DiscoveredSensitivesToJSON = DiscoveredSensitivesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Distribution.js
  var require_Distribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Distribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DistributionToJSON = exports.DistributionFromJSONTyped = exports.DistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DistributionFromJSON(json) {
        return DistributionFromJSONTyped(json, false);
      }
      exports.DistributionFromJSON = DistributionFromJSON;
      function DistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "share": (0, _1.FlattenedShareFromJSON)(json["share"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mailgun": !(0, runtime_1.exists)(json, "mailgun") ? void 0 : (0, _1.MailgunDistributionFromJSON)(json["mailgun"]),
          "github": !(0, runtime_1.exists)(json, "github") ? void 0 : (0, _1.GitHubDistributionFromJSON)(json["github"])
        };
      }
      exports.DistributionFromJSONTyped = DistributionFromJSONTyped;
      function DistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "share": (0, _1.FlattenedShareToJSON)(value.share),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mailgun": (0, _1.MailgunDistributionToJSON)(value.mailgun),
          "github": (0, _1.GitHubDistributionToJSON)(value.github)
        };
      }
      exports.DistributionToJSON = DistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Distributions.js
  var require_Distributions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Distributions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DistributionsToJSON = exports.DistributionsFromJSONTyped = exports.DistributionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function DistributionsFromJSON(json) {
        return DistributionsFromJSONTyped(json, false);
      }
      exports.DistributionsFromJSON = DistributionsFromJSON;
      function DistributionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.DistributionFromJSON),
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"])
        };
      }
      exports.DistributionsFromJSONTyped = DistributionsFromJSONTyped;
      function DistributionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.DistributionToJSON),
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema)
        };
      }
      exports.DistributionsToJSON = DistributionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Edges.js
  var require_Edges = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Edges.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EdgesToJSON = exports.EdgesFromJSONTyped = exports.EdgesFromJSON = void 0;
      var _1 = require_models();
      function EdgesFromJSON(json) {
        return EdgesFromJSONTyped(json, false);
      }
      exports.EdgesFromJSON = EdgesFromJSON;
      function EdgesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.NodeFromJSON)
        };
      }
      exports.EdgesFromJSONTyped = EdgesFromJSONTyped;
      function EdgesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.NodeToJSON)
        };
      }
      exports.EdgesToJSON = EdgesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/EmbeddedModelSchema.js
  var require_EmbeddedModelSchema = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/EmbeddedModelSchema.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EmbeddedModelSchemaToJSON = exports.EmbeddedModelSchemaFromJSONTyped = exports.EmbeddedModelSchemaFromJSON = void 0;
      var _1 = require_models();
      function EmbeddedModelSchemaFromJSON(json) {
        return EmbeddedModelSchemaFromJSONTyped(json, false);
      }
      exports.EmbeddedModelSchemaFromJSON = EmbeddedModelSchemaFromJSON;
      function EmbeddedModelSchemaFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "migration": json["migration"],
          "semantic": (0, _1.EmbeddedModelSchemaSemanticVersionEnumFromJSON)(json["semantic"])
        };
      }
      exports.EmbeddedModelSchemaFromJSONTyped = EmbeddedModelSchemaFromJSONTyped;
      function EmbeddedModelSchemaToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "migration": value.migration,
          "semantic": (0, _1.EmbeddedModelSchemaSemanticVersionEnumToJSON)(value.semantic)
        };
      }
      exports.EmbeddedModelSchemaToJSON = EmbeddedModelSchemaToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/EmbeddedModelSchemaSemanticVersionEnum.js
  var require_EmbeddedModelSchemaSemanticVersionEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/EmbeddedModelSchemaSemanticVersionEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EmbeddedModelSchemaSemanticVersionEnumToJSON = exports.EmbeddedModelSchemaSemanticVersionEnumFromJSONTyped = exports.EmbeddedModelSchemaSemanticVersionEnumFromJSON = exports.EmbeddedModelSchemaSemanticVersionEnum = void 0;
      var EmbeddedModelSchemaSemanticVersionEnum;
      (function(EmbeddedModelSchemaSemanticVersionEnum2) {
        EmbeddedModelSchemaSemanticVersionEnum2["Major0Minor0Patch1"] = "MAJOR_0_MINOR_0_PATCH_1";
      })(EmbeddedModelSchemaSemanticVersionEnum || (exports.EmbeddedModelSchemaSemanticVersionEnum = EmbeddedModelSchemaSemanticVersionEnum = {}));
      function EmbeddedModelSchemaSemanticVersionEnumFromJSON(json) {
        return EmbeddedModelSchemaSemanticVersionEnumFromJSONTyped(json, false);
      }
      exports.EmbeddedModelSchemaSemanticVersionEnumFromJSON = EmbeddedModelSchemaSemanticVersionEnumFromJSON;
      function EmbeddedModelSchemaSemanticVersionEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.EmbeddedModelSchemaSemanticVersionEnumFromJSONTyped = EmbeddedModelSchemaSemanticVersionEnumFromJSONTyped;
      function EmbeddedModelSchemaSemanticVersionEnumToJSON(value) {
        return value;
      }
      exports.EmbeddedModelSchemaSemanticVersionEnumToJSON = EmbeddedModelSchemaSemanticVersionEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Embedding.js
  var require_Embedding = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Embedding.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EmbeddingToJSON = exports.EmbeddingFromJSONTyped = exports.EmbeddingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function EmbeddingFromJSON(json) {
        return EmbeddingFromJSONTyped(json, false);
      }
      exports.EmbeddingFromJSON = EmbeddingFromJSON;
      function EmbeddingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "raw": json["raw"],
          "model": (0, _1.ModelFromJSON)(json["model"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"])
        };
      }
      exports.EmbeddingFromJSONTyped = EmbeddingFromJSONTyped;
      function EmbeddingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "raw": value.raw,
          "model": (0, _1.ModelToJSON)(value.model),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted)
        };
      }
      exports.EmbeddingToJSON = EmbeddingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Embeddings.js
  var require_Embeddings = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Embeddings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EmbeddingsToJSON = exports.EmbeddingsFromJSONTyped = exports.EmbeddingsFromJSON = void 0;
      var _1 = require_models();
      function EmbeddingsFromJSON(json) {
        return EmbeddingsFromJSONTyped(json, false);
      }
      exports.EmbeddingsFromJSON = EmbeddingsFromJSON;
      function EmbeddingsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.EmbeddingFromJSON)
        };
      }
      exports.EmbeddingsFromJSONTyped = EmbeddingsFromJSONTyped;
      function EmbeddingsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.EmbeddingToJSON)
        };
      }
      exports.EmbeddingsToJSON = EmbeddingsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExistentMetadata.js
  var require_ExistentMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExistentMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExistentMetadataToJSON = exports.ExistentMetadataFromJSONTyped = exports.ExistentMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExistentMetadataFromJSON(json) {
        return ExistentMetadataFromJSONTyped(json, false);
      }
      exports.ExistentMetadataFromJSON = ExistentMetadataFromJSON;
      function ExistentMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "value": json["value"]
        };
      }
      exports.ExistentMetadataFromJSONTyped = ExistentMetadataFromJSONTyped;
      function ExistentMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "value": value.value
        };
      }
      exports.ExistentMetadataToJSON = ExistentMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExistingMetadata.js
  var require_ExistingMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExistingMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExistingMetadataToJSON = exports.ExistingMetadataFromJSONTyped = exports.ExistingMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExistingMetadataFromJSON(json) {
        return ExistingMetadataFromJSONTyped(json, false);
      }
      exports.ExistingMetadataFromJSON = ExistingMetadataFromJSON;
      function ExistingMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "website": !(0, runtime_1.exists)(json, "website") ? void 0 : (0, _1.ReferencedWebsiteFromJSON)(json["website"]),
          "tag": !(0, runtime_1.exists)(json, "tag") ? void 0 : (0, _1.ReferencedTagFromJSON)(json["tag"])
        };
      }
      exports.ExistingMetadataFromJSONTyped = ExistingMetadataFromJSONTyped;
      function ExistingMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "website": (0, _1.ReferencedWebsiteToJSON)(value.website),
          "tag": (0, _1.ReferencedTagToJSON)(value.tag)
        };
      }
      exports.ExistingMetadataToJSON = ExistingMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExportedAsset.js
  var require_ExportedAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExportedAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExportedAssetToJSON = exports.ExportedAssetFromJSONTyped = exports.ExportedAssetFromJSON = void 0;
      var _1 = require_models();
      function ExportedAssetFromJSON(json) {
        return ExportedAssetFromJSONTyped(json, false);
      }
      exports.ExportedAssetFromJSON = ExportedAssetFromJSON;
      function ExportedAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "name": json["name"],
          "description": json["description"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "raw": (0, _1.FileFormatFromJSON)(json["raw"])
        };
      }
      exports.ExportedAssetFromJSONTyped = ExportedAssetFromJSONTyped;
      function ExportedAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "name": value.name,
          "description": value.description,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "raw": (0, _1.FileFormatToJSON)(value.raw)
        };
      }
      exports.ExportedAssetToJSON = ExportedAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabase.js
  var require_ExportedDatabase = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabase.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExportedDatabaseToJSON = exports.ExportedDatabaseFromJSONTyped = exports.ExportedDatabaseFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExportedDatabaseFromJSON(json) {
        return ExportedDatabaseFromJSONTyped(json, false);
      }
      exports.ExportedDatabaseFromJSON = ExportedDatabaseFromJSON;
      function ExportedDatabaseFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "analyses": json["analyses"],
          "applications": json["applications"],
          "assets": json["assets"],
          "codeAnalyses": json["codeAnalyses"],
          "files": json["files"],
          "formatMetrics": json["formatMetrics"],
          "formats": json["formats"],
          "fragments": json["fragments"],
          "imageAnalyses": json["imageAnalyses"],
          "models": json["models"],
          "ocrAnalyses": json["ocrAnalyses"],
          "persons": json["persons"],
          "sensitives": json["sensitives"],
          "tags": json["tags"],
          "websites": json["websites"],
          "values": (0, _1.ExportedDatabaseFormatsFromJSON)(json["values"]),
          "version": json["version"],
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "relationships": !(0, runtime_1.exists)(json, "relationships") ? void 0 : json["relationships"],
          "activities": !(0, runtime_1.exists)(json, "activities") ? void 0 : json["activities"],
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : json["annotations"],
          "hints": !(0, runtime_1.exists)(json, "hints") ? void 0 : json["hints"],
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : json["anchors"],
          "anchorPoints": !(0, runtime_1.exists)(json, "anchorPoints") ? void 0 : json["anchorPoints"],
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : json["conversations"],
          "conversationMessages": !(0, runtime_1.exists)(json, "conversationMessages") ? void 0 : json["conversationMessages"],
          "messageValues": !(0, runtime_1.exists)(json, "messageValues") ? void 0 : (0, _1.ExportedDatabaseFormatsFromJSON)(json["messageValues"])
        };
      }
      exports.ExportedDatabaseFromJSONTyped = ExportedDatabaseFromJSONTyped;
      function ExportedDatabaseToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "analyses": value.analyses,
          "applications": value.applications,
          "assets": value.assets,
          "codeAnalyses": value.codeAnalyses,
          "files": value.files,
          "formatMetrics": value.formatMetrics,
          "formats": value.formats,
          "fragments": value.fragments,
          "imageAnalyses": value.imageAnalyses,
          "models": value.models,
          "ocrAnalyses": value.ocrAnalyses,
          "persons": value.persons,
          "sensitives": value.sensitives,
          "tags": value.tags,
          "websites": value.websites,
          "values": (0, _1.ExportedDatabaseFormatsToJSON)(value.values),
          "version": value.version,
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "relationships": value.relationships,
          "activities": value.activities,
          "annotations": value.annotations,
          "hints": value.hints,
          "anchors": value.anchors,
          "anchorPoints": value.anchorPoints,
          "conversations": value.conversations,
          "conversationMessages": value.conversationMessages,
          "messageValues": (0, _1.ExportedDatabaseFormatsToJSON)(value.messageValues)
        };
      }
      exports.ExportedDatabaseToJSON = ExportedDatabaseToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabaseFormat.js
  var require_ExportedDatabaseFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabaseFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExportedDatabaseFormatToJSON = exports.ExportedDatabaseFormatFromJSONTyped = exports.ExportedDatabaseFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExportedDatabaseFormatFromJSON(json) {
        return ExportedDatabaseFormatFromJSONTyped(json, false);
      }
      exports.ExportedDatabaseFormatFromJSON = ExportedDatabaseFormatFromJSON;
      function ExportedDatabaseFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "raw": json["raw"]
        };
      }
      exports.ExportedDatabaseFormatFromJSONTyped = ExportedDatabaseFormatFromJSONTyped;
      function ExportedDatabaseFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "raw": value.raw
        };
      }
      exports.ExportedDatabaseFormatToJSON = ExportedDatabaseFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabaseFormats.js
  var require_ExportedDatabaseFormats = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExportedDatabaseFormats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExportedDatabaseFormatsToJSON = exports.ExportedDatabaseFormatsFromJSONTyped = exports.ExportedDatabaseFormatsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExportedDatabaseFormatsFromJSON(json) {
        return ExportedDatabaseFormatsFromJSONTyped(json, false);
      }
      exports.ExportedDatabaseFormatsFromJSON = ExportedDatabaseFormatsFromJSON;
      function ExportedDatabaseFormatsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ExportedDatabaseFormatFromJSON)
        };
      }
      exports.ExportedDatabaseFormatsFromJSONTyped = ExportedDatabaseFormatsFromJSONTyped;
      function ExportedDatabaseFormatsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ExportedDatabaseFormatToJSON)
        };
      }
      exports.ExportedDatabaseFormatsToJSON = ExportedDatabaseFormatsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternalMLProviderEnum.js
  var require_ExternalMLProviderEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternalMLProviderEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalMLProviderEnumToJSON = exports.ExternalMLProviderEnumFromJSONTyped = exports.ExternalMLProviderEnumFromJSON = exports.ExternalMLProviderEnum = void 0;
      var ExternalMLProviderEnum;
      (function(ExternalMLProviderEnum2) {
        ExternalMLProviderEnum2["Apple"] = "APPLE";
        ExternalMLProviderEnum2["Amazon"] = "AMAZON";
        ExternalMLProviderEnum2["Google"] = "GOOGLE";
        ExternalMLProviderEnum2["Meta"] = "META";
        ExternalMLProviderEnum2["Openai"] = "OPENAI";
        ExternalMLProviderEnum2["Lmsys"] = "LMSYS";
        ExternalMLProviderEnum2["Salesforce"] = "SALESFORCE";
        ExternalMLProviderEnum2["HuggingFace"] = "HUGGING_FACE";
        ExternalMLProviderEnum2["UniversityOfWashington"] = "UNIVERSITY_OF_WASHINGTON";
        ExternalMLProviderEnum2["OpenLmResearch"] = "OPEN_LM_RESEARCH";
        ExternalMLProviderEnum2["Microsoft"] = "MICROSOFT";
        ExternalMLProviderEnum2["UcBerkley"] = "UC_BERKLEY";
        ExternalMLProviderEnum2["PekingUniversity"] = "PEKING_UNIVERSITY";
        ExternalMLProviderEnum2["RenminUniversityOfChina"] = "RENMIN_UNIVERSITY_OF_CHINA";
        ExternalMLProviderEnum2["TogetherAi"] = "TOGETHER_AI";
        ExternalMLProviderEnum2["Databricks"] = "DATABRICKS";
        ExternalMLProviderEnum2["EleutherAi"] = "ELEUTHER_AI";
        ExternalMLProviderEnum2["FudanUniversity"] = "FUDAN_UNIVERSITY";
        ExternalMLProviderEnum2["Blickdl"] = "BLICKDL";
        ExternalMLProviderEnum2["HongKongBaptistUniversity"] = "HONG_KONG_BAPTIST_UNIVERSITY";
        ExternalMLProviderEnum2["Bigcode"] = "BIGCODE";
        ExternalMLProviderEnum2["Jina"] = "JINA";
        ExternalMLProviderEnum2["Pieces"] = "PIECES";
      })(ExternalMLProviderEnum || (exports.ExternalMLProviderEnum = ExternalMLProviderEnum = {}));
      function ExternalMLProviderEnumFromJSON(json) {
        return ExternalMLProviderEnumFromJSONTyped(json, false);
      }
      exports.ExternalMLProviderEnumFromJSON = ExternalMLProviderEnumFromJSON;
      function ExternalMLProviderEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ExternalMLProviderEnumFromJSONTyped = ExternalMLProviderEnumFromJSONTyped;
      function ExternalMLProviderEnumToJSON(value) {
        return value;
      }
      exports.ExternalMLProviderEnumToJSON = ExternalMLProviderEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProvider.js
  var require_ExternalProvider = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalProviderToJSON = exports.ExternalProviderFromJSONTyped = exports.ExternalProviderFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExternalProviderFromJSON(json) {
        return ExternalProviderFromJSONTyped(json, false);
      }
      exports.ExternalProviderFromJSON = ExternalProviderFromJSON;
      function ExternalProviderFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "type": (0, _1.ExternalProviderTypeEnumFromJSON)(json["type"]),
          "userId": json["user_id"],
          "accessToken": !(0, runtime_1.exists)(json, "access_token") ? void 0 : json["access_token"],
          "expiresIn": !(0, runtime_1.exists)(json, "expires_in") ? void 0 : json["expires_in"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "profileData": !(0, runtime_1.exists)(json, "profileData") ? void 0 : (0, _1.ExternalProviderProfileDataFromJSON)(json["profileData"]),
          "connection": !(0, runtime_1.exists)(json, "connection") ? void 0 : json["connection"],
          "isSocial": !(0, runtime_1.exists)(json, "isSocial") ? void 0 : json["isSocial"]
        };
      }
      exports.ExternalProviderFromJSONTyped = ExternalProviderFromJSONTyped;
      function ExternalProviderToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "type": (0, _1.ExternalProviderTypeEnumToJSON)(value.type),
          "user_id": value.userId,
          "access_token": value.accessToken,
          "expires_in": value.expiresIn,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "profileData": (0, _1.ExternalProviderProfileDataToJSON)(value.profileData),
          "connection": value.connection,
          "isSocial": value.isSocial
        };
      }
      exports.ExternalProviderToJSON = ExternalProviderToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviderProfileData.js
  var require_ExternalProviderProfileData = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviderProfileData.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalProviderProfileDataToJSON = exports.ExternalProviderProfileDataFromJSONTyped = exports.ExternalProviderProfileDataFromJSON = void 0;
      var runtime_1 = require_runtime();
      function ExternalProviderProfileDataFromJSON(json) {
        return ExternalProviderProfileDataFromJSONTyped(json, false);
      }
      exports.ExternalProviderProfileDataFromJSON = ExternalProviderProfileDataFromJSON;
      function ExternalProviderProfileDataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "picture": !(0, runtime_1.exists)(json, "picture") ? void 0 : json["picture"],
          "nickname": !(0, runtime_1.exists)(json, "nickname") ? void 0 : json["nickname"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "emailVerified": !(0, runtime_1.exists)(json, "email_verified") ? void 0 : json["email_verified"],
          "nodeId": !(0, runtime_1.exists)(json, "node_id") ? void 0 : json["node_id"],
          "gravatarId": !(0, runtime_1.exists)(json, "gravatar_id") ? void 0 : json["gravatar_id"],
          "url": !(0, runtime_1.exists)(json, "url") ? void 0 : json["url"],
          "htmlUrl": !(0, runtime_1.exists)(json, "html_url") ? void 0 : json["html_url"],
          "followersUrl": !(0, runtime_1.exists)(json, "followers_url") ? void 0 : json["followers_url"],
          "followingUrl": !(0, runtime_1.exists)(json, "following_url") ? void 0 : json["following_url"],
          "gistsUrl": !(0, runtime_1.exists)(json, "gists_url") ? void 0 : json["gists_url"],
          "starredUrl": !(0, runtime_1.exists)(json, "starred_url") ? void 0 : json["starred_url"],
          "subscriptionsUrl": !(0, runtime_1.exists)(json, "subscriptions_url") ? void 0 : json["subscriptions_url"],
          "organizationsUrl": !(0, runtime_1.exists)(json, "organizations_url") ? void 0 : json["organizations_url"],
          "reposUrl": !(0, runtime_1.exists)(json, "repos_url") ? void 0 : json["repos_url"],
          "eventsUrl": !(0, runtime_1.exists)(json, "events_url") ? void 0 : json["events_url"],
          "receivedEventsUrl": !(0, runtime_1.exists)(json, "received_events_url") ? void 0 : json["received_events_url"],
          "type": !(0, runtime_1.exists)(json, "type") ? void 0 : json["type"],
          "siteAdmin": !(0, runtime_1.exists)(json, "site_admin") ? void 0 : json["site_admin"],
          "company": !(0, runtime_1.exists)(json, "company") ? void 0 : json["company"],
          "blog": !(0, runtime_1.exists)(json, "blog") ? void 0 : json["blog"],
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : json["anchor"],
          "hireable": !(0, runtime_1.exists)(json, "hireable") ? void 0 : json["hireable"],
          "bio": !(0, runtime_1.exists)(json, "bio") ? void 0 : json["bio"],
          "twitterUsername": !(0, runtime_1.exists)(json, "twitter_username") ? void 0 : json["twitter_username"],
          "publicRepos": !(0, runtime_1.exists)(json, "public_repos") ? void 0 : json["public_repos"],
          "publicGists": !(0, runtime_1.exists)(json, "public_gists") ? void 0 : json["public_gists"],
          "followers": !(0, runtime_1.exists)(json, "followers") ? void 0 : json["followers"],
          "following": !(0, runtime_1.exists)(json, "following") ? void 0 : json["following"],
          "createdAt": !(0, runtime_1.exists)(json, "created_at") ? void 0 : json["created_at"],
          "updatedAt": !(0, runtime_1.exists)(json, "updated_at") ? void 0 : json["updated_at"],
          "privateGists": !(0, runtime_1.exists)(json, "private_gists") ? void 0 : json["private_gists"],
          "totalPrivateRepos": !(0, runtime_1.exists)(json, "total_private_repos") ? void 0 : json["total_private_repos"],
          "ownedPrivateRepos": !(0, runtime_1.exists)(json, "owned_private_repos") ? void 0 : json["owned_private_repos"],
          "diskUsage": !(0, runtime_1.exists)(json, "disk_usage") ? void 0 : json["disk_usage"],
          "collaborators": !(0, runtime_1.exists)(json, "collaborators") ? void 0 : json["collaborators"],
          "twoFactorAuthentication": !(0, runtime_1.exists)(json, "two_factor_authentication") ? void 0 : json["two_factor_authentication"]
        };
      }
      exports.ExternalProviderProfileDataFromJSONTyped = ExternalProviderProfileDataFromJSONTyped;
      function ExternalProviderProfileDataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "name": value.name,
          "picture": value.picture,
          "nickname": value.nickname,
          "email": value.email,
          "email_verified": value.emailVerified,
          "node_id": value.nodeId,
          "gravatar_id": value.gravatarId,
          "url": value.url,
          "html_url": value.htmlUrl,
          "followers_url": value.followersUrl,
          "following_url": value.followingUrl,
          "gists_url": value.gistsUrl,
          "starred_url": value.starredUrl,
          "subscriptions_url": value.subscriptionsUrl,
          "organizations_url": value.organizationsUrl,
          "repos_url": value.reposUrl,
          "events_url": value.eventsUrl,
          "received_events_url": value.receivedEventsUrl,
          "type": value.type,
          "site_admin": value.siteAdmin,
          "company": value.company,
          "blog": value.blog,
          "anchor": value.anchor,
          "hireable": value.hireable,
          "bio": value.bio,
          "twitter_username": value.twitterUsername,
          "public_repos": value.publicRepos,
          "public_gists": value.publicGists,
          "followers": value.followers,
          "following": value.following,
          "created_at": value.createdAt,
          "updated_at": value.updatedAt,
          "private_gists": value.privateGists,
          "total_private_repos": value.totalPrivateRepos,
          "owned_private_repos": value.ownedPrivateRepos,
          "disk_usage": value.diskUsage,
          "collaborators": value.collaborators,
          "two_factor_authentication": value.twoFactorAuthentication
        };
      }
      exports.ExternalProviderProfileDataToJSON = ExternalProviderProfileDataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviderTypeEnum.js
  var require_ExternalProviderTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviderTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalProviderTypeEnumToJSON = exports.ExternalProviderTypeEnumFromJSONTyped = exports.ExternalProviderTypeEnumFromJSON = exports.ExternalProviderTypeEnum = void 0;
      var ExternalProviderTypeEnum;
      (function(ExternalProviderTypeEnum2) {
        ExternalProviderTypeEnum2["Github"] = "github";
        ExternalProviderTypeEnum2["Auth0"] = "auth0";
        ExternalProviderTypeEnum2["GoogleOauth2"] = "google-oauth2";
        ExternalProviderTypeEnum2["Bitbucket"] = "bitbucket";
        ExternalProviderTypeEnum2["Linkedin"] = "linkedin";
        ExternalProviderTypeEnum2["Twitter"] = "twitter";
        ExternalProviderTypeEnum2["Facebook"] = "facebook";
        ExternalProviderTypeEnum2["Waad"] = "waad";
      })(ExternalProviderTypeEnum || (exports.ExternalProviderTypeEnum = ExternalProviderTypeEnum = {}));
      function ExternalProviderTypeEnumFromJSON(json) {
        return ExternalProviderTypeEnumFromJSONTyped(json, false);
      }
      exports.ExternalProviderTypeEnumFromJSON = ExternalProviderTypeEnumFromJSON;
      function ExternalProviderTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ExternalProviderTypeEnumFromJSONTyped = ExternalProviderTypeEnumFromJSONTyped;
      function ExternalProviderTypeEnumToJSON(value) {
        return value;
      }
      exports.ExternalProviderTypeEnumToJSON = ExternalProviderTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviders.js
  var require_ExternalProviders = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternalProviders.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalProvidersToJSON = exports.ExternalProvidersFromJSONTyped = exports.ExternalProvidersFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ExternalProvidersFromJSON(json) {
        return ExternalProvidersFromJSONTyped(json, false);
      }
      exports.ExternalProvidersFromJSON = ExternalProvidersFromJSON;
      function ExternalProvidersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ExternalProviderFromJSON)
        };
      }
      exports.ExternalProvidersFromJSONTyped = ExternalProvidersFromJSONTyped;
      function ExternalProvidersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ExternalProviderToJSON)
        };
      }
      exports.ExternalProvidersToJSON = ExternalProvidersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ExternallySourcedEnum.js
  var require_ExternallySourcedEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ExternallySourcedEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternallySourcedEnumToJSON = exports.ExternallySourcedEnumFromJSONTyped = exports.ExternallySourcedEnumFromJSON = exports.ExternallySourcedEnum = void 0;
      var ExternallySourcedEnum;
      (function(ExternallySourcedEnum2) {
        ExternallySourcedEnum2["Twitter"] = "TWITTER";
        ExternallySourcedEnum2["Medium"] = "MEDIUM";
        ExternallySourcedEnum2["LinkedIn"] = "LINKED_IN";
        ExternallySourcedEnum2["Instagram"] = "INSTAGRAM";
        ExternallySourcedEnum2["Facebook"] = "FACEBOOK";
        ExternallySourcedEnum2["Reddit"] = "REDDIT";
        ExternallySourcedEnum2["Discord"] = "DISCORD";
        ExternallySourcedEnum2["BitBucket"] = "BIT_BUCKET";
        ExternallySourcedEnum2["GitLab"] = "GIT_LAB";
        ExternallySourcedEnum2["GitHub"] = "GIT_HUB";
        ExternallySourcedEnum2["Slack"] = "SLACK";
        ExternallySourcedEnum2["Mailgun"] = "MAILGUN";
      })(ExternallySourcedEnum || (exports.ExternallySourcedEnum = ExternallySourcedEnum = {}));
      function ExternallySourcedEnumFromJSON(json) {
        return ExternallySourcedEnumFromJSONTyped(json, false);
      }
      exports.ExternallySourcedEnumFromJSON = ExternallySourcedEnumFromJSON;
      function ExternallySourcedEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ExternallySourcedEnumFromJSONTyped = ExternallySourcedEnumFromJSONTyped;
      function ExternallySourcedEnumToJSON(value) {
        return value;
      }
      exports.ExternallySourcedEnumToJSON = ExternallySourcedEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FileFormat.js
  var require_FileFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FileFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FileFormatToJSON = exports.FileFormatFromJSONTyped = exports.FileFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FileFormatFromJSON(json) {
        return FileFormatFromJSONTyped(json, false);
      }
      exports.FileFormatFromJSON = FileFormatFromJSON;
      function FileFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.TransferableBytesFromJSON)(json["bytes"]),
          "string": !(0, runtime_1.exists)(json, "string") ? void 0 : (0, _1.TransferableStringFromJSON)(json["string"])
        };
      }
      exports.FileFormatFromJSONTyped = FileFormatFromJSONTyped;
      function FileFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "bytes": (0, _1.TransferableBytesToJSON)(value.bytes),
          "string": (0, _1.TransferableStringToJSON)(value.string)
        };
      }
      exports.FileFormatToJSON = FileFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FileMetadata.js
  var require_FileMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FileMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FileMetadataToJSON = exports.FileMetadataFromJSONTyped = exports.FileMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FileMetadataFromJSON(json) {
        return FileMetadataFromJSONTyped(json, false);
      }
      exports.FileMetadataFromJSON = FileMetadataFromJSON;
      function FileMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "ext": !(0, runtime_1.exists)(json, "ext") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["ext"]),
          "size": !(0, runtime_1.exists)(json, "size") ? void 0 : json["size"]
        };
      }
      exports.FileMetadataFromJSONTyped = FileMetadataFromJSONTyped;
      function FileMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "name": value.name,
          "ext": (0, _1.ClassificationSpecificEnumToJSON)(value.ext),
          "size": value.size
        };
      }
      exports.FileMetadataToJSON = FileMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FilePickerInput.js
  var require_FilePickerInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FilePickerInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FilePickerInputToJSON = exports.FilePickerInputFromJSONTyped = exports.FilePickerInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FilePickerInputFromJSON(json) {
        return FilePickerInputFromJSONTyped(json, false);
      }
      exports.FilePickerInputFromJSON = FilePickerInputFromJSON;
      function FilePickerInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "allowedExtensions": !(0, runtime_1.exists)(json, "allowedExtensions") ? void 0 : json["allowedExtensions"]
        };
      }
      exports.FilePickerInputFromJSONTyped = FilePickerInputFromJSONTyped;
      function FilePickerInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "allowedExtensions": value.allowedExtensions
        };
      }
      exports.FilePickerInputToJSON = FilePickerInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FilterOperationTypeEnum.js
  var require_FilterOperationTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FilterOperationTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FilterOperationTypeEnumToJSON = exports.FilterOperationTypeEnumFromJSONTyped = exports.FilterOperationTypeEnumFromJSON = exports.FilterOperationTypeEnum = void 0;
      var FilterOperationTypeEnum;
      (function(FilterOperationTypeEnum2) {
        FilterOperationTypeEnum2["And"] = "AND";
        FilterOperationTypeEnum2["Or"] = "OR";
      })(FilterOperationTypeEnum || (exports.FilterOperationTypeEnum = FilterOperationTypeEnum = {}));
      function FilterOperationTypeEnumFromJSON(json) {
        return FilterOperationTypeEnumFromJSONTyped(json, false);
      }
      exports.FilterOperationTypeEnumFromJSON = FilterOperationTypeEnumFromJSON;
      function FilterOperationTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.FilterOperationTypeEnumFromJSONTyped = FilterOperationTypeEnumFromJSONTyped;
      function FilterOperationTypeEnumToJSON(value) {
        return value;
      }
      exports.FilterOperationTypeEnumToJSON = FilterOperationTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedActivities.js
  var require_FlattenedActivities = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedActivities.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedActivitiesToJSON = exports.FlattenedActivitiesFromJSONTyped = exports.FlattenedActivitiesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedActivitiesFromJSON(json) {
        return FlattenedActivitiesFromJSONTyped(json, false);
      }
      exports.FlattenedActivitiesFromJSON = FlattenedActivitiesFromJSON;
      function FlattenedActivitiesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedActivityFromJSON)
        };
      }
      exports.FlattenedActivitiesFromJSONTyped = FlattenedActivitiesFromJSONTyped;
      function FlattenedActivitiesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedActivityToJSON)
        };
      }
      exports.FlattenedActivitiesToJSON = FlattenedActivitiesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedActivity.js
  var require_FlattenedActivity = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedActivity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedActivityToJSON = exports.FlattenedActivityFromJSONTyped = exports.FlattenedActivityFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedActivityFromJSON(json) {
        return FlattenedActivityFromJSONTyped(json, false);
      }
      exports.FlattenedActivityFromJSON = FlattenedActivityFromJSON;
      function FlattenedActivityFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "event": (0, _1.SeededConnectorTrackingFromJSON)(json["event"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "format": !(0, runtime_1.exists)(json, "format") ? void 0 : (0, _1.ReferencedFormatFromJSON)(json["format"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.FlattenedUserProfileFromJSON)(json["user"]),
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "rank": !(0, runtime_1.exists)(json, "rank") ? void 0 : json["rank"]
        };
      }
      exports.FlattenedActivityFromJSONTyped = FlattenedActivityFromJSONTyped;
      function FlattenedActivityToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "event": (0, _1.SeededConnectorTrackingToJSON)(value.event),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "format": (0, _1.ReferencedFormatToJSON)(value.format),
          "user": (0, _1.FlattenedUserProfileToJSON)(value.user),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "rank": value.rank
        };
      }
      exports.FlattenedActivityToJSON = FlattenedActivityToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnalysis.js
  var require_FlattenedAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnalysisToJSON = exports.FlattenedAnalysisFromJSONTyped = exports.FlattenedAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnalysisFromJSON(json) {
        return FlattenedAnalysisFromJSONTyped(json, false);
      }
      exports.FlattenedAnalysisFromJSON = FlattenedAnalysisFromJSON;
      function FlattenedAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "code": !(0, runtime_1.exists)(json, "code") ? void 0 : (0, _1.CodeAnalysisFromJSON)(json["code"]),
          "id": json["id"],
          "format": json["format"],
          "image": !(0, runtime_1.exists)(json, "image") ? void 0 : (0, _1.FlattenedImageAnalysisFromJSON)(json["image"])
        };
      }
      exports.FlattenedAnalysisFromJSONTyped = FlattenedAnalysisFromJSONTyped;
      function FlattenedAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "code": (0, _1.CodeAnalysisToJSON)(value.code),
          "id": value.id,
          "format": value.format,
          "image": (0, _1.FlattenedImageAnalysisToJSON)(value.image)
        };
      }
      exports.FlattenedAnalysisToJSON = FlattenedAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchor.js
  var require_FlattenedAnchor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnchorToJSON = exports.FlattenedAnchorFromJSONTyped = exports.FlattenedAnchorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnchorFromJSON(json) {
        return FlattenedAnchorFromJSONTyped(json, false);
      }
      exports.FlattenedAnchorFromJSON = FlattenedAnchorFromJSON;
      function FlattenedAnchorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "type": (0, _1.AnchorTypeEnumFromJSON)(json["type"]),
          "watch": !(0, runtime_1.exists)(json, "watch") ? void 0 : json["watch"],
          "points": (0, _1.FlattenedAnchorPointsFromJSON)(json["points"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : (0, _1.FlattenedConversationsFromJSON)(json["conversations"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAnchorFromJSONTyped = FlattenedAnchorFromJSONTyped;
      function FlattenedAnchorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "type": (0, _1.AnchorTypeEnumToJSON)(value.type),
          "watch": value.watch,
          "points": (0, _1.FlattenedAnchorPointsToJSON)(value.points),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "name": value.name,
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "conversations": (0, _1.FlattenedConversationsToJSON)(value.conversations),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAnchorToJSON = FlattenedAnchorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchorPoint.js
  var require_FlattenedAnchorPoint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchorPoint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnchorPointToJSON = exports.FlattenedAnchorPointFromJSONTyped = exports.FlattenedAnchorPointFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnchorPointFromJSON(json) {
        return FlattenedAnchorPointFromJSONTyped(json, false);
      }
      exports.FlattenedAnchorPointFromJSON = FlattenedAnchorPointFromJSON;
      function FlattenedAnchorPointFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "verified": !(0, runtime_1.exists)(json, "verified") ? void 0 : json["verified"],
          "fullpath": json["fullpath"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "platform": !(0, runtime_1.exists)(json, "platform") ? void 0 : (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "anchor": (0, _1.ReferencedAnchorFromJSON)(json["anchor"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAnchorPointFromJSONTyped = FlattenedAnchorPointFromJSONTyped;
      function FlattenedAnchorPointToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "verified": value.verified,
          "fullpath": value.fullpath,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "anchor": (0, _1.ReferencedAnchorToJSON)(value.anchor),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAnchorPointToJSON = FlattenedAnchorPointToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchorPoints.js
  var require_FlattenedAnchorPoints = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchorPoints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnchorPointsToJSON = exports.FlattenedAnchorPointsFromJSONTyped = exports.FlattenedAnchorPointsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnchorPointsFromJSON(json) {
        return FlattenedAnchorPointsFromJSONTyped(json, false);
      }
      exports.FlattenedAnchorPointsFromJSON = FlattenedAnchorPointsFromJSON;
      function FlattenedAnchorPointsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedAnchorPointFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAnchorPointsFromJSONTyped = FlattenedAnchorPointsFromJSONTyped;
      function FlattenedAnchorPointsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedAnchorPointToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAnchorPointsToJSON = FlattenedAnchorPointsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchors.js
  var require_FlattenedAnchors = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnchors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnchorsToJSON = exports.FlattenedAnchorsFromJSONTyped = exports.FlattenedAnchorsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnchorsFromJSON(json) {
        return FlattenedAnchorsFromJSONTyped(json, false);
      }
      exports.FlattenedAnchorsFromJSON = FlattenedAnchorsFromJSON;
      function FlattenedAnchorsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedAnchorFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAnchorsFromJSONTyped = FlattenedAnchorsFromJSONTyped;
      function FlattenedAnchorsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedAnchorToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAnchorsToJSON = FlattenedAnchorsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnnotation.js
  var require_FlattenedAnnotation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnnotation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnnotationToJSON = exports.FlattenedAnnotationFromJSONTyped = exports.FlattenedAnnotationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnnotationFromJSON(json) {
        return FlattenedAnnotationFromJSONTyped(json, false);
      }
      exports.FlattenedAnnotationFromJSON = FlattenedAnnotationFromJSON;
      function FlattenedAnnotationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : (0, _1.ReferencedPersonFromJSON)(json["person"]),
          "type": (0, _1.AnnotationTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"],
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : (0, _1.ReferencedAnchorFromJSON)(json["anchor"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.FlattenedAnnotationFromJSONTyped = FlattenedAnnotationFromJSONTyped;
      function FlattenedAnnotationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "person": (0, _1.ReferencedPersonToJSON)(value.person),
          "type": (0, _1.AnnotationTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "pseudo": value.pseudo,
          "favorited": value.favorited,
          "anchor": (0, _1.ReferencedAnchorToJSON)(value.anchor),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "score": (0, _1.ScoreToJSON)(value.score),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.FlattenedAnnotationToJSON = FlattenedAnnotationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnnotations.js
  var require_FlattenedAnnotations = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAnnotations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAnnotationsToJSON = exports.FlattenedAnnotationsFromJSONTyped = exports.FlattenedAnnotationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAnnotationsFromJSON(json) {
        return FlattenedAnnotationsFromJSONTyped(json, false);
      }
      exports.FlattenedAnnotationsFromJSON = FlattenedAnnotationsFromJSON;
      function FlattenedAnnotationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedAnnotationFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAnnotationsFromJSONTyped = FlattenedAnnotationsFromJSONTyped;
      function FlattenedAnnotationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedAnnotationToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAnnotationsToJSON = FlattenedAnnotationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAsset.js
  var require_FlattenedAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAssetToJSON = exports.FlattenedAssetFromJSONTyped = exports.FlattenedAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAssetFromJSON(json) {
        return FlattenedAssetFromJSONTyped(json, false);
      }
      exports.FlattenedAssetFromJSON = FlattenedAssetFromJSON;
      function FlattenedAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "creator": json["creator"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "synced": !(0, runtime_1.exists)(json, "synced") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["synced"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "formats": (0, _1.FlattenedFormatsFromJSON)(json["formats"]),
          "preview": (0, _1.FlattenedPreviewFromJSON)(json["preview"]),
          "original": json["original"],
          "shares": !(0, runtime_1.exists)(json, "shares") ? void 0 : (0, _1.FlattenedSharesFromJSON)(json["shares"]),
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : (0, _1.FlattenedWebsitesFromJSON)(json["websites"]),
          "interacted": !(0, runtime_1.exists)(json, "interacted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["interacted"]),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : (0, _1.FlattenedTagsFromJSON)(json["tags"]),
          "sensitives": !(0, runtime_1.exists)(json, "sensitives") ? void 0 : (0, _1.FlattenedSensitivesFromJSON)(json["sensitives"]),
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.FlattenedPersonsFromJSON)(json["persons"]),
          "curated": !(0, runtime_1.exists)(json, "curated") ? void 0 : json["curated"],
          "discovered": !(0, runtime_1.exists)(json, "discovered") ? void 0 : json["discovered"],
          "activities": !(0, runtime_1.exists)(json, "activities") ? void 0 : (0, _1.FlattenedActivitiesFromJSON)(json["activities"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"],
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "hints": !(0, runtime_1.exists)(json, "hints") ? void 0 : (0, _1.FlattenedHintsFromJSON)(json["hints"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : (0, _1.FlattenedAnchorsFromJSON)(json["anchors"]),
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : (0, _1.FlattenedConversationsFromJSON)(json["conversations"])
        };
      }
      exports.FlattenedAssetFromJSONTyped = FlattenedAssetFromJSONTyped;
      function FlattenedAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": value.name,
          "creator": value.creator,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "synced": (0, _1.GroupedTimestampToJSON)(value.synced),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "formats": (0, _1.FlattenedFormatsToJSON)(value.formats),
          "preview": (0, _1.FlattenedPreviewToJSON)(value.preview),
          "original": value.original,
          "shares": (0, _1.FlattenedSharesToJSON)(value.shares),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "websites": (0, _1.FlattenedWebsitesToJSON)(value.websites),
          "interacted": (0, _1.GroupedTimestampToJSON)(value.interacted),
          "tags": (0, _1.FlattenedTagsToJSON)(value.tags),
          "sensitives": (0, _1.FlattenedSensitivesToJSON)(value.sensitives),
          "persons": (0, _1.FlattenedPersonsToJSON)(value.persons),
          "curated": value.curated,
          "discovered": value.discovered,
          "activities": (0, _1.FlattenedActivitiesToJSON)(value.activities),
          "score": (0, _1.ScoreToJSON)(value.score),
          "favorited": value.favorited,
          "pseudo": value.pseudo,
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "hints": (0, _1.FlattenedHintsToJSON)(value.hints),
          "anchors": (0, _1.FlattenedAnchorsToJSON)(value.anchors),
          "conversations": (0, _1.FlattenedConversationsToJSON)(value.conversations)
        };
      }
      exports.FlattenedAssetToJSON = FlattenedAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAssets.js
  var require_FlattenedAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedAssetsToJSON = exports.FlattenedAssetsFromJSONTyped = exports.FlattenedAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedAssetsFromJSON(json) {
        return FlattenedAssetsFromJSONTyped(json, false);
      }
      exports.FlattenedAssetsFromJSON = FlattenedAssetsFromJSON;
      function FlattenedAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": !(0, runtime_1.exists)(json, "iterable") ? void 0 : json["iterable"].map(_1.ReferencedAssetFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedAssetsFromJSONTyped = FlattenedAssetsFromJSONTyped;
      function FlattenedAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable === void 0 ? void 0 : value.iterable.map(_1.ReferencedAssetToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedAssetsToJSON = FlattenedAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversation.js
  var require_FlattenedConversation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedConversationToJSON = exports.FlattenedConversationFromJSONTyped = exports.FlattenedConversationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedConversationFromJSON(json) {
        return FlattenedConversationFromJSONTyped(json, false);
      }
      exports.FlattenedConversationFromJSON = FlattenedConversationFromJSON;
      function FlattenedConversationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : (0, _1.ApplicationFromJSON)(json["application"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "messages": (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : (0, _1.FlattenedAnchorsFromJSON)(json["anchors"]),
          "type": (0, _1.ConversationTypeEnumFromJSON)(json["type"]),
          "grounding": !(0, runtime_1.exists)(json, "grounding") ? void 0 : (0, _1.ConversationGroundingFromJSON)(json["grounding"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedConversationFromJSONTyped = FlattenedConversationFromJSONTyped;
      function FlattenedConversationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": value.name,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "favorited": value.favorited,
          "application": (0, _1.ApplicationToJSON)(value.application),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages),
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "anchors": (0, _1.FlattenedAnchorsToJSON)(value.anchors),
          "type": (0, _1.ConversationTypeEnumToJSON)(value.type),
          "grounding": (0, _1.ConversationGroundingToJSON)(value.grounding),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedConversationToJSON = FlattenedConversationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversationMessage.js
  var require_FlattenedConversationMessage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversationMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedConversationMessageToJSON = exports.FlattenedConversationMessageFromJSONTyped = exports.FlattenedConversationMessageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedConversationMessageFromJSON(json) {
        return FlattenedConversationMessageFromJSONTyped(json, false);
      }
      exports.FlattenedConversationMessageFromJSON = FlattenedConversationMessageFromJSON;
      function FlattenedConversationMessageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ModelFromJSON)(json["model"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.FragmentFormatFromJSON)(json["fragment"]),
          "conversation": (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "sentiment": !(0, runtime_1.exists)(json, "sentiment") ? void 0 : (0, _1.ConversationMessageSentimentEnumFromJSON)(json["sentiment"]),
          "role": (0, _1.QGPTConversationMessageRoleEnumFromJSON)(json["role"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"])
        };
      }
      exports.FlattenedConversationMessageFromJSONTyped = FlattenedConversationMessageFromJSONTyped;
      function FlattenedConversationMessageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "model": (0, _1.ModelToJSON)(value.model),
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "sentiment": (0, _1.ConversationMessageSentimentEnumToJSON)(value.sentiment),
          "role": (0, _1.QGPTConversationMessageRoleEnumToJSON)(value.role),
          "score": (0, _1.ScoreToJSON)(value.score),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations)
        };
      }
      exports.FlattenedConversationMessageToJSON = FlattenedConversationMessageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversationMessages.js
  var require_FlattenedConversationMessages = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversationMessages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedConversationMessagesToJSON = exports.FlattenedConversationMessagesFromJSONTyped = exports.FlattenedConversationMessagesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedConversationMessagesFromJSON(json) {
        return FlattenedConversationMessagesFromJSONTyped(json, false);
      }
      exports.FlattenedConversationMessagesFromJSON = FlattenedConversationMessagesFromJSON;
      function FlattenedConversationMessagesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedConversationMessageFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedConversationMessagesFromJSONTyped = FlattenedConversationMessagesFromJSONTyped;
      function FlattenedConversationMessagesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedConversationMessageToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedConversationMessagesToJSON = FlattenedConversationMessagesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversations.js
  var require_FlattenedConversations = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedConversations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedConversationsToJSON = exports.FlattenedConversationsFromJSONTyped = exports.FlattenedConversationsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedConversationsFromJSON(json) {
        return FlattenedConversationsFromJSONTyped(json, false);
      }
      exports.FlattenedConversationsFromJSON = FlattenedConversationsFromJSON;
      function FlattenedConversationsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedConversationFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedConversationsFromJSONTyped = FlattenedConversationsFromJSONTyped;
      function FlattenedConversationsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedConversationToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedConversationsToJSON = FlattenedConversationsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedDistribution.js
  var require_FlattenedDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedDistributionToJSON = exports.FlattenedDistributionFromJSONTyped = exports.FlattenedDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedDistributionFromJSON(json) {
        return FlattenedDistributionFromJSONTyped(json, false);
      }
      exports.FlattenedDistributionFromJSON = FlattenedDistributionFromJSON;
      function FlattenedDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "share": json["share"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mailgun": !(0, runtime_1.exists)(json, "mailgun") ? void 0 : (0, _1.MailgunDistributionFromJSON)(json["mailgun"]),
          "github": !(0, runtime_1.exists)(json, "github") ? void 0 : (0, _1.GitHubDistributionFromJSON)(json["github"])
        };
      }
      exports.FlattenedDistributionFromJSONTyped = FlattenedDistributionFromJSONTyped;
      function FlattenedDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "share": value.share,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mailgun": (0, _1.MailgunDistributionToJSON)(value.mailgun),
          "github": (0, _1.GitHubDistributionToJSON)(value.github)
        };
      }
      exports.FlattenedDistributionToJSON = FlattenedDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedDistributions.js
  var require_FlattenedDistributions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedDistributions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedDistributionsToJSON = exports.FlattenedDistributionsFromJSONTyped = exports.FlattenedDistributionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedDistributionsFromJSON(json) {
        return FlattenedDistributionsFromJSONTyped(json, false);
      }
      exports.FlattenedDistributionsFromJSON = FlattenedDistributionsFromJSON;
      function FlattenedDistributionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedDistributionFromJSON)
        };
      }
      exports.FlattenedDistributionsFromJSONTyped = FlattenedDistributionsFromJSONTyped;
      function FlattenedDistributionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedDistributionToJSON)
        };
      }
      exports.FlattenedDistributionsToJSON = FlattenedDistributionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedFormat.js
  var require_FlattenedFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedFormatToJSON = exports.FlattenedFormatFromJSONTyped = exports.FlattenedFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedFormatFromJSON(json) {
        return FlattenedFormatFromJSONTyped(json, false);
      }
      exports.FlattenedFormatFromJSON = FlattenedFormatFromJSON;
      function FlattenedFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "creator": json["creator"],
          "classification": (0, _1.ClassificationFromJSON)(json["classification"]),
          "icon": !(0, runtime_1.exists)(json, "icon") ? void 0 : json["icon"],
          "role": (0, _1.RoleFromJSON)(json["role"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "asset": json["asset"],
          "bytes": (0, _1.ByteDescriptorFromJSON)(json["bytes"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "synced": !(0, runtime_1.exists)(json, "synced") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["synced"]),
          "cloud": !(0, runtime_1.exists)(json, "cloud") ? void 0 : json["cloud"],
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.FragmentFormatFromJSON)(json["fragment"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.FileFormatFromJSON)(json["file"]),
          "analysis": !(0, runtime_1.exists)(json, "analysis") ? void 0 : (0, _1.FlattenedAnalysisFromJSON)(json["analysis"]),
          "relationship": !(0, runtime_1.exists)(json, "relationship") ? void 0 : (0, _1.RelationshipFromJSON)(json["relationship"]),
          "activities": !(0, runtime_1.exists)(json, "activities") ? void 0 : (0, _1.FlattenedActivitiesFromJSON)(json["activities"])
        };
      }
      exports.FlattenedFormatFromJSONTyped = FlattenedFormatFromJSONTyped;
      function FlattenedFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "creator": value.creator,
          "classification": (0, _1.ClassificationToJSON)(value.classification),
          "icon": value.icon,
          "role": (0, _1.RoleToJSON)(value.role),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "asset": value.asset,
          "bytes": (0, _1.ByteDescriptorToJSON)(value.bytes),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "synced": (0, _1.GroupedTimestampToJSON)(value.synced),
          "cloud": value.cloud,
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment),
          "file": (0, _1.FileFormatToJSON)(value.file),
          "analysis": (0, _1.FlattenedAnalysisToJSON)(value.analysis),
          "relationship": (0, _1.RelationshipToJSON)(value.relationship),
          "activities": (0, _1.FlattenedActivitiesToJSON)(value.activities)
        };
      }
      exports.FlattenedFormatToJSON = FlattenedFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedFormats.js
  var require_FlattenedFormats = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedFormats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedFormatsToJSON = exports.FlattenedFormatsFromJSONTyped = exports.FlattenedFormatsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedFormatsFromJSON(json) {
        return FlattenedFormatsFromJSONTyped(json, false);
      }
      exports.FlattenedFormatsFromJSON = FlattenedFormatsFromJSON;
      function FlattenedFormatsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedFormatFromJSON)
        };
      }
      exports.FlattenedFormatsFromJSONTyped = FlattenedFormatsFromJSONTyped;
      function FlattenedFormatsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedFormatToJSON)
        };
      }
      exports.FlattenedFormatsToJSON = FlattenedFormatsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedHint.js
  var require_FlattenedHint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedHint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedHintToJSON = exports.FlattenedHintFromJSONTyped = exports.FlattenedHintFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedHintFromJSON(json) {
        return FlattenedHintFromJSONTyped(json, false);
      }
      exports.FlattenedHintFromJSON = FlattenedHintFromJSON;
      function FlattenedHintFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "type": (0, _1.HintTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedHintFromJSONTyped = FlattenedHintFromJSONTyped;
      function FlattenedHintToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "type": (0, _1.HintTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedHintToJSON = FlattenedHintToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedHints.js
  var require_FlattenedHints = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedHints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedHintsToJSON = exports.FlattenedHintsFromJSONTyped = exports.FlattenedHintsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedHintsFromJSON(json) {
        return FlattenedHintsFromJSONTyped(json, false);
      }
      exports.FlattenedHintsFromJSON = FlattenedHintsFromJSON;
      function FlattenedHintsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedHintFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedHintsFromJSONTyped = FlattenedHintsFromJSONTyped;
      function FlattenedHintsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedHintToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedHintsToJSON = FlattenedHintsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedImageAnalysis.js
  var require_FlattenedImageAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedImageAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedImageAnalysisToJSON = exports.FlattenedImageAnalysisFromJSONTyped = exports.FlattenedImageAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedImageAnalysisFromJSON(json) {
        return FlattenedImageAnalysisFromJSONTyped(json, false);
      }
      exports.FlattenedImageAnalysisFromJSON = FlattenedImageAnalysisFromJSON;
      function FlattenedImageAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "ocr": !(0, runtime_1.exists)(json, "ocr") ? void 0 : (0, _1.FlattenedOCRAnalysisFromJSON)(json["ocr"]),
          "analysis": json["analysis"]
        };
      }
      exports.FlattenedImageAnalysisFromJSONTyped = FlattenedImageAnalysisFromJSONTyped;
      function FlattenedImageAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "ocr": (0, _1.FlattenedOCRAnalysisToJSON)(value.ocr),
          "analysis": value.analysis
        };
      }
      exports.FlattenedImageAnalysisToJSON = FlattenedImageAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedOCRAnalysis.js
  var require_FlattenedOCRAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedOCRAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedOCRAnalysisToJSON = exports.FlattenedOCRAnalysisFromJSONTyped = exports.FlattenedOCRAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedOCRAnalysisFromJSON(json) {
        return FlattenedOCRAnalysisFromJSONTyped(json, false);
      }
      exports.FlattenedOCRAnalysisFromJSON = FlattenedOCRAnalysisFromJSON;
      function FlattenedOCRAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "raw": (0, _1.ReferencedFormatFromJSON)(json["raw"]),
          "hocr": (0, _1.ReferencedFormatFromJSON)(json["hocr"]),
          "model": (0, _1.ModelFromJSON)(json["model"]),
          "image": json["image"]
        };
      }
      exports.FlattenedOCRAnalysisFromJSONTyped = FlattenedOCRAnalysisFromJSONTyped;
      function FlattenedOCRAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "raw": (0, _1.ReferencedFormatToJSON)(value.raw),
          "hocr": (0, _1.ReferencedFormatToJSON)(value.hocr),
          "model": (0, _1.ModelToJSON)(value.model),
          "image": value.image
        };
      }
      exports.FlattenedOCRAnalysisToJSON = FlattenedOCRAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPerson.js
  var require_FlattenedPerson = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPerson.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedPersonToJSON = exports.FlattenedPersonFromJSONTyped = exports.FlattenedPersonFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedPersonFromJSON(json) {
        return FlattenedPersonFromJSONTyped(json, false);
      }
      exports.FlattenedPersonFromJSON = FlattenedPersonFromJSON;
      function FlattenedPersonFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "type": (0, _1.PersonTypeFromJSON)(json["type"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "access": !(0, runtime_1.exists)(json, "access") ? void 0 : (0, runtime_1.mapValues)(json["access"], _1.PersonAccessFromJSON),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : (0, _1.FlattenedTagsFromJSON)(json["tags"]),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : (0, _1.FlattenedWebsitesFromJSON)(json["websites"]),
          "models": !(0, runtime_1.exists)(json, "models") ? void 0 : (0, runtime_1.mapValues)(json["models"], _1.PersonModelFromJSON),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedPersonFromJSONTyped = FlattenedPersonFromJSONTyped;
      function FlattenedPersonToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "type": (0, _1.PersonTypeToJSON)(value.type),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "interactions": value.interactions,
          "access": value.access === void 0 ? void 0 : (0, runtime_1.mapValues)(value.access, _1.PersonAccessToJSON),
          "tags": (0, _1.FlattenedTagsToJSON)(value.tags),
          "websites": (0, _1.FlattenedWebsitesToJSON)(value.websites),
          "models": value.models === void 0 ? void 0 : (0, runtime_1.mapValues)(value.models, _1.PersonModelToJSON),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedPersonToJSON = FlattenedPersonToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPersons.js
  var require_FlattenedPersons = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPersons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedPersonsToJSON = exports.FlattenedPersonsFromJSONTyped = exports.FlattenedPersonsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedPersonsFromJSON(json) {
        return FlattenedPersonsFromJSONTyped(json, false);
      }
      exports.FlattenedPersonsFromJSON = FlattenedPersonsFromJSON;
      function FlattenedPersonsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedPersonFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedPersonsFromJSONTyped = FlattenedPersonsFromJSONTyped;
      function FlattenedPersonsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedPersonToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedPersonsToJSON = FlattenedPersonsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPreview.js
  var require_FlattenedPreview = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedPreview.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedPreviewToJSON = exports.FlattenedPreviewFromJSONTyped = exports.FlattenedPreviewFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedPreviewFromJSON(json) {
        return FlattenedPreviewFromJSONTyped(json, false);
      }
      exports.FlattenedPreviewFromJSON = FlattenedPreviewFromJSON;
      function FlattenedPreviewFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "base": json["base"],
          "overlay": !(0, runtime_1.exists)(json, "overlay") ? void 0 : json["overlay"]
        };
      }
      exports.FlattenedPreviewFromJSONTyped = FlattenedPreviewFromJSONTyped;
      function FlattenedPreviewToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "base": value.base,
          "overlay": value.overlay
        };
      }
      exports.FlattenedPreviewToJSON = FlattenedPreviewToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedSensitive.js
  var require_FlattenedSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedSensitiveToJSON = exports.FlattenedSensitiveFromJSONTyped = exports.FlattenedSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedSensitiveFromJSON(json) {
        return FlattenedSensitiveFromJSONTyped(json, false);
      }
      exports.FlattenedSensitiveFromJSON = FlattenedSensitiveFromJSON;
      function FlattenedSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "asset": (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "text": json["text"],
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": (0, _1.SensitiveCategoryEnumFromJSON)(json["category"]),
          "severity": (0, _1.SensitiveSeverityEnumFromJSON)(json["severity"]),
          "name": json["name"],
          "description": json["description"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SensitiveMetadataFromJSON)(json["metadata"]),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedSensitiveFromJSONTyped = FlattenedSensitiveFromJSONTyped;
      function FlattenedSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.SensitiveCategoryEnumToJSON)(value.category),
          "severity": (0, _1.SensitiveSeverityEnumToJSON)(value.severity),
          "name": value.name,
          "description": value.description,
          "metadata": (0, _1.SensitiveMetadataToJSON)(value.metadata),
          "interactions": value.interactions,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedSensitiveToJSON = FlattenedSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedSensitives.js
  var require_FlattenedSensitives = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedSensitives.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedSensitivesToJSON = exports.FlattenedSensitivesFromJSONTyped = exports.FlattenedSensitivesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedSensitivesFromJSON(json) {
        return FlattenedSensitivesFromJSONTyped(json, false);
      }
      exports.FlattenedSensitivesFromJSON = FlattenedSensitivesFromJSON;
      function FlattenedSensitivesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedSensitiveFromJSON),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedSensitivesFromJSONTyped = FlattenedSensitivesFromJSONTyped;
      function FlattenedSensitivesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedSensitiveToJSON),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedSensitivesToJSON = FlattenedSensitivesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedShare.js
  var require_FlattenedShare = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedShare.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedShareToJSON = exports.FlattenedShareFromJSONTyped = exports.FlattenedShareFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedShareFromJSON(json) {
        return FlattenedShareFromJSONTyped(json, false);
      }
      exports.FlattenedShareFromJSON = FlattenedShareFromJSON;
      function FlattenedShareFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : json["user"],
          "link": json["link"],
          "access": (0, _1.AccessEnumFromJSON)(json["access"]),
          "accessors": (0, _1.AccessorsFromJSON)(json["accessors"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "_short": json["short"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "distributions": !(0, runtime_1.exists)(json, "distributions") ? void 0 : (0, _1.FlattenedDistributionsFromJSON)(json["distributions"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedShareFromJSONTyped = FlattenedShareFromJSONTyped;
      function FlattenedShareToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "asset": value.asset,
          "user": value.user,
          "link": value.link,
          "access": (0, _1.AccessEnumToJSON)(value.access),
          "accessors": (0, _1.AccessorsToJSON)(value.accessors),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "short": value._short,
          "name": value.name,
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "distributions": (0, _1.FlattenedDistributionsToJSON)(value.distributions),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedShareToJSON = FlattenedShareToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedShares.js
  var require_FlattenedShares = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedShares.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedSharesToJSON = exports.FlattenedSharesFromJSONTyped = exports.FlattenedSharesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedSharesFromJSON(json) {
        return FlattenedSharesFromJSONTyped(json, false);
      }
      exports.FlattenedSharesFromJSON = FlattenedSharesFromJSON;
      function FlattenedSharesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.FlattenedShareFromJSON),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedSharesFromJSONTyped = FlattenedSharesFromJSONTyped;
      function FlattenedSharesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.FlattenedShareToJSON),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedSharesToJSON = FlattenedSharesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedTag.js
  var require_FlattenedTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedTagToJSON = exports.FlattenedTagFromJSONTyped = exports.FlattenedTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedTagFromJSON(json) {
        return FlattenedTagFromJSONTyped(json, false);
      }
      exports.FlattenedTagFromJSON = FlattenedTagFromJSON;
      function FlattenedTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "text": json["text"],
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "category": (0, _1.TagCategoryEnumFromJSON)(json["category"]),
          "relationship": !(0, runtime_1.exists)(json, "relationship") ? void 0 : (0, _1.RelationshipFromJSON)(json["relationship"]),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.FlattenedPersonsFromJSON)(json["persons"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedTagFromJSONTyped = FlattenedTagFromJSONTyped;
      function FlattenedTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "text": value.text,
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "category": (0, _1.TagCategoryEnumToJSON)(value.category),
          "relationship": (0, _1.RelationshipToJSON)(value.relationship),
          "interactions": value.interactions,
          "persons": (0, _1.FlattenedPersonsToJSON)(value.persons),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedTagToJSON = FlattenedTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedTags.js
  var require_FlattenedTags = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedTags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedTagsToJSON = exports.FlattenedTagsFromJSONTyped = exports.FlattenedTagsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedTagsFromJSON(json) {
        return FlattenedTagsFromJSONTyped(json, false);
      }
      exports.FlattenedTagsFromJSON = FlattenedTagsFromJSON;
      function FlattenedTagsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedTagFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedTagsFromJSONTyped = FlattenedTagsFromJSONTyped;
      function FlattenedTagsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedTagToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedTagsToJSON = FlattenedTagsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedUserProfile.js
  var require_FlattenedUserProfile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedUserProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedUserProfileToJSON = exports.FlattenedUserProfileFromJSONTyped = exports.FlattenedUserProfileFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedUserProfileFromJSON(json) {
        return FlattenedUserProfileFromJSONTyped(json, false);
      }
      exports.FlattenedUserProfileFromJSON = FlattenedUserProfileFromJSON;
      function FlattenedUserProfileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "username": !(0, runtime_1.exists)(json, "username") ? void 0 : json["username"],
          "picture": !(0, runtime_1.exists)(json, "picture") ? void 0 : json["picture"],
          "vanityname": !(0, runtime_1.exists)(json, "vanityname") ? void 0 : json["vanityname"]
        };
      }
      exports.FlattenedUserProfileFromJSONTyped = FlattenedUserProfileFromJSONTyped;
      function FlattenedUserProfileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "email": value.email,
          "name": value.name,
          "username": value.username,
          "picture": value.picture,
          "vanityname": value.vanityname
        };
      }
      exports.FlattenedUserProfileToJSON = FlattenedUserProfileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedWebsite.js
  var require_FlattenedWebsite = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedWebsite.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedWebsiteToJSON = exports.FlattenedWebsiteFromJSONTyped = exports.FlattenedWebsiteFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedWebsiteFromJSON(json) {
        return FlattenedWebsiteFromJSONTyped(json, false);
      }
      exports.FlattenedWebsiteFromJSON = FlattenedWebsiteFromJSON;
      function FlattenedWebsiteFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "name": json["name"],
          "url": json["url"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.FlattenedPersonsFromJSON)(json["persons"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedWebsiteFromJSONTyped = FlattenedWebsiteFromJSONTyped;
      function FlattenedWebsiteToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "name": value.name,
          "url": value.url,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "interactions": value.interactions,
          "persons": (0, _1.FlattenedPersonsToJSON)(value.persons),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedWebsiteToJSON = FlattenedWebsiteToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedWebsites.js
  var require_FlattenedWebsites = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FlattenedWebsites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FlattenedWebsitesToJSON = exports.FlattenedWebsitesFromJSONTyped = exports.FlattenedWebsitesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FlattenedWebsitesFromJSON(json) {
        return FlattenedWebsitesFromJSONTyped(json, false);
      }
      exports.FlattenedWebsitesFromJSON = FlattenedWebsitesFromJSON;
      function FlattenedWebsitesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ReferencedWebsiteFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.FlattenedWebsitesFromJSONTyped = FlattenedWebsitesFromJSONTyped;
      function FlattenedWebsitesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ReferencedWebsiteToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.FlattenedWebsitesToJSON = FlattenedWebsitesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Font.js
  var require_Font = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Font.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FontToJSON = exports.FontFromJSONTyped = exports.FontFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FontFromJSON(json) {
        return FontFromJSONTyped(json, false);
      }
      exports.FontFromJSON = FontFromJSON;
      function FontFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "size": json["size"]
        };
      }
      exports.FontFromJSONTyped = FontFromJSONTyped;
      function FontToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "size": value.size
        };
      }
      exports.FontToJSON = FontToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Format.js
  var require_Format = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Format.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatToJSON = exports.FormatFromJSONTyped = exports.FormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FormatFromJSON(json) {
        return FormatFromJSONTyped(json, false);
      }
      exports.FormatFromJSON = FormatFromJSON;
      function FormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "creator": json["creator"],
          "classification": (0, _1.ClassificationFromJSON)(json["classification"]),
          "icon": !(0, runtime_1.exists)(json, "icon") ? void 0 : json["icon"],
          "role": (0, _1.RoleFromJSON)(json["role"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "asset": (0, _1.FlattenedAssetFromJSON)(json["asset"]),
          "bytes": (0, _1.ByteDescriptorFromJSON)(json["bytes"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "synced": !(0, runtime_1.exists)(json, "synced") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["synced"]),
          "cloud": !(0, runtime_1.exists)(json, "cloud") ? void 0 : json["cloud"],
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.FragmentFormatFromJSON)(json["fragment"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.FileFormatFromJSON)(json["file"]),
          "analysis": !(0, runtime_1.exists)(json, "analysis") ? void 0 : (0, _1.AnalysisFromJSON)(json["analysis"]),
          "relationship": !(0, runtime_1.exists)(json, "relationship") ? void 0 : (0, _1.RelationshipFromJSON)(json["relationship"]),
          "activities": !(0, runtime_1.exists)(json, "activities") ? void 0 : (0, _1.ActivitiesFromJSON)(json["activities"])
        };
      }
      exports.FormatFromJSONTyped = FormatFromJSONTyped;
      function FormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "creator": value.creator,
          "classification": (0, _1.ClassificationToJSON)(value.classification),
          "icon": value.icon,
          "role": (0, _1.RoleToJSON)(value.role),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "asset": (0, _1.FlattenedAssetToJSON)(value.asset),
          "bytes": (0, _1.ByteDescriptorToJSON)(value.bytes),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "synced": (0, _1.GroupedTimestampToJSON)(value.synced),
          "cloud": value.cloud,
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment),
          "file": (0, _1.FileFormatToJSON)(value.file),
          "analysis": (0, _1.AnalysisToJSON)(value.analysis),
          "relationship": (0, _1.RelationshipToJSON)(value.relationship),
          "activities": (0, _1.ActivitiesToJSON)(value.activities)
        };
      }
      exports.FormatToJSON = FormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FormatMetric.js
  var require_FormatMetric = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FormatMetric.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatMetricToJSON = exports.FormatMetricFromJSONTyped = exports.FormatMetricFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FormatMetricFromJSON(json) {
        return FormatMetricFromJSONTyped(json, false);
      }
      exports.FormatMetricFromJSON = FormatMetricFromJSON;
      function FormatMetricFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "generic": (0, _1.ClassificationGenericEnumFromJSON)(json["generic"]),
          "specific": (0, _1.ClassificationSpecificEnumFromJSON)(json["specific"]),
          "identifiers": json["identifiers"]
        };
      }
      exports.FormatMetricFromJSONTyped = FormatMetricFromJSONTyped;
      function FormatMetricToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "generic": (0, _1.ClassificationGenericEnumToJSON)(value.generic),
          "specific": (0, _1.ClassificationSpecificEnumToJSON)(value.specific),
          "identifiers": value.identifiers
        };
      }
      exports.FormatMetricToJSON = FormatMetricToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FormatReclassification.js
  var require_FormatReclassification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FormatReclassification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatReclassificationToJSON = exports.FormatReclassificationFromJSONTyped = exports.FormatReclassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FormatReclassificationFromJSON(json) {
        return FormatReclassificationFromJSONTyped(json, false);
      }
      exports.FormatReclassificationFromJSON = FormatReclassificationFromJSON;
      function FormatReclassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "ext": (0, _1.ClassificationSpecificEnumFromJSON)(json["ext"]),
          "format": (0, _1.FormatFromJSON)(json["format"])
        };
      }
      exports.FormatReclassificationFromJSONTyped = FormatReclassificationFromJSONTyped;
      function FormatReclassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "ext": (0, _1.ClassificationSpecificEnumToJSON)(value.ext),
          "format": (0, _1.FormatToJSON)(value.format)
        };
      }
      exports.FormatReclassificationToJSON = FormatReclassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Formats.js
  var require_Formats = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatsToJSON = exports.FormatsFromJSONTyped = exports.FormatsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FormatsFromJSON(json) {
        return FormatsFromJSONTyped(json, false);
      }
      exports.FormatsFromJSON = FormatsFromJSON;
      function FormatsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.FormatFromJSON)
        };
      }
      exports.FormatsFromJSONTyped = FormatsFromJSONTyped;
      function FormatsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.FormatToJSON)
        };
      }
      exports.FormatsToJSON = FormatsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FormatsMetrics.js
  var require_FormatsMetrics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FormatsMetrics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatsMetricsToJSON = exports.FormatsMetricsFromJSONTyped = exports.FormatsMetricsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FormatsMetricsFromJSON(json) {
        return FormatsMetricsFromJSONTyped(json, false);
      }
      exports.FormatsMetricsFromJSON = FormatsMetricsFromJSON;
      function FormatsMetricsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.FormatMetricFromJSON)
        };
      }
      exports.FormatsMetricsFromJSONTyped = FormatsMetricsFromJSONTyped;
      function FormatsMetricsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.FormatMetricToJSON)
        };
      }
      exports.FormatsMetricsToJSON = FormatsMetricsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FragmentFormat.js
  var require_FragmentFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FragmentFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FragmentFormatToJSON = exports.FragmentFormatFromJSONTyped = exports.FragmentFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FragmentFormatFromJSON(json) {
        return FragmentFormatFromJSONTyped(json, false);
      }
      exports.FragmentFormatFromJSON = FragmentFormatFromJSON;
      function FragmentFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "string": !(0, runtime_1.exists)(json, "string") ? void 0 : (0, _1.TransferableStringFromJSON)(json["string"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.TransferableBytesFromJSON)(json["bytes"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.FragmentMetadataFromJSON)(json["metadata"])
        };
      }
      exports.FragmentFormatFromJSONTyped = FragmentFormatFromJSONTyped;
      function FragmentFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "string": (0, _1.TransferableStringToJSON)(value.string),
          "bytes": (0, _1.TransferableBytesToJSON)(value.bytes),
          "metadata": (0, _1.FragmentMetadataToJSON)(value.metadata)
        };
      }
      exports.FragmentFormatToJSON = FragmentFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/FragmentMetadata.js
  var require_FragmentMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/FragmentMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FragmentMetadataToJSON = exports.FragmentMetadataFromJSONTyped = exports.FragmentMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function FragmentMetadataFromJSON(json) {
        return FragmentMetadataFromJSONTyped(json, false);
      }
      exports.FragmentMetadataFromJSON = FragmentMetadataFromJSON;
      function FragmentMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "ext": !(0, runtime_1.exists)(json, "ext") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["ext"])
        };
      }
      exports.FragmentMetadataFromJSONTyped = FragmentMetadataFromJSONTyped;
      function FragmentMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "ext": (0, _1.ClassificationSpecificEnumToJSON)(value.ext)
        };
      }
      exports.FragmentMetadataToJSON = FragmentMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GitHubDistribution.js
  var require_GitHubDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GitHubDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GitHubDistributionToJSON = exports.GitHubDistributionFromJSONTyped = exports.GitHubDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GitHubDistributionFromJSON(json) {
        return GitHubDistributionFromJSONTyped(json, false);
      }
      exports.GitHubDistributionFromJSON = GitHubDistributionFromJSON;
      function GitHubDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "gist": !(0, runtime_1.exists)(json, "gist") ? void 0 : (0, _1.GitHubGistDistributionFromJSON)(json["gist"])
        };
      }
      exports.GitHubDistributionFromJSONTyped = GitHubDistributionFromJSONTyped;
      function GitHubDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "gist": (0, _1.GitHubGistDistributionToJSON)(value.gist)
        };
      }
      exports.GitHubDistributionToJSON = GitHubDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GitHubGistDistribution.js
  var require_GitHubGistDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GitHubGistDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GitHubGistDistributionToJSON = exports.GitHubGistDistributionFromJSONTyped = exports.GitHubGistDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GitHubGistDistributionFromJSON(json) {
        return GitHubGistDistributionFromJSONTyped(json, false);
      }
      exports.GitHubGistDistributionFromJSON = GitHubGistDistributionFromJSON;
      function GitHubGistDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "recipients": (0, _1.RecipientsFromJSON)(json["recipients"]),
          "_public": json["public"],
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "name": json["name"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "githubId": json["github_id"],
          "url": json["url"]
        };
      }
      exports.GitHubGistDistributionFromJSONTyped = GitHubGistDistributionFromJSONTyped;
      function GitHubGistDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "recipients": (0, _1.RecipientsToJSON)(value.recipients),
          "public": value._public,
          "description": value.description,
          "name": value.name,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "github_id": value.githubId,
          "url": value.url
        };
      }
      exports.GitHubGistDistributionToJSON = GitHubGistDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageDescriptiveStatistics.js
  var require_GraphicalImageDescriptiveStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageDescriptiveStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalImageDescriptiveStatisticsToJSON = exports.GraphicalImageDescriptiveStatisticsFromJSONTyped = exports.GraphicalImageDescriptiveStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalImageDescriptiveStatisticsFromJSON(json) {
        return GraphicalImageDescriptiveStatisticsFromJSONTyped(json, false);
      }
      exports.GraphicalImageDescriptiveStatisticsFromJSON = GraphicalImageDescriptiveStatisticsFromJSON;
      function GraphicalImageDescriptiveStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "width": json["width"],
          "height": json["height"],
          "channels": json["channels"],
          "asset": json["asset"],
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : json["user"],
          "created": json["created"],
          "os": json["os"]
        };
      }
      exports.GraphicalImageDescriptiveStatisticsFromJSONTyped = GraphicalImageDescriptiveStatisticsFromJSONTyped;
      function GraphicalImageDescriptiveStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "width": value.width,
          "height": value.height,
          "channels": value.channels,
          "asset": value.asset,
          "user": value.user,
          "created": value.created,
          "os": value.os
        };
      }
      exports.GraphicalImageDescriptiveStatisticsToJSON = GraphicalImageDescriptiveStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageProcessing.js
  var require_GraphicalImageProcessing = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageProcessing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalImageProcessingToJSON = exports.GraphicalImageProcessingFromJSONTyped = exports.GraphicalImageProcessingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalImageProcessingFromJSON(json) {
        return GraphicalImageProcessingFromJSONTyped(json, false);
      }
      exports.GraphicalImageProcessingFromJSON = GraphicalImageProcessingFromJSON;
      function GraphicalImageProcessingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "statistics": !(0, runtime_1.exists)(json, "statistics") ? void 0 : (0, _1.GraphicalImageStatisticsFromJSON)(json["statistics"])
        };
      }
      exports.GraphicalImageProcessingFromJSONTyped = GraphicalImageProcessingFromJSONTyped;
      function GraphicalImageProcessingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "statistics": (0, _1.GraphicalImageStatisticsToJSON)(value.statistics)
        };
      }
      exports.GraphicalImageProcessingToJSON = GraphicalImageProcessingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageStatistics.js
  var require_GraphicalImageStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalImageStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalImageStatisticsToJSON = exports.GraphicalImageStatisticsFromJSONTyped = exports.GraphicalImageStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalImageStatisticsFromJSON(json) {
        return GraphicalImageStatisticsFromJSONTyped(json, false);
      }
      exports.GraphicalImageStatisticsFromJSON = GraphicalImageStatisticsFromJSON;
      function GraphicalImageStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "descriptive": !(0, runtime_1.exists)(json, "descriptive") ? void 0 : (0, _1.GraphicalImageDescriptiveStatisticsFromJSON)(json["descriptive"])
        };
      }
      exports.GraphicalImageStatisticsFromJSONTyped = GraphicalImageStatisticsFromJSONTyped;
      function GraphicalImageStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "descriptive": (0, _1.GraphicalImageDescriptiveStatisticsToJSON)(value.descriptive)
        };
      }
      exports.GraphicalImageStatisticsToJSON = GraphicalImageStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalMachineLearningProcessingEvent.js
  var require_GraphicalMachineLearningProcessingEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalMachineLearningProcessingEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalMachineLearningProcessingEventToJSON = exports.GraphicalMachineLearningProcessingEventFromJSONTyped = exports.GraphicalMachineLearningProcessingEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalMachineLearningProcessingEventFromJSON(json) {
        return GraphicalMachineLearningProcessingEventFromJSONTyped(json, false);
      }
      exports.GraphicalMachineLearningProcessingEventFromJSON = GraphicalMachineLearningProcessingEventFromJSON;
      function GraphicalMachineLearningProcessingEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "ocr": !(0, runtime_1.exists)(json, "ocr") ? void 0 : (0, _1.GraphicalOCRProcessingFromJSON)(json["ocr"]),
          "image": !(0, runtime_1.exists)(json, "image") ? void 0 : (0, _1.GraphicalImageProcessingFromJSON)(json["image"]),
          "svg": !(0, runtime_1.exists)(json, "svg") ? void 0 : (0, _1.GraphicalSVGStatisticsFromJSON)(json["svg"])
        };
      }
      exports.GraphicalMachineLearningProcessingEventFromJSONTyped = GraphicalMachineLearningProcessingEventFromJSONTyped;
      function GraphicalMachineLearningProcessingEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "ocr": (0, _1.GraphicalOCRProcessingToJSON)(value.ocr),
          "image": (0, _1.GraphicalImageProcessingToJSON)(value.image),
          "svg": (0, _1.GraphicalSVGStatisticsToJSON)(value.svg)
        };
      }
      exports.GraphicalMachineLearningProcessingEventToJSON = GraphicalMachineLearningProcessingEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRDescriptiveStatistics.js
  var require_GraphicalOCRDescriptiveStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRDescriptiveStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalOCRDescriptiveStatisticsToJSON = exports.GraphicalOCRDescriptiveStatisticsFromJSONTyped = exports.GraphicalOCRDescriptiveStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalOCRDescriptiveStatisticsFromJSON(json) {
        return GraphicalOCRDescriptiveStatisticsFromJSONTyped(json, false);
      }
      exports.GraphicalOCRDescriptiveStatisticsFromJSON = GraphicalOCRDescriptiveStatisticsFromJSON;
      function GraphicalOCRDescriptiveStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "user": json["user"],
          "model": json["model"],
          "created": json["created"],
          "os": json["os"],
          "confidence": (0, _1.GraphicalOCRDescriptiveStatisticsConfidenceFromJSON)(json["confidence"]),
          "duration": json["duration"]
        };
      }
      exports.GraphicalOCRDescriptiveStatisticsFromJSONTyped = GraphicalOCRDescriptiveStatisticsFromJSONTyped;
      function GraphicalOCRDescriptiveStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "user": value.user,
          "model": value.model,
          "created": value.created,
          "os": value.os,
          "confidence": (0, _1.GraphicalOCRDescriptiveStatisticsConfidenceToJSON)(value.confidence),
          "duration": value.duration
        };
      }
      exports.GraphicalOCRDescriptiveStatisticsToJSON = GraphicalOCRDescriptiveStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRDescriptiveStatisticsConfidence.js
  var require_GraphicalOCRDescriptiveStatisticsConfidence = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRDescriptiveStatisticsConfidence.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalOCRDescriptiveStatisticsConfidenceToJSON = exports.GraphicalOCRDescriptiveStatisticsConfidenceFromJSONTyped = exports.GraphicalOCRDescriptiveStatisticsConfidenceFromJSON = void 0;
      function GraphicalOCRDescriptiveStatisticsConfidenceFromJSON(json) {
        return GraphicalOCRDescriptiveStatisticsConfidenceFromJSONTyped(json, false);
      }
      exports.GraphicalOCRDescriptiveStatisticsConfidenceFromJSON = GraphicalOCRDescriptiveStatisticsConfidenceFromJSON;
      function GraphicalOCRDescriptiveStatisticsConfidenceFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "mean": json["mean"]
        };
      }
      exports.GraphicalOCRDescriptiveStatisticsConfidenceFromJSONTyped = GraphicalOCRDescriptiveStatisticsConfidenceFromJSONTyped;
      function GraphicalOCRDescriptiveStatisticsConfidenceToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "mean": value.mean
        };
      }
      exports.GraphicalOCRDescriptiveStatisticsConfidenceToJSON = GraphicalOCRDescriptiveStatisticsConfidenceToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRProcessing.js
  var require_GraphicalOCRProcessing = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRProcessing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalOCRProcessingToJSON = exports.GraphicalOCRProcessingFromJSONTyped = exports.GraphicalOCRProcessingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalOCRProcessingFromJSON(json) {
        return GraphicalOCRProcessingFromJSONTyped(json, false);
      }
      exports.GraphicalOCRProcessingFromJSON = GraphicalOCRProcessingFromJSON;
      function GraphicalOCRProcessingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "statistics": !(0, runtime_1.exists)(json, "statistics") ? void 0 : (0, _1.GraphicalOCRStatisticsFromJSON)(json["statistics"])
        };
      }
      exports.GraphicalOCRProcessingFromJSONTyped = GraphicalOCRProcessingFromJSONTyped;
      function GraphicalOCRProcessingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "statistics": (0, _1.GraphicalOCRStatisticsToJSON)(value.statistics)
        };
      }
      exports.GraphicalOCRProcessingToJSON = GraphicalOCRProcessingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRStatistics.js
  var require_GraphicalOCRStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalOCRStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalOCRStatisticsToJSON = exports.GraphicalOCRStatisticsFromJSONTyped = exports.GraphicalOCRStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalOCRStatisticsFromJSON(json) {
        return GraphicalOCRStatisticsFromJSONTyped(json, false);
      }
      exports.GraphicalOCRStatisticsFromJSON = GraphicalOCRStatisticsFromJSON;
      function GraphicalOCRStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "descriptive": !(0, runtime_1.exists)(json, "descriptive") ? void 0 : (0, _1.GraphicalOCRDescriptiveStatisticsFromJSON)(json["descriptive"])
        };
      }
      exports.GraphicalOCRStatisticsFromJSONTyped = GraphicalOCRStatisticsFromJSONTyped;
      function GraphicalOCRStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "descriptive": (0, _1.GraphicalOCRDescriptiveStatisticsToJSON)(value.descriptive)
        };
      }
      exports.GraphicalOCRStatisticsToJSON = GraphicalOCRStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalSVGStatistics.js
  var require_GraphicalSVGStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GraphicalSVGStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GraphicalSVGStatisticsToJSON = exports.GraphicalSVGStatisticsFromJSONTyped = exports.GraphicalSVGStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GraphicalSVGStatisticsFromJSON(json) {
        return GraphicalSVGStatisticsFromJSONTyped(json, false);
      }
      exports.GraphicalSVGStatisticsFromJSON = GraphicalSVGStatisticsFromJSON;
      function GraphicalSVGStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"]
        };
      }
      exports.GraphicalSVGStatisticsFromJSONTyped = GraphicalSVGStatisticsFromJSONTyped;
      function GraphicalSVGStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.GraphicalSVGStatisticsToJSON = GraphicalSVGStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/GroupedTimestamp.js
  var require_GroupedTimestamp = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/GroupedTimestamp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GroupedTimestampToJSON = exports.GroupedTimestampFromJSONTyped = exports.GroupedTimestampFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function GroupedTimestampFromJSON(json) {
        return GroupedTimestampFromJSONTyped(json, false);
      }
      exports.GroupedTimestampFromJSON = GroupedTimestampFromJSON;
      function GroupedTimestampFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "value": new Date(json["value"]),
          "readable": !(0, runtime_1.exists)(json, "readable") ? void 0 : json["readable"]
        };
      }
      exports.GroupedTimestampFromJSONTyped = GroupedTimestampFromJSONTyped;
      function GroupedTimestampToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "value": value.value.toISOString(),
          "readable": value.readable
        };
      }
      exports.GroupedTimestampToJSON = GroupedTimestampToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Health.js
  var require_Health = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Health.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HealthToJSON = exports.HealthFromJSONTyped = exports.HealthFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function HealthFromJSON(json) {
        return HealthFromJSONTyped(json, false);
      }
      exports.HealthFromJSON = HealthFromJSON;
      function HealthFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "os": (0, _1.OSHealthFromJSON)(json["os"])
        };
      }
      exports.HealthFromJSONTyped = HealthFromJSONTyped;
      function HealthToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "os": (0, _1.OSHealthToJSON)(value.os)
        };
      }
      exports.HealthToJSON = HealthToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Hint.js
  var require_Hint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Hint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HintToJSON = exports.HintFromJSONTyped = exports.HintFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function HintFromJSON(json) {
        return HintFromJSONTyped(json, false);
      }
      exports.HintFromJSON = HintFromJSON;
      function HintFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "type": (0, _1.HintTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.HintFromJSONTyped = HintFromJSONTyped;
      function HintToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "type": (0, _1.HintTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.HintToJSON = HintToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/HintTypeEnum.js
  var require_HintTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/HintTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HintTypeEnumToJSON = exports.HintTypeEnumFromJSONTyped = exports.HintTypeEnumFromJSON = exports.HintTypeEnum = void 0;
      var HintTypeEnum;
      (function(HintTypeEnum2) {
        HintTypeEnum2["SuggestedQuery"] = "SUGGESTED_QUERY";
        HintTypeEnum2["QgptHint"] = "QGPT_HINT";
      })(HintTypeEnum || (exports.HintTypeEnum = HintTypeEnum = {}));
      function HintTypeEnumFromJSON(json) {
        return HintTypeEnumFromJSONTyped(json, false);
      }
      exports.HintTypeEnumFromJSON = HintTypeEnumFromJSON;
      function HintTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.HintTypeEnumFromJSONTyped = HintTypeEnumFromJSONTyped;
      function HintTypeEnumToJSON(value) {
        return value;
      }
      exports.HintTypeEnumToJSON = HintTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Hints.js
  var require_Hints = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Hints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HintsToJSON = exports.HintsFromJSONTyped = exports.HintsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function HintsFromJSON(json) {
        return HintsFromJSONTyped(json, false);
      }
      exports.HintsFromJSON = HintsFromJSON;
      function HintsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.HintFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.HintsFromJSONTyped = HintsFromJSONTyped;
      function HintsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.HintToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.HintsToJSON = HintsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ImageAnalyses.js
  var require_ImageAnalyses = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ImageAnalyses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ImageAnalysesToJSON = exports.ImageAnalysesFromJSONTyped = exports.ImageAnalysesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ImageAnalysesFromJSON(json) {
        return ImageAnalysesFromJSONTyped(json, false);
      }
      exports.ImageAnalysesFromJSON = ImageAnalysesFromJSON;
      function ImageAnalysesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ImageAnalysisFromJSON)
        };
      }
      exports.ImageAnalysesFromJSONTyped = ImageAnalysesFromJSONTyped;
      function ImageAnalysesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ImageAnalysisToJSON)
        };
      }
      exports.ImageAnalysesToJSON = ImageAnalysesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ImageAnalysis.js
  var require_ImageAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ImageAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ImageAnalysisToJSON = exports.ImageAnalysisFromJSONTyped = exports.ImageAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ImageAnalysisFromJSON(json) {
        return ImageAnalysisFromJSONTyped(json, false);
      }
      exports.ImageAnalysisFromJSON = ImageAnalysisFromJSON;
      function ImageAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "analysis": json["analysis"],
          "ocr": !(0, runtime_1.exists)(json, "ocr") ? void 0 : (0, _1.OCRAnalysisFromJSON)(json["ocr"])
        };
      }
      exports.ImageAnalysisFromJSONTyped = ImageAnalysisFromJSONTyped;
      function ImageAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "analysis": value.analysis,
          "ocr": (0, _1.OCRAnalysisToJSON)(value.ocr)
        };
      }
      exports.ImageAnalysisToJSON = ImageAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAsset.js
  var require_InteractedAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InteractedAssetToJSON = exports.InteractedAssetFromJSONTyped = exports.InteractedAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function InteractedAssetFromJSON(json) {
        return InteractedAssetFromJSONTyped(json, false);
      }
      exports.InteractedAssetFromJSON = InteractedAssetFromJSON;
      function InteractedAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : (0, _1.InteractedAssetInteractionsFromJSON)(json["interactions"])
        };
      }
      exports.InteractedAssetFromJSONTyped = InteractedAssetFromJSONTyped;
      function InteractedAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "asset": value.asset,
          "interactions": (0, _1.InteractedAssetInteractionsToJSON)(value.interactions)
        };
      }
      exports.InteractedAssetToJSON = InteractedAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAssetInteractions.js
  var require_InteractedAssetInteractions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAssetInteractions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InteractedAssetInteractionsToJSON = exports.InteractedAssetInteractionsFromJSONTyped = exports.InteractedAssetInteractionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      function InteractedAssetInteractionsFromJSON(json) {
        return InteractedAssetInteractionsFromJSONTyped(json, false);
      }
      exports.InteractedAssetInteractionsFromJSON = InteractedAssetInteractionsFromJSON;
      function InteractedAssetInteractionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "viewed": json["viewed"],
          "touched": !(0, runtime_1.exists)(json, "touched") ? void 0 : json["touched"],
          "scrolled": !(0, runtime_1.exists)(json, "scrolled") ? void 0 : json["scrolled"]
        };
      }
      exports.InteractedAssetInteractionsFromJSONTyped = InteractedAssetInteractionsFromJSONTyped;
      function InteractedAssetInteractionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "viewed": value.viewed,
          "touched": value.touched,
          "scrolled": value.scrolled
        };
      }
      exports.InteractedAssetInteractionsToJSON = InteractedAssetInteractionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAssets.js
  var require_InteractedAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/InteractedAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InteractedAssetsToJSON = exports.InteractedAssetsFromJSONTyped = exports.InteractedAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function InteractedAssetsFromJSON(json) {
        return InteractedAssetsFromJSONTyped(json, false);
      }
      exports.InteractedAssetsFromJSON = InteractedAssetsFromJSON;
      function InteractedAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.InteractedAssetFromJSON)
        };
      }
      exports.InteractedAssetsFromJSONTyped = InteractedAssetsFromJSONTyped;
      function InteractedAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.InteractedAssetToJSON)
        };
      }
      exports.InteractedAssetsToJSON = InteractedAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Linkify.js
  var require_Linkify = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Linkify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LinkifyToJSON = exports.LinkifyFromJSONTyped = exports.LinkifyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function LinkifyFromJSON(json) {
        return LinkifyFromJSONTyped(json, false);
      }
      exports.LinkifyFromJSON = LinkifyFromJSON;
      function LinkifyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "seed": !(0, runtime_1.exists)(json, "seed") ? void 0 : (0, _1.SeedFromJSON)(json["seed"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.AssetFromJSON)(json["asset"]),
          "users": !(0, runtime_1.exists)(json, "users") ? void 0 : json["users"].map(_1.SeededUserFromJSON),
          "access": (0, _1.AccessEnumFromJSON)(json["access"]),
          "distributions": !(0, runtime_1.exists)(json, "distributions") ? void 0 : (0, _1.SeededDistributionsFromJSON)(json["distributions"])
        };
      }
      exports.LinkifyFromJSONTyped = LinkifyFromJSONTyped;
      function LinkifyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "seed": (0, _1.SeedToJSON)(value.seed),
          "asset": (0, _1.AssetToJSON)(value.asset),
          "users": value.users === void 0 ? void 0 : value.users.map(_1.SeededUserToJSON),
          "access": (0, _1.AccessEnumToJSON)(value.access),
          "distributions": (0, _1.SeededDistributionsToJSON)(value.distributions)
        };
      }
      exports.LinkifyToJSON = LinkifyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/LinkifyMultiple.js
  var require_LinkifyMultiple = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/LinkifyMultiple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LinkifyMultipleToJSON = exports.LinkifyMultipleFromJSONTyped = exports.LinkifyMultipleFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function LinkifyMultipleFromJSON(json) {
        return LinkifyMultipleFromJSONTyped(json, false);
      }
      exports.LinkifyMultipleFromJSON = LinkifyMultipleFromJSON;
      function LinkifyMultipleFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assets": json["assets"],
          "users": !(0, runtime_1.exists)(json, "users") ? void 0 : json["users"].map(_1.SeededUserFromJSON),
          "access": (0, _1.AccessEnumFromJSON)(json["access"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"]
        };
      }
      exports.LinkifyMultipleFromJSONTyped = LinkifyMultipleFromJSONTyped;
      function LinkifyMultipleToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets": value.assets,
          "users": value.users === void 0 ? void 0 : value.users.map(_1.SeededUserToJSON),
          "access": (0, _1.AccessEnumToJSON)(value.access),
          "name": value.name
        };
      }
      exports.LinkifyMultipleToJSON = LinkifyMultipleToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/MailgunDistribution.js
  var require_MailgunDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/MailgunDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MailgunDistributionToJSON = exports.MailgunDistributionFromJSONTyped = exports.MailgunDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function MailgunDistributionFromJSON(json) {
        return MailgunDistributionFromJSONTyped(json, false);
      }
      exports.MailgunDistributionFromJSON = MailgunDistributionFromJSON;
      function MailgunDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "recipients": (0, _1.RecipientsFromJSON)(json["recipients"])
        };
      }
      exports.MailgunDistributionFromJSONTyped = MailgunDistributionFromJSONTyped;
      function MailgunDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "recipients": (0, _1.RecipientsToJSON)(value.recipients)
        };
      }
      exports.MailgunDistributionToJSON = MailgunDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/MailgunMetadata.js
  var require_MailgunMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/MailgunMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MailgunMetadataToJSON = exports.MailgunMetadataFromJSONTyped = exports.MailgunMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function MailgunMetadataFromJSON(json) {
        return MailgunMetadataFromJSONTyped(json, false);
      }
      exports.MailgunMetadataFromJSON = MailgunMetadataFromJSON;
      function MailgunMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "messageId": json["messageId"]
        };
      }
      exports.MailgunMetadataFromJSONTyped = MailgunMetadataFromJSONTyped;
      function MailgunMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "messageId": value.messageId
        };
      }
      exports.MailgunMetadataToJSON = MailgunMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/MechanismEnum.js
  var require_MechanismEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/MechanismEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MechanismEnumToJSON = exports.MechanismEnumFromJSONTyped = exports.MechanismEnumFromJSON = exports.MechanismEnum = void 0;
      var MechanismEnum;
      (function(MechanismEnum2) {
        MechanismEnum2["Manual"] = "MANUAL";
        MechanismEnum2["Recommended"] = "RECOMMENDED";
        MechanismEnum2["Automatic"] = "AUTOMATIC";
        MechanismEnum2["Internal"] = "INTERNAL";
        MechanismEnum2["Deleted"] = "DELETED";
      })(MechanismEnum || (exports.MechanismEnum = MechanismEnum = {}));
      function MechanismEnumFromJSON(json) {
        return MechanismEnumFromJSONTyped(json, false);
      }
      exports.MechanismEnumFromJSON = MechanismEnumFromJSON;
      function MechanismEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.MechanismEnumFromJSONTyped = MechanismEnumFromJSONTyped;
      function MechanismEnumToJSON(value) {
        return value;
      }
      exports.MechanismEnumToJSON = MechanismEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Model.js
  var require_Model = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Model.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelToJSON = exports.ModelFromJSONTyped = exports.ModelFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelFromJSON(json) {
        return ModelFromJSONTyped(json, false);
      }
      exports.ModelFromJSON = ModelFromJSON;
      function ModelFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "version": json["version"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "name": json["name"],
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "cloud": json["cloud"],
          "type": (0, _1.ModelTypeEnumFromJSON)(json["type"]),
          "usage": (0, _1.ModelUsageEnumFromJSON)(json["usage"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.ByteDescriptorFromJSON)(json["bytes"]),
          "ram": !(0, runtime_1.exists)(json, "ram") ? void 0 : (0, _1.ByteDescriptorFromJSON)(json["ram"]),
          "quantization": !(0, runtime_1.exists)(json, "quantization") ? void 0 : json["quantization"],
          "foundation": !(0, runtime_1.exists)(json, "foundation") ? void 0 : (0, _1.ModelFoundationEnumFromJSON)(json["foundation"]),
          "downloaded": !(0, runtime_1.exists)(json, "downloaded") ? void 0 : json["downloaded"],
          "loaded": !(0, runtime_1.exists)(json, "loaded") ? void 0 : json["loaded"],
          "unique": !(0, runtime_1.exists)(json, "unique") ? void 0 : json["unique"],
          "parameters": !(0, runtime_1.exists)(json, "parameters") ? void 0 : json["parameters"],
          "provider": !(0, runtime_1.exists)(json, "provider") ? void 0 : (0, _1.ExternalMLProviderEnumFromJSON)(json["provider"]),
          "cpu": !(0, runtime_1.exists)(json, "cpu") ? void 0 : json["cpu"],
          "downloading": !(0, runtime_1.exists)(json, "downloading") ? void 0 : json["downloading"],
          "maxTokens": !(0, runtime_1.exists)(json, "maxTokens") ? void 0 : (0, _1.ModelMaxTokensFromJSON)(json["maxTokens"]),
          "custom": !(0, runtime_1.exists)(json, "custom") ? void 0 : json["custom"]
        };
      }
      exports.ModelFromJSONTyped = ModelFromJSONTyped;
      function ModelToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "version": value.version,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "name": value.name,
          "description": value.description,
          "cloud": value.cloud,
          "type": (0, _1.ModelTypeEnumToJSON)(value.type),
          "usage": (0, _1.ModelUsageEnumToJSON)(value.usage),
          "bytes": (0, _1.ByteDescriptorToJSON)(value.bytes),
          "ram": (0, _1.ByteDescriptorToJSON)(value.ram),
          "quantization": value.quantization,
          "foundation": (0, _1.ModelFoundationEnumToJSON)(value.foundation),
          "downloaded": value.downloaded,
          "loaded": value.loaded,
          "unique": value.unique,
          "parameters": value.parameters,
          "provider": (0, _1.ExternalMLProviderEnumToJSON)(value.provider),
          "cpu": value.cpu,
          "downloading": value.downloading,
          "maxTokens": (0, _1.ModelMaxTokensToJSON)(value.maxTokens),
          "custom": value.custom
        };
      }
      exports.ModelToJSON = ModelToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelDeleteCacheInput.js
  var require_ModelDeleteCacheInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelDeleteCacheInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelDeleteCacheInputToJSON = exports.ModelDeleteCacheInputFromJSONTyped = exports.ModelDeleteCacheInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelDeleteCacheInputFromJSON(json) {
        return ModelDeleteCacheInputFromJSONTyped(json, false);
      }
      exports.ModelDeleteCacheInputFromJSON = ModelDeleteCacheInputFromJSON;
      function ModelDeleteCacheInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"])
        };
      }
      exports.ModelDeleteCacheInputFromJSONTyped = ModelDeleteCacheInputFromJSONTyped;
      function ModelDeleteCacheInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema)
        };
      }
      exports.ModelDeleteCacheInputToJSON = ModelDeleteCacheInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelDeleteCacheOutput.js
  var require_ModelDeleteCacheOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelDeleteCacheOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelDeleteCacheOutputToJSON = exports.ModelDeleteCacheOutputFromJSONTyped = exports.ModelDeleteCacheOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelDeleteCacheOutputFromJSON(json) {
        return ModelDeleteCacheOutputFromJSONTyped(json, false);
      }
      exports.ModelDeleteCacheOutputFromJSON = ModelDeleteCacheOutputFromJSON;
      function ModelDeleteCacheOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "model": (0, _1.ReferencedModelFromJSON)(json["model"])
        };
      }
      exports.ModelDeleteCacheOutputFromJSONTyped = ModelDeleteCacheOutputFromJSONTyped;
      function ModelDeleteCacheOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "model": (0, _1.ReferencedModelToJSON)(value.model)
        };
      }
      exports.ModelDeleteCacheOutputToJSON = ModelDeleteCacheOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelDownloadProgress.js
  var require_ModelDownloadProgress = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelDownloadProgress.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelDownloadProgressToJSON = exports.ModelDownloadProgressFromJSONTyped = exports.ModelDownloadProgressFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelDownloadProgressFromJSON(json) {
        return ModelDownloadProgressFromJSONTyped(json, false);
      }
      exports.ModelDownloadProgressFromJSON = ModelDownloadProgressFromJSON;
      function ModelDownloadProgressFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "status": !(0, runtime_1.exists)(json, "status") ? void 0 : (0, _1.ModelDownloadProgressStatusEnumFromJSON)(json["status"]),
          "percentage": !(0, runtime_1.exists)(json, "percentage") ? void 0 : json["percentage"]
        };
      }
      exports.ModelDownloadProgressFromJSONTyped = ModelDownloadProgressFromJSONTyped;
      function ModelDownloadProgressToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "status": (0, _1.ModelDownloadProgressStatusEnumToJSON)(value.status),
          "percentage": value.percentage
        };
      }
      exports.ModelDownloadProgressToJSON = ModelDownloadProgressToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelDownloadProgressStatusEnum.js
  var require_ModelDownloadProgressStatusEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelDownloadProgressStatusEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelDownloadProgressStatusEnumToJSON = exports.ModelDownloadProgressStatusEnumFromJSONTyped = exports.ModelDownloadProgressStatusEnumFromJSON = exports.ModelDownloadProgressStatusEnum = void 0;
      var ModelDownloadProgressStatusEnum;
      (function(ModelDownloadProgressStatusEnum2) {
        ModelDownloadProgressStatusEnum2["Initialized"] = "INITIALIZED";
        ModelDownloadProgressStatusEnum2["InProgress"] = "IN-PROGRESS";
        ModelDownloadProgressStatusEnum2["Completed"] = "COMPLETED";
        ModelDownloadProgressStatusEnum2["Failed"] = "FAILED";
        ModelDownloadProgressStatusEnum2["Unknown"] = "UNKNOWN";
      })(ModelDownloadProgressStatusEnum || (exports.ModelDownloadProgressStatusEnum = ModelDownloadProgressStatusEnum = {}));
      function ModelDownloadProgressStatusEnumFromJSON(json) {
        return ModelDownloadProgressStatusEnumFromJSONTyped(json, false);
      }
      exports.ModelDownloadProgressStatusEnumFromJSON = ModelDownloadProgressStatusEnumFromJSON;
      function ModelDownloadProgressStatusEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ModelDownloadProgressStatusEnumFromJSONTyped = ModelDownloadProgressStatusEnumFromJSONTyped;
      function ModelDownloadProgressStatusEnumToJSON(value) {
        return value;
      }
      exports.ModelDownloadProgressStatusEnumToJSON = ModelDownloadProgressStatusEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelFoundationEnum.js
  var require_ModelFoundationEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelFoundationEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelFoundationEnumToJSON = exports.ModelFoundationEnumFromJSONTyped = exports.ModelFoundationEnumFromJSON = exports.ModelFoundationEnum = void 0;
      var ModelFoundationEnum;
      (function(ModelFoundationEnum2) {
        ModelFoundationEnum2["Gpt35"] = "GPT_3.5";
        ModelFoundationEnum2["Gpt4"] = "GPT_4";
        ModelFoundationEnum2["T5"] = "T5";
        ModelFoundationEnum2["Llama27B"] = "LLAMA_2_7B";
        ModelFoundationEnum2["Llama213B"] = "LLAMA_2_13B";
        ModelFoundationEnum2["Llama270B"] = "LLAMA_2_70B";
        ModelFoundationEnum2["CodeLlama27B"] = "CODE_LLAMA_2_7B";
        ModelFoundationEnum2["CodeLlama213B"] = "CODE_LLAMA_2_13B";
        ModelFoundationEnum2["CodeLlama270B"] = "CODE_LLAMA_2_70B";
        ModelFoundationEnum2["Bard"] = "BARD";
        ModelFoundationEnum2["Alpaca7B"] = "ALPACA_7B";
        ModelFoundationEnum2["Alpaca13B"] = "ALPACA_13B";
        ModelFoundationEnum2["Alpaca33B"] = "ALPACA_33B";
        ModelFoundationEnum2["Alpaca65B"] = "ALPACA_65B";
        ModelFoundationEnum2["Vicuna7B"] = "VICUNA_7B";
        ModelFoundationEnum2["Vicuna13B"] = "VICUNA_13B";
        ModelFoundationEnum2["Vicuna33B"] = "VICUNA_33B";
        ModelFoundationEnum2["Vicuna65B"] = "VICUNA_65B";
        ModelFoundationEnum2["Guanaco7B"] = "GUANACO_7B";
        ModelFoundationEnum2["Guanaco13B"] = "GUANACO_13B";
        ModelFoundationEnum2["Guanaco33B"] = "GUANACO_33B";
        ModelFoundationEnum2["Guanaco65B"] = "GUANACO_65B";
        ModelFoundationEnum2["Openllama7B"] = "OPENLLAMA_7B";
        ModelFoundationEnum2["Openllama13B"] = "OPENLLAMA_13B";
        ModelFoundationEnum2["Gorilla7B"] = "GORILLA_7B";
        ModelFoundationEnum2["Gorilla13B"] = "GORILLA_13B";
        ModelFoundationEnum2["Gorilla33B"] = "GORILLA_33B";
        ModelFoundationEnum2["Gorilla65B"] = "GORILLA_65B";
        ModelFoundationEnum2["Wizardlm7B"] = "WIZARDLM_7B";
        ModelFoundationEnum2["Wizardlm13B"] = "WIZARDLM_13B";
        ModelFoundationEnum2["Wizardlm30B"] = "WIZARDLM_30B";
        ModelFoundationEnum2["Yulanchat13B"] = "YULANCHAT_13B";
        ModelFoundationEnum2["Yulanchat65B"] = "YULANCHAT_65B";
        ModelFoundationEnum2["Redpajama3B"] = "REDPAJAMA_3B";
        ModelFoundationEnum2["Redpajama7B"] = "REDPAJAMA_7B";
        ModelFoundationEnum2["Redpajama13B"] = "REDPAJAMA_13B";
        ModelFoundationEnum2["Redpajama33B"] = "REDPAJAMA_33B";
        ModelFoundationEnum2["Redpajama65B"] = "REDPAJAMA_65B";
        ModelFoundationEnum2["Dolly70M"] = "DOLLY_70M";
        ModelFoundationEnum2["Dolly160M"] = "DOLLY_160M";
        ModelFoundationEnum2["Dolly410M"] = "DOLLY_410M";
        ModelFoundationEnum2["Dolly1B"] = "DOLLY_1B";
        ModelFoundationEnum2["Dolly14B"] = "DOLLY_1.4B";
        ModelFoundationEnum2["Dolly28B"] = "DOLLY_2.8B";
        ModelFoundationEnum2["Dolly69B"] = "DOLLY_6.9B";
        ModelFoundationEnum2["Dolly12B"] = "DOLLY_12B";
        ModelFoundationEnum2["Pythia70M"] = "PYTHIA_70M";
        ModelFoundationEnum2["Pythia160M"] = "PYTHIA_160M";
        ModelFoundationEnum2["Pythia410M"] = "PYTHIA_410M";
        ModelFoundationEnum2["Pythia1B"] = "PYTHIA_1B";
        ModelFoundationEnum2["Pythia14B"] = "PYTHIA_1.4B";
        ModelFoundationEnum2["Pythia28B"] = "PYTHIA_2.8B";
        ModelFoundationEnum2["Pythia69B"] = "PYTHIA_6.9B";
        ModelFoundationEnum2["Pythia12B"] = "PYTHIA_12B";
        ModelFoundationEnum2["Moss7B"] = "MOSS_7B";
        ModelFoundationEnum2["Moss13B"] = "MOSS_13B";
        ModelFoundationEnum2["RmkvLm100M"] = "RMKV_LM_100M";
        ModelFoundationEnum2["RmkvLm400M"] = "RMKV_LM_400M";
        ModelFoundationEnum2["RmkvLm15B"] = "RMKV_LM_1.5B";
        ModelFoundationEnum2["RmkvLm3B"] = "RMKV_LM_3B";
        ModelFoundationEnum2["RmkvLm7B"] = "RMKV_LM_7B";
        ModelFoundationEnum2["RmkvLm14B"] = "RMKV_LM_14B";
        ModelFoundationEnum2["Starcoder155B"] = "STARCODER_15.5B";
        ModelFoundationEnum2["Wizardcoder15B"] = "WIZARDCODER_15B";
        ModelFoundationEnum2["Santacoder11B"] = "SANTACODER_1.1B";
        ModelFoundationEnum2["TextBison"] = "TEXT_BISON";
        ModelFoundationEnum2["TextembeddingGecko"] = "TEXTEMBEDDING_GECKO";
        ModelFoundationEnum2["ChatBison"] = "CHAT_BISON";
        ModelFoundationEnum2["CodeBison"] = "CODE_BISON";
        ModelFoundationEnum2["CodechatBison"] = "CODECHAT_BISON";
        ModelFoundationEnum2["CodeGecko"] = "CODE_GECKO";
        ModelFoundationEnum2["Distilroberta"] = "DISTILROBERTA";
        ModelFoundationEnum2["Mistral7B"] = "MISTRAL_7B";
        ModelFoundationEnum2["Gemini"] = "GEMINI";
        ModelFoundationEnum2["FastText"] = "FAST_TEXT";
        ModelFoundationEnum2["Unixcoder"] = "UNIXCODER";
      })(ModelFoundationEnum || (exports.ModelFoundationEnum = ModelFoundationEnum = {}));
      function ModelFoundationEnumFromJSON(json) {
        return ModelFoundationEnumFromJSONTyped(json, false);
      }
      exports.ModelFoundationEnumFromJSON = ModelFoundationEnumFromJSON;
      function ModelFoundationEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ModelFoundationEnumFromJSONTyped = ModelFoundationEnumFromJSONTyped;
      function ModelFoundationEnumToJSON(value) {
        return value;
      }
      exports.ModelFoundationEnumToJSON = ModelFoundationEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelMaxTokens.js
  var require_ModelMaxTokens = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelMaxTokens.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelMaxTokensToJSON = exports.ModelMaxTokensFromJSONTyped = exports.ModelMaxTokensFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelMaxTokensFromJSON(json) {
        return ModelMaxTokensFromJSONTyped(json, false);
      }
      exports.ModelMaxTokensFromJSON = ModelMaxTokensFromJSON;
      function ModelMaxTokensFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "total": json["total"],
          "input": !(0, runtime_1.exists)(json, "input") ? void 0 : json["input"],
          "output": !(0, runtime_1.exists)(json, "output") ? void 0 : json["output"]
        };
      }
      exports.ModelMaxTokensFromJSONTyped = ModelMaxTokensFromJSONTyped;
      function ModelMaxTokensToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "total": value.total,
          "input": value.input,
          "output": value.output
        };
      }
      exports.ModelMaxTokensToJSON = ModelMaxTokensToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelTypeEnum.js
  var require_ModelTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelTypeEnumToJSON = exports.ModelTypeEnumFromJSONTyped = exports.ModelTypeEnumFromJSON = exports.ModelTypeEnum = void 0;
      var ModelTypeEnum;
      (function(ModelTypeEnum2) {
        ModelTypeEnum2["Balanced"] = "BALANCED";
        ModelTypeEnum2["Speed"] = "SPEED";
        ModelTypeEnum2["Accuracy"] = "ACCURACY";
      })(ModelTypeEnum || (exports.ModelTypeEnum = ModelTypeEnum = {}));
      function ModelTypeEnumFromJSON(json) {
        return ModelTypeEnumFromJSONTyped(json, false);
      }
      exports.ModelTypeEnumFromJSON = ModelTypeEnumFromJSON;
      function ModelTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ModelTypeEnumFromJSONTyped = ModelTypeEnumFromJSONTyped;
      function ModelTypeEnumToJSON(value) {
        return value;
      }
      exports.ModelTypeEnumToJSON = ModelTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ModelUsageEnum.js
  var require_ModelUsageEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ModelUsageEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelUsageEnumToJSON = exports.ModelUsageEnumFromJSONTyped = exports.ModelUsageEnumFromJSON = exports.ModelUsageEnum = void 0;
      var ModelUsageEnum;
      (function(ModelUsageEnum2) {
        ModelUsageEnum2["Ocr"] = "OCR";
        ModelUsageEnum2["CodeClassification"] = "CODE_CLASSIFICATION";
        ModelUsageEnum2["TextVsCode"] = "TEXT_VS_CODE";
        ModelUsageEnum2["TagifyCode"] = "TAGIFY_CODE";
        ModelUsageEnum2["TlpTagSearch"] = "TLP_TAG_SEARCH";
        ModelUsageEnum2["TlpNeuralCodeSearch"] = "TLP_NEURAL_CODE_SEARCH";
        ModelUsageEnum2["TagifyColorFromCode"] = "TAGIFY_COLOR_FROM_CODE";
        ModelUsageEnum2["CodeDescription"] = "CODE_DESCRIPTION";
        ModelUsageEnum2["CodeTitle"] = "CODE_TITLE";
        ModelUsageEnum2["CodeSearchQueries"] = "CODE_SEARCH_QUERIES";
        ModelUsageEnum2["CodeExtractiveTags"] = "CODE_EXTRACTIVE_TAGS";
        ModelUsageEnum2["CodeExtractiveLinks"] = "CODE_EXTRACTIVE_LINKS";
        ModelUsageEnum2["CodeConversation"] = "CODE_CONVERSATION";
        ModelUsageEnum2["CodeGeneration"] = "CODE_GENERATION";
        ModelUsageEnum2["CodeSearch"] = "CODE_SEARCH";
        ModelUsageEnum2["CodeDiscovery"] = "CODE_DISCOVERY";
        ModelUsageEnum2["CodeRelatedPeople"] = "CODE_RELATED_PEOPLE";
        ModelUsageEnum2["CodeFramework"] = "CODE_FRAMEWORK";
        ModelUsageEnum2["VideoOcr"] = "VIDEO_OCR";
        ModelUsageEnum2["TextVsCodeSegmentation"] = "TEXT_VS_CODE_SEGMENTATION";
        ModelUsageEnum2["TextEmbedding"] = "TEXT_EMBEDDING";
      })(ModelUsageEnum || (exports.ModelUsageEnum = ModelUsageEnum = {}));
      function ModelUsageEnumFromJSON(json) {
        return ModelUsageEnumFromJSONTyped(json, false);
      }
      exports.ModelUsageEnumFromJSON = ModelUsageEnumFromJSON;
      function ModelUsageEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.ModelUsageEnumFromJSONTyped = ModelUsageEnumFromJSONTyped;
      function ModelUsageEnumToJSON(value) {
        return value;
      }
      exports.ModelUsageEnumToJSON = ModelUsageEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Models.js
  var require_Models = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Models.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelsToJSON = exports.ModelsFromJSONTyped = exports.ModelsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ModelsFromJSON(json) {
        return ModelsFromJSONTyped(json, false);
      }
      exports.ModelsFromJSON = ModelsFromJSON;
      function ModelsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ModelFromJSON)
        };
      }
      exports.ModelsFromJSONTyped = ModelsFromJSONTyped;
      function ModelsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ModelToJSON)
        };
      }
      exports.ModelsToJSON = ModelsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Node.js
  var require_Node = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Node.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NodeToJSON = exports.NodeFromJSONTyped = exports.NodeFromJSON = void 0;
      var _1 = require_models();
      function NodeFromJSON(json) {
        return NodeFromJSONTyped(json, false);
      }
      exports.NodeFromJSON = NodeFromJSON;
      function NodeFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "id": json["id"],
          "type": (0, _1.NodeTypeEnumFromJSON)(json["type"]),
          "root": json["root"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"])
        };
      }
      exports.NodeFromJSONTyped = NodeFromJSONTyped;
      function NodeToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "id": value.id,
          "type": (0, _1.NodeTypeEnumToJSON)(value.type),
          "root": value.root,
          "created": (0, _1.GroupedTimestampToJSON)(value.created)
        };
      }
      exports.NodeToJSON = NodeToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/NodeTypeEnum.js
  var require_NodeTypeEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/NodeTypeEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NodeTypeEnumToJSON = exports.NodeTypeEnumFromJSONTyped = exports.NodeTypeEnumFromJSON = exports.NodeTypeEnum = void 0;
      var NodeTypeEnum;
      (function(NodeTypeEnum2) {
        NodeTypeEnum2["Tag"] = "TAG";
        NodeTypeEnum2["Website"] = "WEBSITE";
        NodeTypeEnum2["Format"] = "FORMAT";
        NodeTypeEnum2["Asset"] = "ASSET";
      })(NodeTypeEnum || (exports.NodeTypeEnum = NodeTypeEnum = {}));
      function NodeTypeEnumFromJSON(json) {
        return NodeTypeEnumFromJSONTyped(json, false);
      }
      exports.NodeTypeEnumFromJSON = NodeTypeEnumFromJSON;
      function NodeTypeEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.NodeTypeEnumFromJSONTyped = NodeTypeEnumFromJSONTyped;
      function NodeTypeEnumToJSON(value) {
        return value;
      }
      exports.NodeTypeEnumToJSON = NodeTypeEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Notification.js
  var require_Notification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Notification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NotificationToJSON = exports.NotificationFromJSONTyped = exports.NotificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function NotificationFromJSON(json) {
        return NotificationFromJSONTyped(json, false);
      }
      exports.NotificationFromJSON = NotificationFromJSON;
      function NotificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "title": !(0, runtime_1.exists)(json, "title") ? void 0 : json["title"],
          "message": !(0, runtime_1.exists)(json, "message") ? void 0 : json["message"],
          "payload": !(0, runtime_1.exists)(json, "payload") ? void 0 : json["payload"]
        };
      }
      exports.NotificationFromJSONTyped = NotificationFromJSONTyped;
      function NotificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "title": value.title,
          "message": value.message,
          "payload": value.payload
        };
      }
      exports.NotificationToJSON = NotificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OAuthAccount.js
  var require_OAuthAccount = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OAuthAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthAccountToJSON = exports.OAuthAccountFromJSONTyped = exports.OAuthAccountFromJSON = void 0;
      function OAuthAccountFromJSON(json) {
        return OAuthAccountFromJSONTyped(json, false);
      }
      exports.OAuthAccountFromJSON = OAuthAccountFromJSON;
      function OAuthAccountFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "clientId": json["client_id"],
          "email": json["email"],
          "connection": json["connection"],
          "username": json["username"],
          "givenName": json["given_name"],
          "familyName": json["family_name"],
          "name": json["name"],
          "picture": json["picture"],
          "nickname": json["nickname"]
        };
      }
      exports.OAuthAccountFromJSONTyped = OAuthAccountFromJSONTyped;
      function OAuthAccountToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "client_id": value.clientId,
          "email": value.email,
          "connection": value.connection,
          "username": value.username,
          "given_name": value.givenName,
          "family_name": value.familyName,
          "name": value.name,
          "picture": value.picture,
          "nickname": value.nickname
        };
      }
      exports.OAuthAccountToJSON = OAuthAccountToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OAuthGroup.js
  var require_OAuthGroup = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OAuthGroup.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthGroupToJSON = exports.OAuthGroupFromJSONTyped = exports.OAuthGroupFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OAuthGroupFromJSON(json) {
        return OAuthGroupFromJSONTyped(json, false);
      }
      exports.OAuthGroupFromJSON = OAuthGroupFromJSON;
      function OAuthGroupFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "token": !(0, runtime_1.exists)(json, "token") ? void 0 : (0, _1.OAuthTokenFromJSON)(json["token"]),
          "account": !(0, runtime_1.exists)(json, "account") ? void 0 : (0, _1.OAuthAccountFromJSON)(json["account"])
        };
      }
      exports.OAuthGroupFromJSONTyped = OAuthGroupFromJSONTyped;
      function OAuthGroupToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "token": (0, _1.OAuthTokenToJSON)(value.token),
          "account": (0, _1.OAuthAccountToJSON)(value.account)
        };
      }
      exports.OAuthGroupToJSON = OAuthGroupToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OAuthToken.js
  var require_OAuthToken = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OAuthToken.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuthTokenToJSON = exports.OAuthTokenFromJSONTyped = exports.OAuthTokenFromJSON = exports.OAuthTokenTokenTypeEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var OAuthTokenTokenTypeEnum;
      (function(OAuthTokenTokenTypeEnum2) {
        OAuthTokenTokenTypeEnum2["Bearer"] = "Bearer";
      })(OAuthTokenTokenTypeEnum || (exports.OAuthTokenTokenTypeEnum = OAuthTokenTokenTypeEnum = {}));
      function OAuthTokenFromJSON(json) {
        return OAuthTokenFromJSONTyped(json, false);
      }
      exports.OAuthTokenFromJSON = OAuthTokenFromJSON;
      function OAuthTokenFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "accessToken": json["access_token"],
          "tokenType": json["token_type"],
          "expiresIn": json["expires_in"],
          "scope": json["scope"],
          "refreshToken": !(0, runtime_1.exists)(json, "refresh_token") ? void 0 : json["refresh_token"],
          "idToken": !(0, runtime_1.exists)(json, "id_token") ? void 0 : json["id_token"]
        };
      }
      exports.OAuthTokenFromJSONTyped = OAuthTokenFromJSONTyped;
      function OAuthTokenToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "access_token": value.accessToken,
          "token_type": value.tokenType,
          "expires_in": value.expiresIn,
          "scope": value.scope,
          "refresh_token": value.refreshToken,
          "id_token": value.idToken
        };
      }
      exports.OAuthTokenToJSON = OAuthTokenToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OCRAnalyses.js
  var require_OCRAnalyses = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OCRAnalyses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OCRAnalysesToJSON = exports.OCRAnalysesFromJSONTyped = exports.OCRAnalysesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OCRAnalysesFromJSON(json) {
        return OCRAnalysesFromJSONTyped(json, false);
      }
      exports.OCRAnalysesFromJSON = OCRAnalysesFromJSON;
      function OCRAnalysesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.OCRAnalysisFromJSON)
        };
      }
      exports.OCRAnalysesFromJSONTyped = OCRAnalysesFromJSONTyped;
      function OCRAnalysesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.OCRAnalysisToJSON)
        };
      }
      exports.OCRAnalysesToJSON = OCRAnalysesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OCRAnalysis.js
  var require_OCRAnalysis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OCRAnalysis.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OCRAnalysisToJSON = exports.OCRAnalysisFromJSONTyped = exports.OCRAnalysisFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OCRAnalysisFromJSON(json) {
        return OCRAnalysisFromJSONTyped(json, false);
      }
      exports.OCRAnalysisFromJSON = OCRAnalysisFromJSON;
      function OCRAnalysisFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "raw": (0, _1.FormatFromJSON)(json["raw"]),
          "hocr": (0, _1.FormatFromJSON)(json["hocr"]),
          "image": json["image"],
          "model": (0, _1.ModelFromJSON)(json["model"])
        };
      }
      exports.OCRAnalysisFromJSONTyped = OCRAnalysisFromJSONTyped;
      function OCRAnalysisToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "raw": (0, _1.FormatToJSON)(value.raw),
          "hocr": (0, _1.FormatToJSON)(value.hocr),
          "image": value.image,
          "model": (0, _1.ModelToJSON)(value.model)
        };
      }
      exports.OCRAnalysisToJSON = OCRAnalysisToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OSHealth.js
  var require_OSHealth = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OSHealth.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OSHealthToJSON = exports.OSHealthFromJSONTyped = exports.OSHealthFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OSHealthFromJSON(json) {
        return OSHealthFromJSONTyped(json, false);
      }
      exports.OSHealthFromJSON = OSHealthFromJSON;
      function OSHealthFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "version": json["version"]
        };
      }
      exports.OSHealthFromJSONTyped = OSHealthFromJSONTyped;
      function OSHealthToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "version": value.version
        };
      }
      exports.OSHealthToJSON = OSHealthToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OpenAIModelsListInput.js
  var require_OpenAIModelsListInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OpenAIModelsListInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OpenAIModelsListInputToJSON = exports.OpenAIModelsListInputFromJSONTyped = exports.OpenAIModelsListInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OpenAIModelsListInputFromJSON(json) {
        return OpenAIModelsListInputFromJSONTyped(json, false);
      }
      exports.OpenAIModelsListInputFromJSON = OpenAIModelsListInputFromJSON;
      function OpenAIModelsListInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": json["user"]
        };
      }
      exports.OpenAIModelsListInputFromJSONTyped = OpenAIModelsListInputFromJSONTyped;
      function OpenAIModelsListInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": value.user
        };
      }
      exports.OpenAIModelsListInputToJSON = OpenAIModelsListInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OpenAIModelsListOutput.js
  var require_OpenAIModelsListOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OpenAIModelsListOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OpenAIModelsListOutputToJSON = exports.OpenAIModelsListOutputFromJSONTyped = exports.OpenAIModelsListOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OpenAIModelsListOutputFromJSON(json) {
        return OpenAIModelsListOutputFromJSONTyped(json, false);
      }
      exports.OpenAIModelsListOutputFromJSON = OpenAIModelsListOutputFromJSON;
      function OpenAIModelsListOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "models": (0, _1.SeededModelsFromJSON)(json["models"])
        };
      }
      exports.OpenAIModelsListOutputFromJSONTyped = OpenAIModelsListOutputFromJSONTyped;
      function OpenAIModelsListOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "models": (0, _1.SeededModelsToJSON)(value.models)
        };
      }
      exports.OpenAIModelsListOutputToJSON = OpenAIModelsListOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/OrderedMetrics.js
  var require_OrderedMetrics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/OrderedMetrics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OrderedMetricsToJSON = exports.OrderedMetricsFromJSONTyped = exports.OrderedMetricsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function OrderedMetricsFromJSON(json) {
        return OrderedMetricsFromJSONTyped(json, false);
      }
      exports.OrderedMetricsFromJSON = OrderedMetricsFromJSON;
      function OrderedMetricsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "ordered": json["ordered"]
        };
      }
      exports.OrderedMetricsFromJSONTyped = OrderedMetricsFromJSONTyped;
      function OrderedMetricsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "ordered": value.ordered
        };
      }
      exports.OrderedMetricsToJSON = OrderedMetricsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PKCE.js
  var require_PKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PKCEToJSON = exports.PKCEFromJSONTyped = exports.PKCEFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PKCEFromJSON(json) {
        return PKCEFromJSONTyped(json, false);
      }
      exports.PKCEFromJSON = PKCEFromJSON;
      function PKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "result": !(0, runtime_1.exists)(json, "result") ? void 0 : (0, _1.ResultedPKCEFromJSON)(json["result"]),
          "challenge": !(0, runtime_1.exists)(json, "challenge") ? void 0 : (0, _1.ChallengedPKCEFromJSON)(json["challenge"]),
          "revocation": !(0, runtime_1.exists)(json, "revocation") ? void 0 : (0, _1.RevokedPKCEFromJSON)(json["revocation"]),
          "seed": !(0, runtime_1.exists)(json, "seed") ? void 0 : (0, _1.SeededPKCEFromJSON)(json["seed"]),
          "token": !(0, runtime_1.exists)(json, "token") ? void 0 : (0, _1.TokenizedPKCEFromJSON)(json["token"]),
          "auth0": !(0, runtime_1.exists)(json, "auth0") ? void 0 : (0, _1.Auth0FromJSON)(json["auth0"])
        };
      }
      exports.PKCEFromJSONTyped = PKCEFromJSONTyped;
      function PKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "result": (0, _1.ResultedPKCEToJSON)(value.result),
          "challenge": (0, _1.ChallengedPKCEToJSON)(value.challenge),
          "revocation": (0, _1.RevokedPKCEToJSON)(value.revocation),
          "seed": (0, _1.SeededPKCEToJSON)(value.seed),
          "token": (0, _1.TokenizedPKCEToJSON)(value.token),
          "auth0": (0, _1.Auth0ToJSON)(value.auth0)
        };
      }
      exports.PKCEToJSON = PKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Person.js
  var require_Person = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Person.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonToJSON = exports.PersonFromJSONTyped = exports.PersonFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonFromJSON(json) {
        return PersonFromJSONTyped(json, false);
      }
      exports.PersonFromJSON = PersonFromJSON;
      function PersonFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "type": (0, _1.PersonTypeFromJSON)(json["type"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "access": !(0, runtime_1.exists)(json, "access") ? void 0 : (0, runtime_1.mapValues)(json["access"], _1.PersonAccessFromJSON),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : (0, _1.FlattenedTagsFromJSON)(json["tags"]),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : (0, _1.FlattenedWebsitesFromJSON)(json["websites"]),
          "models": !(0, runtime_1.exists)(json, "models") ? void 0 : (0, runtime_1.mapValues)(json["models"], _1.PersonModelFromJSON),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.FlattenedAnnotationsFromJSON)(json["annotations"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.PersonFromJSONTyped = PersonFromJSONTyped;
      function PersonToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "type": (0, _1.PersonTypeToJSON)(value.type),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "interactions": value.interactions,
          "access": value.access === void 0 ? void 0 : (0, runtime_1.mapValues)(value.access, _1.PersonAccessToJSON),
          "tags": (0, _1.FlattenedTagsToJSON)(value.tags),
          "websites": (0, _1.FlattenedWebsitesToJSON)(value.websites),
          "models": value.models === void 0 ? void 0 : (0, runtime_1.mapValues)(value.models, _1.PersonModelToJSON),
          "annotations": (0, _1.FlattenedAnnotationsToJSON)(value.annotations),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.PersonToJSON = PersonToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PersonAccess.js
  var require_PersonAccess = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PersonAccess.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonAccessToJSON = exports.PersonAccessFromJSONTyped = exports.PersonAccessFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonAccessFromJSON(json) {
        return PersonAccessFromJSONTyped(json, false);
      }
      exports.PersonAccessFromJSON = PersonAccessFromJSON;
      function PersonAccessFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "scoped": !(0, runtime_1.exists)(json, "scoped") ? void 0 : (0, _1.PersonAccessScopedEnumFromJSON)(json["scoped"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"])
        };
      }
      exports.PersonAccessFromJSONTyped = PersonAccessFromJSONTyped;
      function PersonAccessToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "scoped": (0, _1.PersonAccessScopedEnumToJSON)(value.scoped),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted)
        };
      }
      exports.PersonAccessToJSON = PersonAccessToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PersonAccessScopedEnum.js
  var require_PersonAccessScopedEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PersonAccessScopedEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonAccessScopedEnumToJSON = exports.PersonAccessScopedEnumFromJSONTyped = exports.PersonAccessScopedEnumFromJSON = exports.PersonAccessScopedEnum = void 0;
      var PersonAccessScopedEnum;
      (function(PersonAccessScopedEnum2) {
        PersonAccessScopedEnum2["Owner"] = "OWNER";
        PersonAccessScopedEnum2["Editor"] = "EDITOR";
        PersonAccessScopedEnum2["Commenter"] = "COMMENTER";
        PersonAccessScopedEnum2["Viewer"] = "VIEWER";
      })(PersonAccessScopedEnum || (exports.PersonAccessScopedEnum = PersonAccessScopedEnum = {}));
      function PersonAccessScopedEnumFromJSON(json) {
        return PersonAccessScopedEnumFromJSONTyped(json, false);
      }
      exports.PersonAccessScopedEnumFromJSON = PersonAccessScopedEnumFromJSON;
      function PersonAccessScopedEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.PersonAccessScopedEnumFromJSONTyped = PersonAccessScopedEnumFromJSONTyped;
      function PersonAccessScopedEnumToJSON(value) {
        return value;
      }
      exports.PersonAccessScopedEnumToJSON = PersonAccessScopedEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PersonBasicType.js
  var require_PersonBasicType = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PersonBasicType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonBasicTypeToJSON = exports.PersonBasicTypeFromJSONTyped = exports.PersonBasicTypeFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonBasicTypeFromJSON(json) {
        return PersonBasicTypeFromJSONTyped(json, false);
      }
      exports.PersonBasicTypeFromJSON = PersonBasicTypeFromJSON;
      function PersonBasicTypeFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "username": !(0, runtime_1.exists)(json, "username") ? void 0 : json["username"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "picture": !(0, runtime_1.exists)(json, "picture") ? void 0 : json["picture"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "sourced": !(0, runtime_1.exists)(json, "sourced") ? void 0 : (0, _1.ExternallySourcedEnumFromJSON)(json["sourced"]),
          "url": !(0, runtime_1.exists)(json, "url") ? void 0 : json["url"],
          "mailgun": !(0, runtime_1.exists)(json, "mailgun") ? void 0 : (0, _1.MailgunMetadataFromJSON)(json["mailgun"])
        };
      }
      exports.PersonBasicTypeFromJSONTyped = PersonBasicTypeFromJSONTyped;
      function PersonBasicTypeToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "username": value.username,
          "name": value.name,
          "picture": value.picture,
          "email": value.email,
          "sourced": (0, _1.ExternallySourcedEnumToJSON)(value.sourced),
          "url": value.url,
          "mailgun": (0, _1.MailgunMetadataToJSON)(value.mailgun)
        };
      }
      exports.PersonBasicTypeToJSON = PersonBasicTypeToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PersonModel.js
  var require_PersonModel = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PersonModel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonModelToJSON = exports.PersonModelFromJSONTyped = exports.PersonModelFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonModelFromJSON(json) {
        return PersonModelFromJSONTyped(json, false);
      }
      exports.PersonModelFromJSON = PersonModelFromJSON;
      function PersonModelFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "explanation": !(0, runtime_1.exists)(json, "explanation") ? void 0 : (0, _1.ReferencedAnnotationFromJSON)(json["explanation"])
        };
      }
      exports.PersonModelFromJSONTyped = PersonModelFromJSONTyped;
      function PersonModelToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "explanation": (0, _1.ReferencedAnnotationToJSON)(value.explanation)
        };
      }
      exports.PersonModelToJSON = PersonModelToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PersonType.js
  var require_PersonType = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PersonType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonTypeToJSON = exports.PersonTypeFromJSONTyped = exports.PersonTypeFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonTypeFromJSON(json) {
        return PersonTypeFromJSONTyped(json, false);
      }
      exports.PersonTypeFromJSON = PersonTypeFromJSON;
      function PersonTypeFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "basic": !(0, runtime_1.exists)(json, "basic") ? void 0 : (0, _1.PersonBasicTypeFromJSON)(json["basic"]),
          "platform": !(0, runtime_1.exists)(json, "platform") ? void 0 : (0, _1.UserProfileFromJSON)(json["platform"])
        };
      }
      exports.PersonTypeFromJSONTyped = PersonTypeFromJSONTyped;
      function PersonTypeToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "basic": (0, _1.PersonBasicTypeToJSON)(value.basic),
          "platform": (0, _1.UserProfileToJSON)(value.platform)
        };
      }
      exports.PersonTypeToJSON = PersonTypeToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Persons.js
  var require_Persons = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Persons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonsToJSON = exports.PersonsFromJSONTyped = exports.PersonsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PersonsFromJSON(json) {
        return PersonsFromJSONTyped(json, false);
      }
      exports.PersonsFromJSON = PersonsFromJSON;
      function PersonsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.PersonFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.PersonsFromJSONTyped = PersonsFromJSONTyped;
      function PersonsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.PersonToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.PersonsToJSON = PersonsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PlatformEnum.js
  var require_PlatformEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PlatformEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PlatformEnumToJSON = exports.PlatformEnumFromJSONTyped = exports.PlatformEnumFromJSON = exports.PlatformEnum = void 0;
      var PlatformEnum;
      (function(PlatformEnum2) {
        PlatformEnum2["Web"] = "WEB";
        PlatformEnum2["Macos"] = "MACOS";
        PlatformEnum2["Linux"] = "LINUX";
        PlatformEnum2["Windows"] = "WINDOWS";
        PlatformEnum2["Fuchsia"] = "FUCHSIA";
        PlatformEnum2["Ios"] = "IOS";
        PlatformEnum2["Android"] = "ANDROID";
        PlatformEnum2["Unknown"] = "UNKNOWN";
      })(PlatformEnum || (exports.PlatformEnum = PlatformEnum = {}));
      function PlatformEnumFromJSON(json) {
        return PlatformEnumFromJSONTyped(json, false);
      }
      exports.PlatformEnumFromJSON = PlatformEnumFromJSON;
      function PlatformEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.PlatformEnumFromJSONTyped = PlatformEnumFromJSONTyped;
      function PlatformEnumToJSON(value) {
        return value;
      }
      exports.PlatformEnumToJSON = PlatformEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PrecreatedExternalProviderApiKey.js
  var require_PrecreatedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PrecreatedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PrecreatedExternalProviderApiKeyToJSON = exports.PrecreatedExternalProviderApiKeyFromJSONTyped = exports.PrecreatedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PrecreatedExternalProviderApiKeyFromJSON(json) {
        return PrecreatedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.PrecreatedExternalProviderApiKeyFromJSON = PrecreatedExternalProviderApiKeyFromJSON;
      function PrecreatedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": json["user"],
          "openAI": !(0, runtime_1.exists)(json, "open_AI") ? void 0 : (0, _1.Auth0OpenAIUserMetadataFromJSON)(json["open_AI"])
        };
      }
      exports.PrecreatedExternalProviderApiKeyFromJSONTyped = PrecreatedExternalProviderApiKeyFromJSONTyped;
      function PrecreatedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": value.user,
          "open_AI": (0, _1.Auth0OpenAIUserMetadataToJSON)(value.openAI)
        };
      }
      exports.PrecreatedExternalProviderApiKeyToJSON = PrecreatedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PredeletedExternalProviderApiKey.js
  var require_PredeletedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PredeletedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PredeletedExternalProviderApiKeyToJSON = exports.PredeletedExternalProviderApiKeyFromJSONTyped = exports.PredeletedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PredeletedExternalProviderApiKeyFromJSON(json) {
        return PredeletedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.PredeletedExternalProviderApiKeyFromJSON = PredeletedExternalProviderApiKeyFromJSON;
      function PredeletedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": json["user"],
          "openAI": !(0, runtime_1.exists)(json, "open_AI") ? void 0 : json["open_AI"]
        };
      }
      exports.PredeletedExternalProviderApiKeyFromJSONTyped = PredeletedExternalProviderApiKeyFromJSONTyped;
      function PredeletedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": value.user,
          "open_AI": value.openAI
        };
      }
      exports.PredeletedExternalProviderApiKeyToJSON = PredeletedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PreupdatedExternalProviderApiKey.js
  var require_PreupdatedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PreupdatedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PreupdatedExternalProviderApiKeyToJSON = exports.PreupdatedExternalProviderApiKeyFromJSONTyped = exports.PreupdatedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PreupdatedExternalProviderApiKeyFromJSON(json) {
        return PreupdatedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.PreupdatedExternalProviderApiKeyFromJSON = PreupdatedExternalProviderApiKeyFromJSON;
      function PreupdatedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": json["user"],
          "openAI": !(0, runtime_1.exists)(json, "open_AI") ? void 0 : (0, _1.Auth0OpenAIUserMetadataFromJSON)(json["open_AI"])
        };
      }
      exports.PreupdatedExternalProviderApiKeyFromJSONTyped = PreupdatedExternalProviderApiKeyFromJSONTyped;
      function PreupdatedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": value.user,
          "open_AI": (0, _1.Auth0OpenAIUserMetadataToJSON)(value.openAI)
        };
      }
      exports.PreupdatedExternalProviderApiKeyToJSON = PreupdatedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Preview.js
  var require_Preview = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Preview.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PreviewToJSON = exports.PreviewFromJSONTyped = exports.PreviewFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PreviewFromJSON(json) {
        return PreviewFromJSONTyped(json, false);
      }
      exports.PreviewFromJSON = PreviewFromJSON;
      function PreviewFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "base": (0, _1.ReferencedFormatFromJSON)(json["base"]),
          "overlay": !(0, runtime_1.exists)(json, "overlay") ? void 0 : (0, _1.ReferencedFormatFromJSON)(json["overlay"])
        };
      }
      exports.PreviewFromJSONTyped = PreviewFromJSONTyped;
      function PreviewToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "base": (0, _1.ReferencedFormatToJSON)(value.base),
          "overlay": (0, _1.ReferencedFormatToJSON)(value.overlay)
        };
      }
      exports.PreviewToJSON = PreviewToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PrivacyEnum.js
  var require_PrivacyEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PrivacyEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PrivacyEnumToJSON = exports.PrivacyEnumFromJSONTyped = exports.PrivacyEnumFromJSON = exports.PrivacyEnum = void 0;
      var PrivacyEnum;
      (function(PrivacyEnum2) {
        PrivacyEnum2["Open"] = "OPEN";
        PrivacyEnum2["Closed"] = "CLOSED";
        PrivacyEnum2["Anonymous"] = "ANONYMOUS";
      })(PrivacyEnum || (exports.PrivacyEnum = PrivacyEnum = {}));
      function PrivacyEnumFromJSON(json) {
        return PrivacyEnumFromJSONTyped(json, false);
      }
      exports.PrivacyEnumFromJSON = PrivacyEnumFromJSON;
      function PrivacyEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.PrivacyEnumFromJSONTyped = PrivacyEnumFromJSONTyped;
      function PrivacyEnumToJSON(value) {
        return value;
      }
      exports.PrivacyEnumToJSON = PrivacyEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/PseudoAssets.js
  var require_PseudoAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/PseudoAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PseudoAssetsToJSON = exports.PseudoAssetsFromJSONTyped = exports.PseudoAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function PseudoAssetsFromJSON(json) {
        return PseudoAssetsFromJSONTyped(json, false);
      }
      exports.PseudoAssetsFromJSON = PseudoAssetsFromJSON;
      function PseudoAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifiers": !(0, runtime_1.exists)(json, "identifiers") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["identifiers"])
        };
      }
      exports.PseudoAssetsFromJSONTyped = PseudoAssetsFromJSONTyped;
      function PseudoAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifiers": (0, _1.FlattenedAssetsToJSON)(value.identifiers)
        };
      }
      exports.PseudoAssetsToJSON = PseudoAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversation.js
  var require_QGPTConversation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTConversationToJSON = exports.QGPTConversationFromJSONTyped = exports.QGPTConversationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTConversationFromJSON(json) {
        return QGPTConversationFromJSONTyped(json, false);
      }
      exports.QGPTConversationFromJSON = QGPTConversationFromJSON;
      function QGPTConversationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": !(0, runtime_1.exists)(json, "iterable") ? void 0 : json["iterable"].map(_1.QGPTConversationMessageFromJSON)
        };
      }
      exports.QGPTConversationFromJSONTyped = QGPTConversationFromJSONTyped;
      function QGPTConversationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable === void 0 ? void 0 : value.iterable.map(_1.QGPTConversationMessageToJSON)
        };
      }
      exports.QGPTConversationToJSON = QGPTConversationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversationMessage.js
  var require_QGPTConversationMessage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversationMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTConversationMessageToJSON = exports.QGPTConversationMessageFromJSONTyped = exports.QGPTConversationMessageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTConversationMessageFromJSON(json) {
        return QGPTConversationMessageFromJSONTyped(json, false);
      }
      exports.QGPTConversationMessageFromJSON = QGPTConversationMessageFromJSON;
      function QGPTConversationMessageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "role": (0, _1.QGPTConversationMessageRoleEnumFromJSON)(json["role"]),
          "timestamp": (0, _1.GroupedTimestampFromJSON)(json["timestamp"])
        };
      }
      exports.QGPTConversationMessageFromJSONTyped = QGPTConversationMessageFromJSONTyped;
      function QGPTConversationMessageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "role": (0, _1.QGPTConversationMessageRoleEnumToJSON)(value.role),
          "timestamp": (0, _1.GroupedTimestampToJSON)(value.timestamp)
        };
      }
      exports.QGPTConversationMessageToJSON = QGPTConversationMessageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversationMessageRoleEnum.js
  var require_QGPTConversationMessageRoleEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTConversationMessageRoleEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTConversationMessageRoleEnumToJSON = exports.QGPTConversationMessageRoleEnumFromJSONTyped = exports.QGPTConversationMessageRoleEnumFromJSON = exports.QGPTConversationMessageRoleEnum = void 0;
      var QGPTConversationMessageRoleEnum;
      (function(QGPTConversationMessageRoleEnum2) {
        QGPTConversationMessageRoleEnum2["User"] = "USER";
        QGPTConversationMessageRoleEnum2["System"] = "SYSTEM";
        QGPTConversationMessageRoleEnum2["Assistant"] = "ASSISTANT";
      })(QGPTConversationMessageRoleEnum || (exports.QGPTConversationMessageRoleEnum = QGPTConversationMessageRoleEnum = {}));
      function QGPTConversationMessageRoleEnumFromJSON(json) {
        return QGPTConversationMessageRoleEnumFromJSONTyped(json, false);
      }
      exports.QGPTConversationMessageRoleEnumFromJSON = QGPTConversationMessageRoleEnumFromJSON;
      function QGPTConversationMessageRoleEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.QGPTConversationMessageRoleEnumFromJSONTyped = QGPTConversationMessageRoleEnumFromJSONTyped;
      function QGPTConversationMessageRoleEnumToJSON(value) {
        return value;
      }
      exports.QGPTConversationMessageRoleEnumToJSON = QGPTConversationMessageRoleEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTHintsInput.js
  var require_QGPTHintsInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTHintsInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTHintsInputToJSON = exports.QGPTHintsInputFromJSONTyped = exports.QGPTHintsInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTHintsInputFromJSON(json) {
        return QGPTHintsInputFromJSONTyped(json, false);
      }
      exports.QGPTHintsInputFromJSON = QGPTHintsInputFromJSON;
      function QGPTHintsInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "query": !(0, runtime_1.exists)(json, "query") ? void 0 : json["query"],
          "answer": !(0, runtime_1.exists)(json, "answer") ? void 0 : (0, _1.QGPTQuestionAnswerFromJSON)(json["answer"]),
          "relevant": (0, _1.RelevantQGPTSeedsFromJSON)(json["relevant"]),
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : json["application"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"]
        };
      }
      exports.QGPTHintsInputFromJSONTyped = QGPTHintsInputFromJSONTyped;
      function QGPTHintsInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "query": value.query,
          "answer": (0, _1.QGPTQuestionAnswerToJSON)(value.answer),
          "relevant": (0, _1.RelevantQGPTSeedsToJSON)(value.relevant),
          "application": value.application,
          "model": value.model
        };
      }
      exports.QGPTHintsInputToJSON = QGPTHintsInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTPersonsRelatedInput.js
  var require_QGPTPersonsRelatedInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTPersonsRelatedInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTPersonsRelatedInputToJSON = exports.QGPTPersonsRelatedInputFromJSONTyped = exports.QGPTPersonsRelatedInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTPersonsRelatedInputFromJSON(json) {
        return QGPTPersonsRelatedInputFromJSONTyped(json, false);
      }
      exports.QGPTPersonsRelatedInputFromJSON = QGPTPersonsRelatedInputFromJSON;
      function QGPTPersonsRelatedInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "seed": !(0, runtime_1.exists)(json, "seed") ? void 0 : (0, _1.SeedFromJSON)(json["seed"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.QGPTConversationFromJSON)(json["conversation"]),
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : json["application"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"]
        };
      }
      exports.QGPTPersonsRelatedInputFromJSONTyped = QGPTPersonsRelatedInputFromJSONTyped;
      function QGPTPersonsRelatedInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "seed": (0, _1.SeedToJSON)(value.seed),
          "conversation": (0, _1.QGPTConversationToJSON)(value.conversation),
          "application": value.application,
          "model": value.model
        };
      }
      exports.QGPTPersonsRelatedInputToJSON = QGPTPersonsRelatedInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTPersonsRelatedOutput.js
  var require_QGPTPersonsRelatedOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTPersonsRelatedOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTPersonsRelatedOutputToJSON = exports.QGPTPersonsRelatedOutputFromJSONTyped = exports.QGPTPersonsRelatedOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTPersonsRelatedOutputFromJSON(json) {
        return QGPTPersonsRelatedOutputFromJSONTyped(json, false);
      }
      exports.QGPTPersonsRelatedOutputFromJSON = QGPTPersonsRelatedOutputFromJSON;
      function QGPTPersonsRelatedOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "persons": (0, _1.PersonsFromJSON)(json["persons"]),
          "explanations": !(0, runtime_1.exists)(json, "explanations") ? void 0 : json["explanations"]
        };
      }
      exports.QGPTPersonsRelatedOutputFromJSONTyped = QGPTPersonsRelatedOutputFromJSONTyped;
      function QGPTPersonsRelatedOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "persons": (0, _1.PersonsToJSON)(value.persons),
          "explanations": value.explanations
        };
      }
      exports.QGPTPersonsRelatedOutputToJSON = QGPTPersonsRelatedOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionAnswer.js
  var require_QGPTQuestionAnswer = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionAnswer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTQuestionAnswerToJSON = exports.QGPTQuestionAnswerFromJSONTyped = exports.QGPTQuestionAnswerFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTQuestionAnswerFromJSON(json) {
        return QGPTQuestionAnswerFromJSONTyped(json, false);
      }
      exports.QGPTQuestionAnswerFromJSON = QGPTQuestionAnswerFromJSON;
      function QGPTQuestionAnswerFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "score": json["score"],
          "text": json["text"]
        };
      }
      exports.QGPTQuestionAnswerFromJSONTyped = QGPTQuestionAnswerFromJSONTyped;
      function QGPTQuestionAnswerToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "score": value.score,
          "text": value.text
        };
      }
      exports.QGPTQuestionAnswerToJSON = QGPTQuestionAnswerToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionAnswers.js
  var require_QGPTQuestionAnswers = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionAnswers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTQuestionAnswersToJSON = exports.QGPTQuestionAnswersFromJSONTyped = exports.QGPTQuestionAnswersFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTQuestionAnswersFromJSON(json) {
        return QGPTQuestionAnswersFromJSONTyped(json, false);
      }
      exports.QGPTQuestionAnswersFromJSON = QGPTQuestionAnswersFromJSON;
      function QGPTQuestionAnswersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.QGPTQuestionAnswerFromJSON)
        };
      }
      exports.QGPTQuestionAnswersFromJSONTyped = QGPTQuestionAnswersFromJSONTyped;
      function QGPTQuestionAnswersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.QGPTQuestionAnswerToJSON)
        };
      }
      exports.QGPTQuestionAnswersToJSON = QGPTQuestionAnswersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionInput.js
  var require_QGPTQuestionInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTQuestionInputToJSON = exports.QGPTQuestionInputFromJSONTyped = exports.QGPTQuestionInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTQuestionInputFromJSON(json) {
        return QGPTQuestionInputFromJSONTyped(json, false);
      }
      exports.QGPTQuestionInputFromJSON = QGPTQuestionInputFromJSON;
      function QGPTQuestionInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "relevant": (0, _1.RelevantQGPTSeedsFromJSON)(json["relevant"]),
          "query": json["query"],
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : json["application"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"],
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.QGPTQuestionInputFromJSONTyped = QGPTQuestionInputFromJSONTyped;
      function QGPTQuestionInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "relevant": (0, _1.RelevantQGPTSeedsToJSON)(value.relevant),
          "query": value.query,
          "application": value.application,
          "model": value.model,
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.QGPTQuestionInputToJSON = QGPTQuestionInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionOutput.js
  var require_QGPTQuestionOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTQuestionOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTQuestionOutputToJSON = exports.QGPTQuestionOutputFromJSONTyped = exports.QGPTQuestionOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTQuestionOutputFromJSON(json) {
        return QGPTQuestionOutputFromJSONTyped(json, false);
      }
      exports.QGPTQuestionOutputFromJSON = QGPTQuestionOutputFromJSON;
      function QGPTQuestionOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "answers": (0, _1.QGPTQuestionAnswersFromJSON)(json["answers"])
        };
      }
      exports.QGPTQuestionOutputFromJSONTyped = QGPTQuestionOutputFromJSONTyped;
      function QGPTQuestionOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "answers": (0, _1.QGPTQuestionAnswersToJSON)(value.answers)
        };
      }
      exports.QGPTQuestionOutputToJSON = QGPTQuestionOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceInput.js
  var require_QGPTRelevanceInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTRelevanceInputToJSON = exports.QGPTRelevanceInputFromJSONTyped = exports.QGPTRelevanceInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTRelevanceInputFromJSON(json) {
        return QGPTRelevanceInputFromJSONTyped(json, false);
      }
      exports.QGPTRelevanceInputFromJSON = QGPTRelevanceInputFromJSON;
      function QGPTRelevanceInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "query": json["query"],
          "paths": !(0, runtime_1.exists)(json, "paths") ? void 0 : json["paths"],
          "seeds": !(0, runtime_1.exists)(json, "seeds") ? void 0 : (0, _1.SeedsFromJSON)(json["seeds"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"]),
          "options": !(0, runtime_1.exists)(json, "options") ? void 0 : (0, _1.QGPTRelevanceInputOptionsFromJSON)(json["options"]),
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : json["application"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"]
        };
      }
      exports.QGPTRelevanceInputFromJSONTyped = QGPTRelevanceInputFromJSONTyped;
      function QGPTRelevanceInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "query": value.query,
          "paths": value.paths,
          "seeds": (0, _1.SeedsToJSON)(value.seeds),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages),
          "options": (0, _1.QGPTRelevanceInputOptionsToJSON)(value.options),
          "application": value.application,
          "model": value.model
        };
      }
      exports.QGPTRelevanceInputToJSON = QGPTRelevanceInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceInputOptions.js
  var require_QGPTRelevanceInputOptions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceInputOptions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTRelevanceInputOptionsToJSON = exports.QGPTRelevanceInputOptionsFromJSONTyped = exports.QGPTRelevanceInputOptionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTRelevanceInputOptionsFromJSON(json) {
        return QGPTRelevanceInputOptionsFromJSONTyped(json, false);
      }
      exports.QGPTRelevanceInputOptionsFromJSON = QGPTRelevanceInputOptionsFromJSON;
      function QGPTRelevanceInputOptionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "database": !(0, runtime_1.exists)(json, "database") ? void 0 : json["database"],
          "question": !(0, runtime_1.exists)(json, "question") ? void 0 : json["question"]
        };
      }
      exports.QGPTRelevanceInputOptionsFromJSONTyped = QGPTRelevanceInputOptionsFromJSONTyped;
      function QGPTRelevanceInputOptionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "database": value.database,
          "question": value.question
        };
      }
      exports.QGPTRelevanceInputOptionsToJSON = QGPTRelevanceInputOptionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceOutput.js
  var require_QGPTRelevanceOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRelevanceOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTRelevanceOutputToJSON = exports.QGPTRelevanceOutputFromJSONTyped = exports.QGPTRelevanceOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTRelevanceOutputFromJSON(json) {
        return QGPTRelevanceOutputFromJSONTyped(json, false);
      }
      exports.QGPTRelevanceOutputFromJSON = QGPTRelevanceOutputFromJSON;
      function QGPTRelevanceOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "answer": !(0, runtime_1.exists)(json, "answer") ? void 0 : (0, _1.QGPTQuestionOutputFromJSON)(json["answer"]),
          "relevant": (0, _1.RelevantQGPTSeedsFromJSON)(json["relevant"])
        };
      }
      exports.QGPTRelevanceOutputFromJSONTyped = QGPTRelevanceOutputFromJSONTyped;
      function QGPTRelevanceOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "answer": (0, _1.QGPTQuestionOutputToJSON)(value.answer),
          "relevant": (0, _1.RelevantQGPTSeedsToJSON)(value.relevant)
        };
      }
      exports.QGPTRelevanceOutputToJSON = QGPTRelevanceOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRepromptInput.js
  var require_QGPTRepromptInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRepromptInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTRepromptInputToJSON = exports.QGPTRepromptInputFromJSONTyped = exports.QGPTRepromptInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTRepromptInputFromJSON(json) {
        return QGPTRepromptInputFromJSONTyped(json, false);
      }
      exports.QGPTRepromptInputFromJSON = QGPTRepromptInputFromJSON;
      function QGPTRepromptInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "query": json["query"],
          "conversation": (0, _1.QGPTConversationFromJSON)(json["conversation"]),
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : json["application"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"]
        };
      }
      exports.QGPTRepromptInputFromJSONTyped = QGPTRepromptInputFromJSONTyped;
      function QGPTRepromptInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "query": value.query,
          "conversation": (0, _1.QGPTConversationToJSON)(value.conversation),
          "application": value.application,
          "model": value.model
        };
      }
      exports.QGPTRepromptInputToJSON = QGPTRepromptInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRepromptOutput.js
  var require_QGPTRepromptOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTRepromptOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTRepromptOutputToJSON = exports.QGPTRepromptOutputFromJSONTyped = exports.QGPTRepromptOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTRepromptOutputFromJSON(json) {
        return QGPTRepromptOutputFromJSONTyped(json, false);
      }
      exports.QGPTRepromptOutputFromJSON = QGPTRepromptOutputFromJSON;
      function QGPTRepromptOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "query": json["query"]
        };
      }
      exports.QGPTRepromptOutputFromJSONTyped = QGPTRepromptOutputFromJSONTyped;
      function QGPTRepromptOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "query": value.query
        };
      }
      exports.QGPTRepromptOutputToJSON = QGPTRepromptOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamEnum.js
  var require_QGPTStreamEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTStreamEnumToJSON = exports.QGPTStreamEnumFromJSONTyped = exports.QGPTStreamEnumFromJSON = exports.QGPTStreamEnum = void 0;
      var QGPTStreamEnum;
      (function(QGPTStreamEnum2) {
        QGPTStreamEnum2["Canceled"] = "CANCELED";
        QGPTStreamEnum2["Initialized"] = "INITIALIZED";
        QGPTStreamEnum2["InProgress"] = "IN-PROGRESS";
        QGPTStreamEnum2["Completed"] = "COMPLETED";
        QGPTStreamEnum2["Failed"] = "FAILED";
        QGPTStreamEnum2["Unknown"] = "UNKNOWN";
        QGPTStreamEnum2["Stopped"] = "STOPPED";
        QGPTStreamEnum2["Reset"] = "RESET";
      })(QGPTStreamEnum || (exports.QGPTStreamEnum = QGPTStreamEnum = {}));
      function QGPTStreamEnumFromJSON(json) {
        return QGPTStreamEnumFromJSONTyped(json, false);
      }
      exports.QGPTStreamEnumFromJSON = QGPTStreamEnumFromJSON;
      function QGPTStreamEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.QGPTStreamEnumFromJSONTyped = QGPTStreamEnumFromJSONTyped;
      function QGPTStreamEnumToJSON(value) {
        return value;
      }
      exports.QGPTStreamEnumToJSON = QGPTStreamEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamInput.js
  var require_QGPTStreamInput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTStreamInputToJSON = exports.QGPTStreamInputFromJSONTyped = exports.QGPTStreamInputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTStreamInputFromJSON(json) {
        return QGPTStreamInputFromJSONTyped(json, false);
      }
      exports.QGPTStreamInputFromJSON = QGPTStreamInputFromJSON;
      function QGPTStreamInputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "relevance": !(0, runtime_1.exists)(json, "relevance") ? void 0 : (0, _1.QGPTRelevanceInputFromJSON)(json["relevance"]),
          "question": !(0, runtime_1.exists)(json, "question") ? void 0 : (0, _1.QGPTQuestionInputFromJSON)(json["question"]),
          "request": !(0, runtime_1.exists)(json, "request") ? void 0 : json["request"],
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : json["conversation"],
          "stop": !(0, runtime_1.exists)(json, "stop") ? void 0 : json["stop"]
        };
      }
      exports.QGPTStreamInputFromJSONTyped = QGPTStreamInputFromJSONTyped;
      function QGPTStreamInputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "relevance": (0, _1.QGPTRelevanceInputToJSON)(value.relevance),
          "question": (0, _1.QGPTQuestionInputToJSON)(value.question),
          "request": value.request,
          "conversation": value.conversation,
          "stop": value.stop
        };
      }
      exports.QGPTStreamInputToJSON = QGPTStreamInputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamOutput.js
  var require_QGPTStreamOutput = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/QGPTStreamOutput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTStreamOutputToJSON = exports.QGPTStreamOutputFromJSONTyped = exports.QGPTStreamOutputFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function QGPTStreamOutputFromJSON2(json) {
        return QGPTStreamOutputFromJSONTyped(json, false);
      }
      exports.QGPTStreamOutputFromJSON = QGPTStreamOutputFromJSON2;
      function QGPTStreamOutputFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "request": !(0, runtime_1.exists)(json, "request") ? void 0 : json["request"],
          "relevance": !(0, runtime_1.exists)(json, "relevance") ? void 0 : (0, _1.QGPTRelevanceOutputFromJSON)(json["relevance"]),
          "question": !(0, runtime_1.exists)(json, "question") ? void 0 : (0, _1.QGPTQuestionOutputFromJSON)(json["question"]),
          "status": !(0, runtime_1.exists)(json, "status") ? void 0 : (0, _1.QGPTStreamEnumFromJSON)(json["status"]),
          "conversation": json["conversation"],
          "statusCode": !(0, runtime_1.exists)(json, "statusCode") ? void 0 : json["statusCode"],
          "errorMessage": !(0, runtime_1.exists)(json, "errorMessage") ? void 0 : json["errorMessage"]
        };
      }
      exports.QGPTStreamOutputFromJSONTyped = QGPTStreamOutputFromJSONTyped;
      function QGPTStreamOutputToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "request": value.request,
          "relevance": (0, _1.QGPTRelevanceOutputToJSON)(value.relevance),
          "question": (0, _1.QGPTQuestionOutputToJSON)(value.question),
          "status": (0, _1.QGPTStreamEnumToJSON)(value.status),
          "conversation": value.conversation,
          "statusCode": value.statusCode,
          "errorMessage": value.errorMessage
        };
      }
      exports.QGPTStreamOutputToJSON = QGPTStreamOutputToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Reaction.js
  var require_Reaction = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Reaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReactionToJSON = exports.ReactionFromJSONTyped = exports.ReactionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReactionFromJSON(json) {
        return ReactionFromJSONTyped(json, false);
      }
      exports.ReactionFromJSON = ReactionFromJSON;
      function ReactionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "save": json["save"],
          "reuse": !(0, runtime_1.exists)(json, "reuse") ? void 0 : (0, _1.ReuseReactionFromJSON)(json["reuse"]),
          "seed": (0, _1.SeededConnectorCreationFromJSON)(json["seed"])
        };
      }
      exports.ReactionFromJSONTyped = ReactionFromJSONTyped;
      function ReactionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "save": value.save,
          "reuse": (0, _1.ReuseReactionToJSON)(value.reuse),
          "seed": (0, _1.SeededConnectorCreationToJSON)(value.seed)
        };
      }
      exports.ReactionToJSON = ReactionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Recipients.js
  var require_Recipients = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Recipients.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RecipientsToJSON = exports.RecipientsFromJSONTyped = exports.RecipientsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function RecipientsFromJSON(json) {
        return RecipientsFromJSONTyped(json, false);
      }
      exports.RecipientsFromJSON = RecipientsFromJSON;
      function RecipientsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.PersonBasicTypeFromJSON),
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"])
        };
      }
      exports.RecipientsFromJSONTyped = RecipientsFromJSONTyped;
      function RecipientsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.PersonBasicTypeToJSON),
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema)
        };
      }
      exports.RecipientsToJSON = RecipientsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedActivity.js
  var require_ReferencedActivity = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedActivity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedActivityToJSON = exports.ReferencedActivityFromJSONTyped = exports.ReferencedActivityFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedActivityFromJSON(json) {
        return ReferencedActivityFromJSONTyped(json, false);
      }
      exports.ReferencedActivityFromJSON = ReferencedActivityFromJSON;
      function ReferencedActivityFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedActivityFromJSON)(json["reference"])
        };
      }
      exports.ReferencedActivityFromJSONTyped = ReferencedActivityFromJSONTyped;
      function ReferencedActivityToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedActivityToJSON)(value.reference)
        };
      }
      exports.ReferencedActivityToJSON = ReferencedActivityToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnchor.js
  var require_ReferencedAnchor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnchor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedAnchorToJSON = exports.ReferencedAnchorFromJSONTyped = exports.ReferencedAnchorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedAnchorFromJSON(json) {
        return ReferencedAnchorFromJSONTyped(json, false);
      }
      exports.ReferencedAnchorFromJSON = ReferencedAnchorFromJSON;
      function ReferencedAnchorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedAnchorFromJSON)(json["reference"])
        };
      }
      exports.ReferencedAnchorFromJSONTyped = ReferencedAnchorFromJSONTyped;
      function ReferencedAnchorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedAnchorToJSON)(value.reference)
        };
      }
      exports.ReferencedAnchorToJSON = ReferencedAnchorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnchorPoint.js
  var require_ReferencedAnchorPoint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnchorPoint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedAnchorPointToJSON = exports.ReferencedAnchorPointFromJSONTyped = exports.ReferencedAnchorPointFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedAnchorPointFromJSON(json) {
        return ReferencedAnchorPointFromJSONTyped(json, false);
      }
      exports.ReferencedAnchorPointFromJSON = ReferencedAnchorPointFromJSON;
      function ReferencedAnchorPointFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedAnchorPointFromJSON)(json["reference"])
        };
      }
      exports.ReferencedAnchorPointFromJSONTyped = ReferencedAnchorPointFromJSONTyped;
      function ReferencedAnchorPointToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedAnchorPointToJSON)(value.reference)
        };
      }
      exports.ReferencedAnchorPointToJSON = ReferencedAnchorPointToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnnotation.js
  var require_ReferencedAnnotation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAnnotation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedAnnotationToJSON = exports.ReferencedAnnotationFromJSONTyped = exports.ReferencedAnnotationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedAnnotationFromJSON(json) {
        return ReferencedAnnotationFromJSONTyped(json, false);
      }
      exports.ReferencedAnnotationFromJSON = ReferencedAnnotationFromJSON;
      function ReferencedAnnotationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedAnnotationFromJSON)(json["reference"])
        };
      }
      exports.ReferencedAnnotationFromJSONTyped = ReferencedAnnotationFromJSONTyped;
      function ReferencedAnnotationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedAnnotationToJSON)(value.reference)
        };
      }
      exports.ReferencedAnnotationToJSON = ReferencedAnnotationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAsset.js
  var require_ReferencedAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedAssetToJSON = exports.ReferencedAssetFromJSONTyped = exports.ReferencedAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedAssetFromJSON(json) {
        return ReferencedAssetFromJSONTyped(json, false);
      }
      exports.ReferencedAssetFromJSON = ReferencedAssetFromJSON;
      function ReferencedAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedAssetFromJSON)(json["reference"])
        };
      }
      exports.ReferencedAssetFromJSONTyped = ReferencedAssetFromJSONTyped;
      function ReferencedAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedAssetToJSON)(value.reference)
        };
      }
      exports.ReferencedAssetToJSON = ReferencedAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedConversation.js
  var require_ReferencedConversation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedConversation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedConversationToJSON = exports.ReferencedConversationFromJSONTyped = exports.ReferencedConversationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedConversationFromJSON(json) {
        return ReferencedConversationFromJSONTyped(json, false);
      }
      exports.ReferencedConversationFromJSON = ReferencedConversationFromJSON;
      function ReferencedConversationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedConversationFromJSON)(json["reference"])
        };
      }
      exports.ReferencedConversationFromJSONTyped = ReferencedConversationFromJSONTyped;
      function ReferencedConversationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedConversationToJSON)(value.reference)
        };
      }
      exports.ReferencedConversationToJSON = ReferencedConversationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedConversationMessage.js
  var require_ReferencedConversationMessage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedConversationMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedConversationMessageToJSON = exports.ReferencedConversationMessageFromJSONTyped = exports.ReferencedConversationMessageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedConversationMessageFromJSON(json) {
        return ReferencedConversationMessageFromJSONTyped(json, false);
      }
      exports.ReferencedConversationMessageFromJSON = ReferencedConversationMessageFromJSON;
      function ReferencedConversationMessageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedConversationMessageFromJSON)(json["reference"])
        };
      }
      exports.ReferencedConversationMessageFromJSONTyped = ReferencedConversationMessageFromJSONTyped;
      function ReferencedConversationMessageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedConversationMessageToJSON)(value.reference)
        };
      }
      exports.ReferencedConversationMessageToJSON = ReferencedConversationMessageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedDistribution.js
  var require_ReferencedDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedDistributionToJSON = exports.ReferencedDistributionFromJSONTyped = exports.ReferencedDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedDistributionFromJSON(json) {
        return ReferencedDistributionFromJSONTyped(json, false);
      }
      exports.ReferencedDistributionFromJSON = ReferencedDistributionFromJSON;
      function ReferencedDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedDistributionFromJSON)(json["reference"])
        };
      }
      exports.ReferencedDistributionFromJSONTyped = ReferencedDistributionFromJSONTyped;
      function ReferencedDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedDistributionToJSON)(value.reference)
        };
      }
      exports.ReferencedDistributionToJSON = ReferencedDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedFormat.js
  var require_ReferencedFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedFormatToJSON = exports.ReferencedFormatFromJSONTyped = exports.ReferencedFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedFormatFromJSON(json) {
        return ReferencedFormatFromJSONTyped(json, false);
      }
      exports.ReferencedFormatFromJSON = ReferencedFormatFromJSON;
      function ReferencedFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedFormatFromJSON)(json["reference"])
        };
      }
      exports.ReferencedFormatFromJSONTyped = ReferencedFormatFromJSONTyped;
      function ReferencedFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedFormatToJSON)(value.reference)
        };
      }
      exports.ReferencedFormatToJSON = ReferencedFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedHint.js
  var require_ReferencedHint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedHint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedHintToJSON = exports.ReferencedHintFromJSONTyped = exports.ReferencedHintFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedHintFromJSON(json) {
        return ReferencedHintFromJSONTyped(json, false);
      }
      exports.ReferencedHintFromJSON = ReferencedHintFromJSON;
      function ReferencedHintFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedHintFromJSON)(json["reference"])
        };
      }
      exports.ReferencedHintFromJSONTyped = ReferencedHintFromJSONTyped;
      function ReferencedHintToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedHintToJSON)(value.reference)
        };
      }
      exports.ReferencedHintToJSON = ReferencedHintToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedModel.js
  var require_ReferencedModel = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedModel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedModelToJSON = exports.ReferencedModelFromJSONTyped = exports.ReferencedModelFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedModelFromJSON(json) {
        return ReferencedModelFromJSONTyped(json, false);
      }
      exports.ReferencedModelFromJSON = ReferencedModelFromJSON;
      function ReferencedModelFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"]
        };
      }
      exports.ReferencedModelFromJSONTyped = ReferencedModelFromJSONTyped;
      function ReferencedModelToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.ReferencedModelToJSON = ReferencedModelToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedPerson.js
  var require_ReferencedPerson = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedPerson.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedPersonToJSON = exports.ReferencedPersonFromJSONTyped = exports.ReferencedPersonFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedPersonFromJSON(json) {
        return ReferencedPersonFromJSONTyped(json, false);
      }
      exports.ReferencedPersonFromJSON = ReferencedPersonFromJSON;
      function ReferencedPersonFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedPersonFromJSON)(json["reference"])
        };
      }
      exports.ReferencedPersonFromJSONTyped = ReferencedPersonFromJSONTyped;
      function ReferencedPersonToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedPersonToJSON)(value.reference)
        };
      }
      exports.ReferencedPersonToJSON = ReferencedPersonToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedSensitive.js
  var require_ReferencedSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedSensitiveToJSON = exports.ReferencedSensitiveFromJSONTyped = exports.ReferencedSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedSensitiveFromJSON(json) {
        return ReferencedSensitiveFromJSONTyped(json, false);
      }
      exports.ReferencedSensitiveFromJSON = ReferencedSensitiveFromJSON;
      function ReferencedSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedSensitiveFromJSON)(json["reference"])
        };
      }
      exports.ReferencedSensitiveFromJSONTyped = ReferencedSensitiveFromJSONTyped;
      function ReferencedSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedSensitiveToJSON)(value.reference)
        };
      }
      exports.ReferencedSensitiveToJSON = ReferencedSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedShare.js
  var require_ReferencedShare = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedShare.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedShareToJSON = exports.ReferencedShareFromJSONTyped = exports.ReferencedShareFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedShareFromJSON(json) {
        return ReferencedShareFromJSONTyped(json, false);
      }
      exports.ReferencedShareFromJSON = ReferencedShareFromJSON;
      function ReferencedShareFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedShareFromJSON)(json["reference"])
        };
      }
      exports.ReferencedShareFromJSONTyped = ReferencedShareFromJSONTyped;
      function ReferencedShareToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedShareToJSON)(value.reference)
        };
      }
      exports.ReferencedShareToJSON = ReferencedShareToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedTag.js
  var require_ReferencedTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedTagToJSON = exports.ReferencedTagFromJSONTyped = exports.ReferencedTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedTagFromJSON(json) {
        return ReferencedTagFromJSONTyped(json, false);
      }
      exports.ReferencedTagFromJSON = ReferencedTagFromJSON;
      function ReferencedTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedTagFromJSON)(json["reference"])
        };
      }
      exports.ReferencedTagFromJSONTyped = ReferencedTagFromJSONTyped;
      function ReferencedTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedTagToJSON)(value.reference)
        };
      }
      exports.ReferencedTagToJSON = ReferencedTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedUser.js
  var require_ReferencedUser = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedUser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedUserToJSON = exports.ReferencedUserFromJSONTyped = exports.ReferencedUserFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedUserFromJSON(json) {
        return ReferencedUserFromJSONTyped(json, false);
      }
      exports.ReferencedUserFromJSON = ReferencedUserFromJSON;
      function ReferencedUserFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedUserProfileFromJSON)(json["reference"])
        };
      }
      exports.ReferencedUserFromJSONTyped = ReferencedUserFromJSONTyped;
      function ReferencedUserToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedUserProfileToJSON)(value.reference)
        };
      }
      exports.ReferencedUserToJSON = ReferencedUserToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedWebsite.js
  var require_ReferencedWebsite = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReferencedWebsite.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReferencedWebsiteToJSON = exports.ReferencedWebsiteFromJSONTyped = exports.ReferencedWebsiteFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReferencedWebsiteFromJSON(json) {
        return ReferencedWebsiteFromJSONTyped(json, false);
      }
      exports.ReferencedWebsiteFromJSON = ReferencedWebsiteFromJSON;
      function ReferencedWebsiteFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : (0, _1.FlattenedWebsiteFromJSON)(json["reference"])
        };
      }
      exports.ReferencedWebsiteFromJSONTyped = ReferencedWebsiteFromJSONTyped;
      function ReferencedWebsiteToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "reference": (0, _1.FlattenedWebsiteToJSON)(value.reference)
        };
      }
      exports.ReferencedWebsiteToJSON = ReferencedWebsiteToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Relationship.js
  var require_Relationship = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Relationship.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelationshipToJSON = exports.RelationshipFromJSONTyped = exports.RelationshipFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function RelationshipFromJSON(json) {
        return RelationshipFromJSONTyped(json, false);
      }
      exports.RelationshipFromJSON = RelationshipFromJSON;
      function RelationshipFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "id": json["id"],
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "embeddings": (0, _1.EmbeddingsFromJSON)(json["embeddings"]),
          "edges": (0, _1.EdgesFromJSON)(json["edges"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"])
        };
      }
      exports.RelationshipFromJSONTyped = RelationshipFromJSONTyped;
      function RelationshipToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "id": value.id,
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "embeddings": (0, _1.EmbeddingsToJSON)(value.embeddings),
          "edges": (0, _1.EdgesToJSON)(value.edges),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted)
        };
      }
      exports.RelationshipToJSON = RelationshipToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Relationships.js
  var require_Relationships = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Relationships.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelationshipsToJSON = exports.RelationshipsFromJSONTyped = exports.RelationshipsFromJSON = void 0;
      var _1 = require_models();
      function RelationshipsFromJSON(json) {
        return RelationshipsFromJSONTyped(json, false);
      }
      exports.RelationshipsFromJSON = RelationshipsFromJSON;
      function RelationshipsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.RelationshipFromJSON)
        };
      }
      exports.RelationshipsFromJSONTyped = RelationshipsFromJSONTyped;
      function RelationshipsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.RelationshipToJSON)
        };
      }
      exports.RelationshipsToJSON = RelationshipsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/RelevantQGPTSeed.js
  var require_RelevantQGPTSeed = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/RelevantQGPTSeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelevantQGPTSeedToJSON = exports.RelevantQGPTSeedFromJSONTyped = exports.RelevantQGPTSeedFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function RelevantQGPTSeedFromJSON(json) {
        return RelevantQGPTSeedFromJSONTyped(json, false);
      }
      exports.RelevantQGPTSeedFromJSON = RelevantQGPTSeedFromJSON;
      function RelevantQGPTSeedFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"],
          "seed": !(0, runtime_1.exists)(json, "seed") ? void 0 : (0, _1.SeedFromJSON)(json["seed"]),
          "path": !(0, runtime_1.exists)(json, "path") ? void 0 : json["path"],
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"])
        };
      }
      exports.RelevantQGPTSeedFromJSONTyped = RelevantQGPTSeedFromJSONTyped;
      function RelevantQGPTSeedToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "seed": (0, _1.SeedToJSON)(value.seed),
          "path": value.path,
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset)
        };
      }
      exports.RelevantQGPTSeedToJSON = RelevantQGPTSeedToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/RelevantQGPTSeeds.js
  var require_RelevantQGPTSeeds = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/RelevantQGPTSeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelevantQGPTSeedsToJSON = exports.RelevantQGPTSeedsFromJSONTyped = exports.RelevantQGPTSeedsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function RelevantQGPTSeedsFromJSON(json) {
        return RelevantQGPTSeedsFromJSONTyped(json, false);
      }
      exports.RelevantQGPTSeedsFromJSON = RelevantQGPTSeedsFromJSON;
      function RelevantQGPTSeedsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.RelevantQGPTSeedFromJSON)
        };
      }
      exports.RelevantQGPTSeedsFromJSONTyped = RelevantQGPTSeedsFromJSONTyped;
      function RelevantQGPTSeedsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.RelevantQGPTSeedToJSON)
        };
      }
      exports.RelevantQGPTSeedsToJSON = RelevantQGPTSeedsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ResultedPKCE.js
  var require_ResultedPKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ResultedPKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResultedPKCEToJSON = exports.ResultedPKCEFromJSONTyped = exports.ResultedPKCEFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ResultedPKCEFromJSON(json) {
        return ResultedPKCEFromJSONTyped(json, false);
      }
      exports.ResultedPKCEFromJSON = ResultedPKCEFromJSON;
      function ResultedPKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "code": json["code"],
          "state": json["state"]
        };
      }
      exports.ResultedPKCEFromJSONTyped = ResultedPKCEFromJSONTyped;
      function ResultedPKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "code": value.code,
          "state": value.state
        };
      }
      exports.ResultedPKCEToJSON = ResultedPKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReturnedUserProfile.js
  var require_ReturnedUserProfile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReturnedUserProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReturnedUserProfileToJSON = exports.ReturnedUserProfileFromJSONTyped = exports.ReturnedUserProfileFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReturnedUserProfileFromJSON(json) {
        return ReturnedUserProfileFromJSONTyped(json, false);
      }
      exports.ReturnedUserProfileFromJSON = ReturnedUserProfileFromJSON;
      function ReturnedUserProfileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.UserProfileFromJSON)(json["user"])
        };
      }
      exports.ReturnedUserProfileFromJSONTyped = ReturnedUserProfileFromJSONTyped;
      function ReturnedUserProfileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": (0, _1.UserProfileToJSON)(value.user)
        };
      }
      exports.ReturnedUserProfileToJSON = ReturnedUserProfileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReuseReaction.js
  var require_ReuseReaction = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReuseReaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReuseReactionToJSON = exports.ReuseReactionFromJSONTyped = exports.ReuseReactionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReuseReactionFromJSON(json) {
        return ReuseReactionFromJSONTyped(json, false);
      }
      exports.ReuseReactionFromJSON = ReuseReactionFromJSON;
      function ReuseReactionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"]
        };
      }
      exports.ReuseReactionFromJSONTyped = ReuseReactionFromJSONTyped;
      function ReuseReactionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset
        };
      }
      exports.ReuseReactionToJSON = ReuseReactionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/ReuseSuggestion.js
  var require_ReuseSuggestion = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/ReuseSuggestion.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReuseSuggestionToJSON = exports.ReuseSuggestionFromJSONTyped = exports.ReuseSuggestionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ReuseSuggestionFromJSON(json) {
        return ReuseSuggestionFromJSONTyped(json, false);
      }
      exports.ReuseSuggestionFromJSON = ReuseSuggestionFromJSON;
      function ReuseSuggestionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "suggested": json["suggested"],
          "assets": (0, _1.AssetsFromJSON)(json["assets"])
        };
      }
      exports.ReuseSuggestionFromJSONTyped = ReuseSuggestionFromJSONTyped;
      function ReuseSuggestionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "suggested": value.suggested,
          "assets": (0, _1.AssetsToJSON)(value.assets)
        };
      }
      exports.ReuseSuggestionToJSON = ReuseSuggestionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/RevokedPKCE.js
  var require_RevokedPKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/RevokedPKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RevokedPKCEToJSON = exports.RevokedPKCEFromJSONTyped = exports.RevokedPKCEFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function RevokedPKCEFromJSON(json) {
        return RevokedPKCEFromJSONTyped(json, false);
      }
      exports.RevokedPKCEFromJSON = RevokedPKCEFromJSON;
      function RevokedPKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "clientId": json["client_id"],
          "token": json["token"]
        };
      }
      exports.RevokedPKCEFromJSONTyped = RevokedPKCEFromJSONTyped;
      function RevokedPKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "client_id": value.clientId,
          "token": value.token
        };
      }
      exports.RevokedPKCEToJSON = RevokedPKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Role.js
  var require_Role = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Role.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RoleToJSON = exports.RoleFromJSONTyped = exports.RoleFromJSON = exports.Role = void 0;
      var Role;
      (function(Role2) {
        Role2["Original"] = "ORIGINAL";
        Role2["Additional"] = "ADDITIONAL";
        Role2["Both"] = "BOTH";
        Role2["Preview"] = "PREVIEW";
      })(Role || (exports.Role = Role = {}));
      function RoleFromJSON(json) {
        return RoleFromJSONTyped(json, false);
      }
      exports.RoleFromJSON = RoleFromJSON;
      function RoleFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.RoleFromJSONTyped = RoleFromJSONTyped;
      function RoleToJSON(value) {
        return value;
      }
      exports.RoleToJSON = RoleToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SaveSuggestion.js
  var require_SaveSuggestion = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SaveSuggestion.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SaveSuggestionToJSON = exports.SaveSuggestionFromJSONTyped = exports.SaveSuggestionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SaveSuggestionFromJSON(json) {
        return SaveSuggestionFromJSONTyped(json, false);
      }
      exports.SaveSuggestionFromJSON = SaveSuggestionFromJSON;
      function SaveSuggestionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "suggested": json["suggested"]
        };
      }
      exports.SaveSuggestionFromJSONTyped = SaveSuggestionFromJSONTyped;
      function SaveSuggestionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "suggested": value.suggested
        };
      }
      exports.SaveSuggestionToJSON = SaveSuggestionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Score.js
  var require_Score = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Score.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ScoreToJSON = exports.ScoreFromJSONTyped = exports.ScoreFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ScoreFromJSON(json) {
        return ScoreFromJSONTyped(json, false);
      }
      exports.ScoreFromJSON = ScoreFromJSON;
      function ScoreFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "manual": json["manual"],
          "automatic": json["automatic"],
          "priority": !(0, runtime_1.exists)(json, "priority") ? void 0 : json["priority"],
          "reuse": !(0, runtime_1.exists)(json, "reuse") ? void 0 : json["reuse"],
          "update": !(0, runtime_1.exists)(json, "update") ? void 0 : json["update"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : json["reference"]
        };
      }
      exports.ScoreFromJSONTyped = ScoreFromJSONTyped;
      function ScoreToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "manual": value.manual,
          "automatic": value.automatic,
          "priority": value.priority,
          "reuse": value.reuse,
          "update": value.update,
          "reference": value.reference
        };
      }
      exports.ScoreToJSON = ScoreToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SearchedAsset.js
  var require_SearchedAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SearchedAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SearchedAssetToJSON = exports.SearchedAssetFromJSONTyped = exports.SearchedAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SearchedAssetFromJSON(json) {
        return SearchedAssetFromJSONTyped(json, false);
      }
      exports.SearchedAssetFromJSON = SearchedAssetFromJSON;
      function SearchedAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.AssetFromJSON)(json["asset"]),
          "exact": json["exact"],
          "score": json["score"],
          "match": (0, _1.SearchedMatchEnumFromJSON)(json["match"]),
          "identifier": json["identifier"],
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"]
        };
      }
      exports.SearchedAssetFromJSONTyped = SearchedAssetFromJSONTyped;
      function SearchedAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.AssetToJSON)(value.asset),
          "exact": value.exact,
          "score": value.score,
          "match": (0, _1.SearchedMatchEnumToJSON)(value.match),
          "identifier": value.identifier,
          "pseudo": value.pseudo
        };
      }
      exports.SearchedAssetToJSON = SearchedAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SearchedAssets.js
  var require_SearchedAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SearchedAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SearchedAssetsToJSON = exports.SearchedAssetsFromJSONTyped = exports.SearchedAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SearchedAssetsFromJSON(json) {
        return SearchedAssetsFromJSONTyped(json, false);
      }
      exports.SearchedAssetsFromJSON = SearchedAssetsFromJSON;
      function SearchedAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SearchedAssetFromJSON),
          "suggested": json["suggested"],
          "exact": json["exact"]
        };
      }
      exports.SearchedAssetsFromJSONTyped = SearchedAssetsFromJSONTyped;
      function SearchedAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SearchedAssetToJSON),
          "suggested": value.suggested,
          "exact": value.exact
        };
      }
      exports.SearchedAssetsToJSON = SearchedAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SearchedMatchEnum.js
  var require_SearchedMatchEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SearchedMatchEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SearchedMatchEnumToJSON = exports.SearchedMatchEnumFromJSONTyped = exports.SearchedMatchEnumFromJSON = exports.SearchedMatchEnum = void 0;
      var SearchedMatchEnum;
      (function(SearchedMatchEnum2) {
        SearchedMatchEnum2["Title"] = "TITLE";
        SearchedMatchEnum2["Annotation"] = "ANNOTATION";
        SearchedMatchEnum2["Hint"] = "HINT";
        SearchedMatchEnum2["Content"] = "CONTENT";
        SearchedMatchEnum2["Fuzzy"] = "FUZZY";
        SearchedMatchEnum2["Multiple"] = "MULTIPLE";
        SearchedMatchEnum2["Tags"] = "TAGS";
        SearchedMatchEnum2["Websites"] = "WEBSITES";
        SearchedMatchEnum2["Persons"] = "PERSONS";
      })(SearchedMatchEnum || (exports.SearchedMatchEnum = SearchedMatchEnum = {}));
      function SearchedMatchEnumFromJSON(json) {
        return SearchedMatchEnumFromJSONTyped(json, false);
      }
      exports.SearchedMatchEnumFromJSON = SearchedMatchEnumFromJSON;
      function SearchedMatchEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.SearchedMatchEnumFromJSONTyped = SearchedMatchEnumFromJSONTyped;
      function SearchedMatchEnumToJSON(value) {
        return value;
      }
      exports.SearchedMatchEnumToJSON = SearchedMatchEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Seed.js
  var require_Seed = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Seed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeedToJSON = exports.SeedFromJSONTyped = exports.SeedFromJSON = exports.SeedTypeEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var SeedTypeEnum;
      (function(SeedTypeEnum2) {
        SeedTypeEnum2["Format"] = "SEEDED_FORMAT";
        SeedTypeEnum2["Asset"] = "SEEDED_ASSET";
      })(SeedTypeEnum || (exports.SeedTypeEnum = SeedTypeEnum = {}));
      function SeedFromJSON(json) {
        return SeedFromJSONTyped(json, false);
      }
      exports.SeedFromJSON = SeedFromJSON;
      function SeedFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.SeededAssetFromJSON)(json["asset"]),
          "type": json["type"]
        };
      }
      exports.SeedFromJSONTyped = SeedFromJSONTyped;
      function SeedToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.SeededAssetToJSON)(value.asset),
          "type": value.type
        };
      }
      exports.SeedToJSON = SeedToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAccessor.js
  var require_SeededAccessor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAccessor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAccessorToJSON = exports.SeededAccessorFromJSONTyped = exports.SeededAccessorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAccessorFromJSON(json) {
        return SeededAccessorFromJSONTyped(json, false);
      }
      exports.SeededAccessorFromJSON = SeededAccessorFromJSON;
      function SeededAccessorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "os": json["os"],
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.FlattenedUserProfileFromJSON)(json["user"]),
          "share": json["share"]
        };
      }
      exports.SeededAccessorFromJSONTyped = SeededAccessorFromJSONTyped;
      function SeededAccessorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "os": value.os,
          "user": (0, _1.FlattenedUserProfileToJSON)(value.user),
          "share": value.share
        };
      }
      exports.SeededAccessorToJSON = SeededAccessorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededActivity.js
  var require_SeededActivity = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededActivity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededActivityToJSON = exports.SeededActivityFromJSONTyped = exports.SeededActivityFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededActivityFromJSON(json) {
        return SeededActivityFromJSONTyped(json, false);
      }
      exports.SeededActivityFromJSON = SeededActivityFromJSON;
      function SeededActivityFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "event": (0, _1.SeededConnectorTrackingFromJSON)(json["event"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.ReferencedUserFromJSON)(json["user"]),
          "format": !(0, runtime_1.exists)(json, "format") ? void 0 : (0, _1.ReferencedFormatFromJSON)(json["format"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"])
        };
      }
      exports.SeededActivityFromJSONTyped = SeededActivityFromJSONTyped;
      function SeededActivityToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "event": (0, _1.SeededConnectorTrackingToJSON)(value.event),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "user": (0, _1.ReferencedUserToJSON)(value.user),
          "format": (0, _1.ReferencedFormatToJSON)(value.format),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism)
        };
      }
      exports.SeededActivityToJSON = SeededActivityToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnchor.js
  var require_SeededAnchor = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnchor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAnchorToJSON = exports.SeededAnchorFromJSONTyped = exports.SeededAnchorFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAnchorFromJSON(json) {
        return SeededAnchorFromJSONTyped(json, false);
      }
      exports.SeededAnchorFromJSON = SeededAnchorFromJSON;
      function SeededAnchorFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "type": (0, _1.AnchorTypeEnumFromJSON)(json["type"]),
          "watch": !(0, runtime_1.exists)(json, "watch") ? void 0 : json["watch"],
          "fullpath": json["fullpath"],
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "platform": !(0, runtime_1.exists)(json, "platform") ? void 0 : (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : json["annotations"].map(_1.SeededAnnotationFromJSON),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : json["conversation"]
        };
      }
      exports.SeededAnchorFromJSONTyped = SeededAnchorFromJSONTyped;
      function SeededAnchorToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "type": (0, _1.AnchorTypeEnumToJSON)(value.type),
          "watch": value.watch,
          "fullpath": value.fullpath,
          "asset": value.asset,
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "name": value.name,
          "annotations": value.annotations === void 0 ? void 0 : value.annotations.map(_1.SeededAnnotationToJSON),
          "conversation": value.conversation
        };
      }
      exports.SeededAnchorToJSON = SeededAnchorToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnchorPoint.js
  var require_SeededAnchorPoint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnchorPoint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAnchorPointToJSON = exports.SeededAnchorPointFromJSONTyped = exports.SeededAnchorPointFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAnchorPointFromJSON(json) {
        return SeededAnchorPointFromJSONTyped(json, false);
      }
      exports.SeededAnchorPointFromJSON = SeededAnchorPointFromJSON;
      function SeededAnchorPointFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "type": (0, _1.AnchorTypeEnumFromJSON)(json["type"]),
          "watch": !(0, runtime_1.exists)(json, "watch") ? void 0 : json["watch"],
          "fullpath": json["fullpath"],
          "anchor": json["anchor"],
          "platform": !(0, runtime_1.exists)(json, "platform") ? void 0 : (0, _1.PlatformEnumFromJSON)(json["platform"])
        };
      }
      exports.SeededAnchorPointFromJSONTyped = SeededAnchorPointFromJSONTyped;
      function SeededAnchorPointToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "type": (0, _1.AnchorTypeEnumToJSON)(value.type),
          "watch": value.watch,
          "fullpath": value.fullpath,
          "anchor": value.anchor,
          "platform": (0, _1.PlatformEnumToJSON)(value.platform)
        };
      }
      exports.SeededAnchorPointToJSON = SeededAnchorPointToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnnotation.js
  var require_SeededAnnotation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAnnotation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAnnotationToJSON = exports.SeededAnnotationFromJSONTyped = exports.SeededAnnotationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAnnotationFromJSON(json) {
        return SeededAnnotationFromJSONTyped(json, false);
      }
      exports.SeededAnnotationFromJSON = SeededAnnotationFromJSON;
      function SeededAnnotationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : json["person"],
          "type": (0, _1.AnnotationTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"],
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"],
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : json["anchor"],
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : json["conversation"],
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : (0, _1.FlattenedConversationMessagesFromJSON)(json["messages"])
        };
      }
      exports.SeededAnnotationFromJSONTyped = SeededAnnotationFromJSONTyped;
      function SeededAnnotationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": value.asset,
          "person": value.person,
          "type": (0, _1.AnnotationTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": value.model,
          "pseudo": value.pseudo,
          "favorited": value.favorited,
          "anchor": value.anchor,
          "conversation": value.conversation,
          "messages": (0, _1.FlattenedConversationMessagesToJSON)(value.messages)
        };
      }
      exports.SeededAnnotationToJSON = SeededAnnotationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAsset.js
  var require_SeededAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetToJSON = exports.SeededAssetFromJSONTyped = exports.SeededAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetFromJSON(json) {
        return SeededAssetFromJSONTyped(json, false);
      }
      exports.SeededAssetFromJSON = SeededAssetFromJSON;
      function SeededAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SeededAssetMetadataFromJSON)(json["metadata"]),
          "application": (0, _1.ApplicationFromJSON)(json["application"]),
          "format": (0, _1.SeededFormatFromJSON)(json["format"]),
          "discovered": !(0, runtime_1.exists)(json, "discovered") ? void 0 : json["discovered"],
          "available": !(0, runtime_1.exists)(json, "available") ? void 0 : (0, _1.AvailableFormatsFromJSON)(json["available"]),
          "pseudo": !(0, runtime_1.exists)(json, "pseudo") ? void 0 : json["pseudo"]
        };
      }
      exports.SeededAssetFromJSONTyped = SeededAssetFromJSONTyped;
      function SeededAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "metadata": (0, _1.SeededAssetMetadataToJSON)(value.metadata),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "format": (0, _1.SeededFormatToJSON)(value.format),
          "discovered": value.discovered,
          "available": (0, _1.AvailableFormatsToJSON)(value.available),
          "pseudo": value.pseudo
        };
      }
      exports.SeededAssetToJSON = SeededAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetMetadata.js
  var require_SeededAssetMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetMetadataToJSON = exports.SeededAssetMetadataFromJSONTyped = exports.SeededAssetMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetMetadataFromJSON(json) {
        return SeededAssetMetadataFromJSONTyped(json, false);
      }
      exports.SeededAssetMetadataFromJSON = SeededAssetMetadataFromJSON;
      function SeededAssetMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : json["tags"].map(_1.SeededAssetTagFromJSON),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : json["websites"].map(_1.SeededAssetWebsiteFromJSON),
          "sensitives": !(0, runtime_1.exists)(json, "sensitives") ? void 0 : json["sensitives"].map(_1.SeededAssetSensitiveFromJSON),
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : json["persons"].map(_1.SeededPersonFromJSON),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : json["annotations"].map(_1.SeededAnnotationFromJSON),
          "hints": !(0, runtime_1.exists)(json, "hints") ? void 0 : json["hints"].map(_1.SeededHintFromJSON),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : json["anchors"].map(_1.SeededAnchorFromJSON)
        };
      }
      exports.SeededAssetMetadataFromJSONTyped = SeededAssetMetadataFromJSONTyped;
      function SeededAssetMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "name": value.name,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "tags": value.tags === void 0 ? void 0 : value.tags.map(_1.SeededAssetTagToJSON),
          "websites": value.websites === void 0 ? void 0 : value.websites.map(_1.SeededAssetWebsiteToJSON),
          "sensitives": value.sensitives === void 0 ? void 0 : value.sensitives.map(_1.SeededAssetSensitiveToJSON),
          "persons": value.persons === void 0 ? void 0 : value.persons.map(_1.SeededPersonToJSON),
          "annotations": value.annotations === void 0 ? void 0 : value.annotations.map(_1.SeededAnnotationToJSON),
          "hints": value.hints === void 0 ? void 0 : value.hints.map(_1.SeededHintToJSON),
          "anchors": value.anchors === void 0 ? void 0 : value.anchors.map(_1.SeededAnchorToJSON)
        };
      }
      exports.SeededAssetMetadataToJSON = SeededAssetMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetSensitive.js
  var require_SeededAssetSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetSensitiveToJSON = exports.SeededAssetSensitiveFromJSONTyped = exports.SeededAssetSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetSensitiveFromJSON(json) {
        return SeededAssetSensitiveFromJSONTyped(json, false);
      }
      exports.SeededAssetSensitiveFromJSON = SeededAssetSensitiveFromJSON;
      function SeededAssetSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": (0, _1.SensitiveCategoryEnumFromJSON)(json["category"]),
          "severity": (0, _1.SensitiveSeverityEnumFromJSON)(json["severity"]),
          "name": json["name"],
          "description": json["description"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SensitiveMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededAssetSensitiveFromJSONTyped = SeededAssetSensitiveFromJSONTyped;
      function SeededAssetSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.SensitiveCategoryEnumToJSON)(value.category),
          "severity": (0, _1.SensitiveSeverityEnumToJSON)(value.severity),
          "name": value.name,
          "description": value.description,
          "metadata": (0, _1.SensitiveMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededAssetSensitiveToJSON = SeededAssetSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetTag.js
  var require_SeededAssetTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetTagToJSON = exports.SeededAssetTagFromJSONTyped = exports.SeededAssetTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetTagFromJSON(json) {
        return SeededAssetTagFromJSONTyped(json, false);
      }
      exports.SeededAssetTagFromJSON = SeededAssetTagFromJSON;
      function SeededAssetTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": !(0, runtime_1.exists)(json, "category") ? void 0 : (0, _1.TagCategoryEnumFromJSON)(json["category"])
        };
      }
      exports.SeededAssetTagFromJSONTyped = SeededAssetTagFromJSONTyped;
      function SeededAssetTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.TagCategoryEnumToJSON)(value.category)
        };
      }
      exports.SeededAssetTagToJSON = SeededAssetTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetTags.js
  var require_SeededAssetTags = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetTags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetTagsToJSON = exports.SeededAssetTagsFromJSONTyped = exports.SeededAssetTagsFromJSON = void 0;
      var _1 = require_models();
      function SeededAssetTagsFromJSON(json) {
        return SeededAssetTagsFromJSONTyped(json, false);
      }
      exports.SeededAssetTagsFromJSON = SeededAssetTagsFromJSON;
      function SeededAssetTagsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.SeededAssetTagFromJSON)
        };
      }
      exports.SeededAssetTagsFromJSONTyped = SeededAssetTagsFromJSONTyped;
      function SeededAssetTagsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.SeededAssetTagToJSON)
        };
      }
      exports.SeededAssetTagsToJSON = SeededAssetTagsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetWebsite.js
  var require_SeededAssetWebsite = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetWebsite.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetWebsiteToJSON = exports.SeededAssetWebsiteFromJSONTyped = exports.SeededAssetWebsiteFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetWebsiteFromJSON(json) {
        return SeededAssetWebsiteFromJSONTyped(json, false);
      }
      exports.SeededAssetWebsiteFromJSON = SeededAssetWebsiteFromJSON;
      function SeededAssetWebsiteFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "url": json["url"],
          "name": json["name"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"])
        };
      }
      exports.SeededAssetWebsiteFromJSONTyped = SeededAssetWebsiteFromJSONTyped;
      function SeededAssetWebsiteToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "url": value.url,
          "name": value.name,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism)
        };
      }
      exports.SeededAssetWebsiteToJSON = SeededAssetWebsiteToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetsRecommendation.js
  var require_SeededAssetsRecommendation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededAssetsRecommendation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededAssetsRecommendationToJSON = exports.SeededAssetsRecommendationFromJSONTyped = exports.SeededAssetsRecommendationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededAssetsRecommendationFromJSON(json) {
        return SeededAssetsRecommendationFromJSONTyped(json, false);
      }
      exports.SeededAssetsRecommendationFromJSON = SeededAssetsRecommendationFromJSON;
      function SeededAssetsRecommendationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assets": (0, _1.AssetsFromJSON)(json["assets"]),
          "interactions": (0, _1.InteractedAssetsFromJSON)(json["interactions"])
        };
      }
      exports.SeededAssetsRecommendationFromJSONTyped = SeededAssetsRecommendationFromJSONTyped;
      function SeededAssetsRecommendationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets": (0, _1.AssetsToJSON)(value.assets),
          "interactions": (0, _1.InteractedAssetsToJSON)(value.interactions)
        };
      }
      exports.SeededAssetsRecommendationToJSON = SeededAssetsRecommendationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededClassification.js
  var require_SeededClassification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededClassification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededClassificationToJSON = exports.SeededClassificationFromJSONTyped = exports.SeededClassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededClassificationFromJSON(json) {
        return SeededClassificationFromJSONTyped(json, false);
      }
      exports.SeededClassificationFromJSON = SeededClassificationFromJSON;
      function SeededClassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "generic": !(0, runtime_1.exists)(json, "generic") ? void 0 : (0, _1.ClassificationGenericEnumFromJSON)(json["generic"]),
          "specific": !(0, runtime_1.exists)(json, "specific") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["specific"]),
          "rendering": !(0, runtime_1.exists)(json, "rendering") ? void 0 : (0, _1.ClassificationRenderingEnumFromJSON)(json["rendering"])
        };
      }
      exports.SeededClassificationFromJSONTyped = SeededClassificationFromJSONTyped;
      function SeededClassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "generic": (0, _1.ClassificationGenericEnumToJSON)(value.generic),
          "specific": (0, _1.ClassificationSpecificEnumToJSON)(value.specific),
          "rendering": (0, _1.ClassificationRenderingEnumToJSON)(value.rendering)
        };
      }
      exports.SeededClassificationToJSON = SeededClassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorAsset.js
  var require_SeededConnectorAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConnectorAssetToJSON = exports.SeededConnectorAssetFromJSONTyped = exports.SeededConnectorAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConnectorAssetFromJSON(json) {
        return SeededConnectorAssetFromJSONTyped(json, false);
      }
      exports.SeededConnectorAssetFromJSON = SeededConnectorAssetFromJSON;
      function SeededConnectorAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SeededAssetMetadataFromJSON)(json["metadata"]),
          "format": (0, _1.SeededFormatFromJSON)(json["format"])
        };
      }
      exports.SeededConnectorAssetFromJSONTyped = SeededConnectorAssetFromJSONTyped;
      function SeededConnectorAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "metadata": (0, _1.SeededAssetMetadataToJSON)(value.metadata),
          "format": (0, _1.SeededFormatToJSON)(value.format)
        };
      }
      exports.SeededConnectorAssetToJSON = SeededConnectorAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorConnection.js
  var require_SeededConnectorConnection = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorConnection.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConnectorConnectionToJSON = exports.SeededConnectorConnectionFromJSONTyped = exports.SeededConnectorConnectionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConnectorConnectionFromJSON(json) {
        return SeededConnectorConnectionFromJSONTyped(json, false);
      }
      exports.SeededConnectorConnectionFromJSON = SeededConnectorConnectionFromJSON;
      function SeededConnectorConnectionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": (0, _1.SeededTrackedApplicationFromJSON)(json["application"])
        };
      }
      exports.SeededConnectorConnectionFromJSONTyped = SeededConnectorConnectionFromJSONTyped;
      function SeededConnectorConnectionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": (0, _1.SeededTrackedApplicationToJSON)(value.application)
        };
      }
      exports.SeededConnectorConnectionToJSON = SeededConnectorConnectionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorCreation.js
  var require_SeededConnectorCreation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorCreation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConnectorCreationToJSON = exports.SeededConnectorCreationFromJSONTyped = exports.SeededConnectorCreationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConnectorCreationFromJSON(json) {
        return SeededConnectorCreationFromJSONTyped(json, false);
      }
      exports.SeededConnectorCreationFromJSON = SeededConnectorCreationFromJSON;
      function SeededConnectorCreationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.SeededConnectorAssetFromJSON)(json["asset"])
        };
      }
      exports.SeededConnectorCreationFromJSONTyped = SeededConnectorCreationFromJSONTyped;
      function SeededConnectorCreationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.SeededConnectorAssetToJSON)(value.asset)
        };
      }
      exports.SeededConnectorCreationToJSON = SeededConnectorCreationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorTracking.js
  var require_SeededConnectorTracking = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConnectorTracking.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConnectorTrackingToJSON = exports.SeededConnectorTrackingFromJSONTyped = exports.SeededConnectorTrackingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConnectorTrackingFromJSON(json) {
        return SeededConnectorTrackingFromJSONTyped(json, false);
      }
      exports.SeededConnectorTrackingFromJSON = SeededConnectorTrackingFromJSON;
      function SeededConnectorTrackingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "format": !(0, runtime_1.exists)(json, "format") ? void 0 : (0, _1.SeededTrackedFormatEventFromJSON)(json["format"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.SeededTrackedAssetEventFromJSON)(json["asset"]),
          "interaction": !(0, runtime_1.exists)(json, "interaction") ? void 0 : (0, _1.SeededTrackedInteractionEventFromJSON)(json["interaction"]),
          "keyboard": !(0, runtime_1.exists)(json, "keyboard") ? void 0 : (0, _1.SeededTrackedKeyboardEventFromJSON)(json["keyboard"]),
          "session": !(0, runtime_1.exists)(json, "session") ? void 0 : (0, _1.SeededTrackedSessionEventFromJSON)(json["session"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.SeededTrackedAssetsEventFromJSON)(json["assets"]),
          "ml": !(0, runtime_1.exists)(json, "ml") ? void 0 : (0, _1.SeededTrackedMachineLearningEventFromJSON)(json["ml"]),
          "adoption": !(0, runtime_1.exists)(json, "adoption") ? void 0 : (0, _1.SeededTrackedAdoptionEventFromJSON)(json["adoption"])
        };
      }
      exports.SeededConnectorTrackingFromJSONTyped = SeededConnectorTrackingFromJSONTyped;
      function SeededConnectorTrackingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "format": (0, _1.SeededTrackedFormatEventToJSON)(value.format),
          "asset": (0, _1.SeededTrackedAssetEventToJSON)(value.asset),
          "interaction": (0, _1.SeededTrackedInteractionEventToJSON)(value.interaction),
          "keyboard": (0, _1.SeededTrackedKeyboardEventToJSON)(value.keyboard),
          "session": (0, _1.SeededTrackedSessionEventToJSON)(value.session),
          "assets": (0, _1.SeededTrackedAssetsEventToJSON)(value.assets),
          "ml": (0, _1.SeededTrackedMachineLearningEventToJSON)(value.ml),
          "adoption": (0, _1.SeededTrackedAdoptionEventToJSON)(value.adoption)
        };
      }
      exports.SeededConnectorTrackingToJSON = SeededConnectorTrackingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConversation.js
  var require_SeededConversation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConversation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConversationToJSON = exports.SeededConversationFromJSONTyped = exports.SeededConversationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConversationFromJSON(json) {
        return SeededConversationFromJSONTyped(json, false);
      }
      exports.SeededConversationFromJSON = SeededConversationFromJSON;
      function SeededConversationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "favorited": !(0, runtime_1.exists)(json, "favorited") ? void 0 : json["favorited"],
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : (0, _1.ApplicationFromJSON)(json["application"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : json["annotations"].map(_1.SeededAnnotationFromJSON),
          "messages": !(0, runtime_1.exists)(json, "messages") ? void 0 : json["messages"].map(_1.SeededConversationMessageFromJSON),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ReferencedModelFromJSON)(json["model"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : json["anchors"].map(_1.SeededAnchorFromJSON),
          "type": (0, _1.ConversationTypeEnumFromJSON)(json["type"])
        };
      }
      exports.SeededConversationFromJSONTyped = SeededConversationFromJSONTyped;
      function SeededConversationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "name": value.name,
          "favorited": value.favorited,
          "application": (0, _1.ApplicationToJSON)(value.application),
          "annotations": value.annotations === void 0 ? void 0 : value.annotations.map(_1.SeededAnnotationToJSON),
          "messages": value.messages === void 0 ? void 0 : value.messages.map(_1.SeededConversationMessageToJSON),
          "model": (0, _1.ReferencedModelToJSON)(value.model),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "anchors": value.anchors === void 0 ? void 0 : value.anchors.map(_1.SeededAnchorToJSON),
          "type": (0, _1.ConversationTypeEnumToJSON)(value.type)
        };
      }
      exports.SeededConversationToJSON = SeededConversationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededConversationMessage.js
  var require_SeededConversationMessage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededConversationMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededConversationMessageToJSON = exports.SeededConversationMessageFromJSONTyped = exports.SeededConversationMessageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededConversationMessageFromJSON(json) {
        return SeededConversationMessageFromJSONTyped(json, false);
      }
      exports.SeededConversationMessageFromJSON = SeededConversationMessageFromJSON;
      function SeededConversationMessageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "created": !(0, runtime_1.exists)(json, "created") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.ModelFromJSON)(json["model"]),
          "fragment": (0, _1.FragmentFormatFromJSON)(json["fragment"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "sentiment": !(0, runtime_1.exists)(json, "sentiment") ? void 0 : (0, _1.ConversationMessageSentimentEnumFromJSON)(json["sentiment"]),
          "role": (0, _1.QGPTConversationMessageRoleEnumFromJSON)(json["role"])
        };
      }
      exports.SeededConversationMessageFromJSONTyped = SeededConversationMessageFromJSONTyped;
      function SeededConversationMessageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "model": (0, _1.ModelToJSON)(value.model),
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "sentiment": (0, _1.ConversationMessageSentimentEnumToJSON)(value.sentiment),
          "role": (0, _1.QGPTConversationMessageRoleEnumToJSON)(value.role)
        };
      }
      exports.SeededConversationMessageToJSON = SeededConversationMessageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableAsset.js
  var require_SeededDiscoverableAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableAssetToJSON = exports.SeededDiscoverableAssetFromJSONTyped = exports.SeededDiscoverableAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableAssetFromJSON(json) {
        return SeededDiscoverableAssetFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableAssetFromJSON = SeededDiscoverableAssetFromJSON;
      function SeededDiscoverableAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.SeededFileFromJSON)(json["file"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.SeededFragmentFromJSON)(json["fragment"]),
          "directory": !(0, runtime_1.exists)(json, "directory") ? void 0 : json["directory"],
          "filters": !(0, runtime_1.exists)(json, "filters") ? void 0 : (0, _1.TLPDirectedDiscoveryFiltersFromJSON)(json["filters"])
        };
      }
      exports.SeededDiscoverableAssetFromJSONTyped = SeededDiscoverableAssetFromJSONTyped;
      function SeededDiscoverableAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "file": (0, _1.SeededFileToJSON)(value.file),
          "fragment": (0, _1.SeededFragmentToJSON)(value.fragment),
          "directory": value.directory,
          "filters": (0, _1.TLPDirectedDiscoveryFiltersToJSON)(value.filters)
        };
      }
      exports.SeededDiscoverableAssetToJSON = SeededDiscoverableAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableAssets.js
  var require_SeededDiscoverableAssets = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableAssets.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableAssetsToJSON = exports.SeededDiscoverableAssetsFromJSONTyped = exports.SeededDiscoverableAssetsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableAssetsFromJSON(json) {
        return SeededDiscoverableAssetsFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableAssetsFromJSON = SeededDiscoverableAssetsFromJSON;
      function SeededDiscoverableAssetsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": json["application"],
          "iterable": json["iterable"].map(_1.SeededDiscoverableAssetFromJSON),
          "filters": !(0, runtime_1.exists)(json, "filters") ? void 0 : (0, _1.TLPDirectedDiscoveryFiltersFromJSON)(json["filters"])
        };
      }
      exports.SeededDiscoverableAssetsFromJSONTyped = SeededDiscoverableAssetsFromJSONTyped;
      function SeededDiscoverableAssetsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": value.application,
          "iterable": value.iterable.map(_1.SeededDiscoverableAssetToJSON),
          "filters": (0, _1.TLPDirectedDiscoveryFiltersToJSON)(value.filters)
        };
      }
      exports.SeededDiscoverableAssetsToJSON = SeededDiscoverableAssetsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableHtmlWebpage.js
  var require_SeededDiscoverableHtmlWebpage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableHtmlWebpage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableHtmlWebpageToJSON = exports.SeededDiscoverableHtmlWebpageFromJSONTyped = exports.SeededDiscoverableHtmlWebpageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableHtmlWebpageFromJSON(json) {
        return SeededDiscoverableHtmlWebpageFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableHtmlWebpageFromJSON = SeededDiscoverableHtmlWebpageFromJSON;
      function SeededDiscoverableHtmlWebpageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "url": json["url"],
          "page": json["page"]
        };
      }
      exports.SeededDiscoverableHtmlWebpageFromJSONTyped = SeededDiscoverableHtmlWebpageFromJSONTyped;
      function SeededDiscoverableHtmlWebpageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "url": value.url,
          "page": value.page
        };
      }
      exports.SeededDiscoverableHtmlWebpageToJSON = SeededDiscoverableHtmlWebpageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableHtmlWebpages.js
  var require_SeededDiscoverableHtmlWebpages = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableHtmlWebpages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableHtmlWebpagesToJSON = exports.SeededDiscoverableHtmlWebpagesFromJSONTyped = exports.SeededDiscoverableHtmlWebpagesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableHtmlWebpagesFromJSON(json) {
        return SeededDiscoverableHtmlWebpagesFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableHtmlWebpagesFromJSON = SeededDiscoverableHtmlWebpagesFromJSON;
      function SeededDiscoverableHtmlWebpagesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeededDiscoverableHtmlWebpageFromJSON),
          "application": json["application"]
        };
      }
      exports.SeededDiscoverableHtmlWebpagesFromJSONTyped = SeededDiscoverableHtmlWebpagesFromJSONTyped;
      function SeededDiscoverableHtmlWebpagesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeededDiscoverableHtmlWebpageToJSON),
          "application": value.application
        };
      }
      exports.SeededDiscoverableHtmlWebpagesToJSON = SeededDiscoverableHtmlWebpagesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableRelatedTag.js
  var require_SeededDiscoverableRelatedTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableRelatedTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableRelatedTagToJSON = exports.SeededDiscoverableRelatedTagFromJSONTyped = exports.SeededDiscoverableRelatedTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableRelatedTagFromJSON(json) {
        return SeededDiscoverableRelatedTagFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableRelatedTagFromJSON = SeededDiscoverableRelatedTagFromJSON;
      function SeededDiscoverableRelatedTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "asset": json["asset"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "format": !(0, runtime_1.exists)(json, "format") ? void 0 : json["format"],
          "category": !(0, runtime_1.exists)(json, "category") ? void 0 : (0, _1.TagCategoryEnumFromJSON)(json["category"])
        };
      }
      exports.SeededDiscoverableRelatedTagFromJSONTyped = SeededDiscoverableRelatedTagFromJSONTyped;
      function SeededDiscoverableRelatedTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "asset": value.asset,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "format": value.format,
          "category": (0, _1.TagCategoryEnumToJSON)(value.category)
        };
      }
      exports.SeededDiscoverableRelatedTagToJSON = SeededDiscoverableRelatedTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableRelatedTags.js
  var require_SeededDiscoverableRelatedTags = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableRelatedTags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableRelatedTagsToJSON = exports.SeededDiscoverableRelatedTagsFromJSONTyped = exports.SeededDiscoverableRelatedTagsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableRelatedTagsFromJSON(json) {
        return SeededDiscoverableRelatedTagsFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableRelatedTagsFromJSON = SeededDiscoverableRelatedTagsFromJSON;
      function SeededDiscoverableRelatedTagsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeededDiscoverableRelatedTagFromJSON),
          "application": json["application"]
        };
      }
      exports.SeededDiscoverableRelatedTagsFromJSONTyped = SeededDiscoverableRelatedTagsFromJSONTyped;
      function SeededDiscoverableRelatedTagsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeededDiscoverableRelatedTagToJSON),
          "application": value.application
        };
      }
      exports.SeededDiscoverableRelatedTagsToJSON = SeededDiscoverableRelatedTagsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableSensitive.js
  var require_SeededDiscoverableSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableSensitiveToJSON = exports.SeededDiscoverableSensitiveFromJSONTyped = exports.SeededDiscoverableSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableSensitiveFromJSON(json) {
        return SeededDiscoverableSensitiveFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableSensitiveFromJSON = SeededDiscoverableSensitiveFromJSON;
      function SeededDiscoverableSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "text": json["text"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": !(0, runtime_1.exists)(json, "category") ? void 0 : (0, _1.SensitiveCategoryEnumFromJSON)(json["category"]),
          "severity": !(0, runtime_1.exists)(json, "severity") ? void 0 : (0, _1.SensitiveSeverityEnumFromJSON)(json["severity"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SensitiveMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededDiscoverableSensitiveFromJSONTyped = SeededDiscoverableSensitiveFromJSONTyped;
      function SeededDiscoverableSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.SensitiveCategoryEnumToJSON)(value.category),
          "severity": (0, _1.SensitiveSeverityEnumToJSON)(value.severity),
          "name": value.name,
          "description": value.description,
          "metadata": (0, _1.SensitiveMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededDiscoverableSensitiveToJSON = SeededDiscoverableSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableSensitives.js
  var require_SeededDiscoverableSensitives = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDiscoverableSensitives.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDiscoverableSensitivesToJSON = exports.SeededDiscoverableSensitivesFromJSONTyped = exports.SeededDiscoverableSensitivesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDiscoverableSensitivesFromJSON(json) {
        return SeededDiscoverableSensitivesFromJSONTyped(json, false);
      }
      exports.SeededDiscoverableSensitivesFromJSON = SeededDiscoverableSensitivesFromJSON;
      function SeededDiscoverableSensitivesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeededDiscoverableSensitiveFromJSON),
          "application": json["application"]
        };
      }
      exports.SeededDiscoverableSensitivesFromJSONTyped = SeededDiscoverableSensitivesFromJSONTyped;
      function SeededDiscoverableSensitivesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeededDiscoverableSensitiveToJSON),
          "application": value.application
        };
      }
      exports.SeededDiscoverableSensitivesToJSON = SeededDiscoverableSensitivesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDistribution.js
  var require_SeededDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDistributionToJSON = exports.SeededDistributionFromJSONTyped = exports.SeededDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDistributionFromJSON(json) {
        return SeededDistributionFromJSONTyped(json, false);
      }
      exports.SeededDistributionFromJSON = SeededDistributionFromJSON;
      function SeededDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "mailgun": !(0, runtime_1.exists)(json, "mailgun") ? void 0 : (0, _1.MailgunDistributionFromJSON)(json["mailgun"]),
          "github": !(0, runtime_1.exists)(json, "github") ? void 0 : (0, _1.SeededGitHubDistributionFromJSON)(json["github"])
        };
      }
      exports.SeededDistributionFromJSONTyped = SeededDistributionFromJSONTyped;
      function SeededDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "mailgun": (0, _1.MailgunDistributionToJSON)(value.mailgun),
          "github": (0, _1.SeededGitHubDistributionToJSON)(value.github)
        };
      }
      exports.SeededDistributionToJSON = SeededDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededDistributions.js
  var require_SeededDistributions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededDistributions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededDistributionsToJSON = exports.SeededDistributionsFromJSONTyped = exports.SeededDistributionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededDistributionsFromJSON(json) {
        return SeededDistributionsFromJSONTyped(json, false);
      }
      exports.SeededDistributionsFromJSON = SeededDistributionsFromJSON;
      function SeededDistributionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeededDistributionFromJSON)
        };
      }
      exports.SeededDistributionsFromJSONTyped = SeededDistributionsFromJSONTyped;
      function SeededDistributionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeededDistributionToJSON)
        };
      }
      exports.SeededDistributionsToJSON = SeededDistributionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededExternalProvider.js
  var require_SeededExternalProvider = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededExternalProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededExternalProviderToJSON = exports.SeededExternalProviderFromJSONTyped = exports.SeededExternalProviderFromJSON = void 0;
      var _1 = require_models();
      function SeededExternalProviderFromJSON(json) {
        return SeededExternalProviderFromJSONTyped(json, false);
      }
      exports.SeededExternalProviderFromJSON = SeededExternalProviderFromJSON;
      function SeededExternalProviderFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "type": (0, _1.ExternalProviderTypeEnumFromJSON)(json["type"])
        };
      }
      exports.SeededExternalProviderFromJSONTyped = SeededExternalProviderFromJSONTyped;
      function SeededExternalProviderToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "type": (0, _1.ExternalProviderTypeEnumToJSON)(value.type)
        };
      }
      exports.SeededExternalProviderToJSON = SeededExternalProviderToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededFile.js
  var require_SeededFile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededFile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededFileToJSON = exports.SeededFileFromJSONTyped = exports.SeededFileFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededFileFromJSON(json) {
        return SeededFileFromJSONTyped(json, false);
      }
      exports.SeededFileFromJSON = SeededFileFromJSON;
      function SeededFileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.TransferableBytesFromJSON)(json["bytes"]),
          "string": !(0, runtime_1.exists)(json, "string") ? void 0 : (0, _1.TransferableStringFromJSON)(json["string"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.FileMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededFileFromJSONTyped = SeededFileFromJSONTyped;
      function SeededFileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "bytes": (0, _1.TransferableBytesToJSON)(value.bytes),
          "string": (0, _1.TransferableStringToJSON)(value.string),
          "metadata": (0, _1.FileMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededFileToJSON = SeededFileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededFormat.js
  var require_SeededFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededFormatToJSON = exports.SeededFormatFromJSONTyped = exports.SeededFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededFormatFromJSON(json) {
        return SeededFormatFromJSONTyped(json, false);
      }
      exports.SeededFormatFromJSON = SeededFormatFromJSON;
      function SeededFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.SeededFileFromJSON)(json["file"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.SeededFragmentFromJSON)(json["fragment"]),
          "classification": !(0, runtime_1.exists)(json, "classification") ? void 0 : (0, _1.SeededClassificationFromJSON)(json["classification"])
        };
      }
      exports.SeededFormatFromJSONTyped = SeededFormatFromJSONTyped;
      function SeededFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "file": (0, _1.SeededFileToJSON)(value.file),
          "fragment": (0, _1.SeededFragmentToJSON)(value.fragment),
          "classification": (0, _1.SeededClassificationToJSON)(value.classification)
        };
      }
      exports.SeededFormatToJSON = SeededFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededFragment.js
  var require_SeededFragment = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededFragment.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededFragmentToJSON = exports.SeededFragmentFromJSONTyped = exports.SeededFragmentFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededFragmentFromJSON(json) {
        return SeededFragmentFromJSONTyped(json, false);
      }
      exports.SeededFragmentFromJSON = SeededFragmentFromJSON;
      function SeededFragmentFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "string": !(0, runtime_1.exists)(json, "string") ? void 0 : (0, _1.TransferableStringFromJSON)(json["string"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.TransferableBytesFromJSON)(json["bytes"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.FragmentMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededFragmentFromJSONTyped = SeededFragmentFromJSONTyped;
      function SeededFragmentToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "string": (0, _1.TransferableStringToJSON)(value.string),
          "bytes": (0, _1.TransferableBytesToJSON)(value.bytes),
          "metadata": (0, _1.FragmentMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededFragmentToJSON = SeededFragmentToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededGitHubDistribution.js
  var require_SeededGitHubDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededGitHubDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededGitHubDistributionToJSON = exports.SeededGitHubDistributionFromJSONTyped = exports.SeededGitHubDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededGitHubDistributionFromJSON(json) {
        return SeededGitHubDistributionFromJSONTyped(json, false);
      }
      exports.SeededGitHubDistributionFromJSON = SeededGitHubDistributionFromJSON;
      function SeededGitHubDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "gist": !(0, runtime_1.exists)(json, "gist") ? void 0 : (0, _1.SeededGitHubGistDistributionFromJSON)(json["gist"])
        };
      }
      exports.SeededGitHubDistributionFromJSONTyped = SeededGitHubDistributionFromJSONTyped;
      function SeededGitHubDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "gist": (0, _1.SeededGitHubGistDistributionToJSON)(value.gist)
        };
      }
      exports.SeededGitHubDistributionToJSON = SeededGitHubDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededGitHubGistDistribution.js
  var require_SeededGitHubGistDistribution = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededGitHubGistDistribution.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededGitHubGistDistributionToJSON = exports.SeededGitHubGistDistributionFromJSONTyped = exports.SeededGitHubGistDistributionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededGitHubGistDistributionFromJSON(json) {
        return SeededGitHubGistDistributionFromJSONTyped(json, false);
      }
      exports.SeededGitHubGistDistributionFromJSON = SeededGitHubGistDistributionFromJSON;
      function SeededGitHubGistDistributionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "recipients": !(0, runtime_1.exists)(json, "recipients") ? void 0 : (0, _1.RecipientsFromJSON)(json["recipients"]),
          "_public": !(0, runtime_1.exists)(json, "public") ? void 0 : json["public"],
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "name": json["name"]
        };
      }
      exports.SeededGitHubGistDistributionFromJSONTyped = SeededGitHubGistDistributionFromJSONTyped;
      function SeededGitHubGistDistributionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "recipients": (0, _1.RecipientsToJSON)(value.recipients),
          "public": value._public,
          "description": value.description,
          "name": value.name
        };
      }
      exports.SeededGitHubGistDistributionToJSON = SeededGitHubGistDistributionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededGithubGistsImport.js
  var require_SeededGithubGistsImport = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededGithubGistsImport.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededGithubGistsImportToJSON = exports.SeededGithubGistsImportFromJSONTyped = exports.SeededGithubGistsImportFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededGithubGistsImportFromJSON(json) {
        return SeededGithubGistsImportFromJSONTyped(json, false);
      }
      exports.SeededGithubGistsImportFromJSON = SeededGithubGistsImportFromJSON;
      function SeededGithubGistsImportFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": json["application"],
          "_public": !(0, runtime_1.exists)(json, "public") ? void 0 : json["public"]
        };
      }
      exports.SeededGithubGistsImportFromJSONTyped = SeededGithubGistsImportFromJSONTyped;
      function SeededGithubGistsImportToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": value.application,
          "public": value._public
        };
      }
      exports.SeededGithubGistsImportToJSON = SeededGithubGistsImportToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededHint.js
  var require_SeededHint = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededHint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededHintToJSON = exports.SeededHintFromJSONTyped = exports.SeededHintFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededHintFromJSON(json) {
        return SeededHintFromJSONTyped(json, false);
      }
      exports.SeededHintFromJSON = SeededHintFromJSON;
      function SeededHintFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "type": (0, _1.HintTypeEnumFromJSON)(json["type"]),
          "text": json["text"],
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : json["model"]
        };
      }
      exports.SeededHintFromJSONTyped = SeededHintFromJSONTyped;
      function SeededHintToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "asset": value.asset,
          "type": (0, _1.HintTypeEnumToJSON)(value.type),
          "text": value.text,
          "model": value.model
        };
      }
      exports.SeededHintToJSON = SeededHintToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededMacOSAsset.js
  var require_SeededMacOSAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededMacOSAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededMacOSAssetToJSON = exports.SeededMacOSAssetFromJSONTyped = exports.SeededMacOSAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededMacOSAssetFromJSON(json) {
        return SeededMacOSAssetFromJSONTyped(json, false);
      }
      exports.SeededMacOSAssetFromJSON = SeededMacOSAssetFromJSON;
      function SeededMacOSAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": !(0, runtime_1.exists)(json, "application") ? void 0 : (0, _1.ApplicationFromJSON)(json["application"]),
          "value": json["value"]
        };
      }
      exports.SeededMacOSAssetFromJSONTyped = SeededMacOSAssetFromJSONTyped;
      function SeededMacOSAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": (0, _1.ApplicationToJSON)(value.application),
          "value": value.value
        };
      }
      exports.SeededMacOSAssetToJSON = SeededMacOSAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededModel.js
  var require_SeededModel = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededModel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededModelToJSON = exports.SeededModelFromJSONTyped = exports.SeededModelFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededModelFromJSON(json) {
        return SeededModelFromJSONTyped(json, false);
      }
      exports.SeededModelFromJSON = SeededModelFromJSON;
      function SeededModelFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "version": json["version"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "name": json["name"],
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "cloud": json["cloud"],
          "type": (0, _1.ModelTypeEnumFromJSON)(json["type"]),
          "usage": (0, _1.ModelUsageEnumFromJSON)(json["usage"]),
          "bytes": !(0, runtime_1.exists)(json, "bytes") ? void 0 : (0, _1.ByteDescriptorFromJSON)(json["bytes"]),
          "ram": !(0, runtime_1.exists)(json, "ram") ? void 0 : (0, _1.ByteDescriptorFromJSON)(json["ram"]),
          "quantization": !(0, runtime_1.exists)(json, "quantization") ? void 0 : json["quantization"],
          "foundation": !(0, runtime_1.exists)(json, "foundation") ? void 0 : (0, _1.ModelFoundationEnumFromJSON)(json["foundation"]),
          "downloaded": !(0, runtime_1.exists)(json, "downloaded") ? void 0 : json["downloaded"],
          "unique": !(0, runtime_1.exists)(json, "unique") ? void 0 : json["unique"],
          "parameters": !(0, runtime_1.exists)(json, "parameters") ? void 0 : json["parameters"],
          "provider": !(0, runtime_1.exists)(json, "provider") ? void 0 : (0, _1.ExternalMLProviderEnumFromJSON)(json["provider"]),
          "cpu": !(0, runtime_1.exists)(json, "cpu") ? void 0 : json["cpu"],
          "maxTokens": !(0, runtime_1.exists)(json, "maxTokens") ? void 0 : (0, _1.ModelMaxTokensFromJSON)(json["maxTokens"]),
          "custom": !(0, runtime_1.exists)(json, "custom") ? void 0 : json["custom"]
        };
      }
      exports.SeededModelFromJSONTyped = SeededModelFromJSONTyped;
      function SeededModelToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "version": value.version,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "name": value.name,
          "description": value.description,
          "cloud": value.cloud,
          "type": (0, _1.ModelTypeEnumToJSON)(value.type),
          "usage": (0, _1.ModelUsageEnumToJSON)(value.usage),
          "bytes": (0, _1.ByteDescriptorToJSON)(value.bytes),
          "ram": (0, _1.ByteDescriptorToJSON)(value.ram),
          "quantization": value.quantization,
          "foundation": (0, _1.ModelFoundationEnumToJSON)(value.foundation),
          "downloaded": value.downloaded,
          "unique": value.unique,
          "parameters": value.parameters,
          "provider": (0, _1.ExternalMLProviderEnumToJSON)(value.provider),
          "cpu": value.cpu,
          "maxTokens": (0, _1.ModelMaxTokensToJSON)(value.maxTokens),
          "custom": value.custom
        };
      }
      exports.SeededModelToJSON = SeededModelToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededModels.js
  var require_SeededModels = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededModels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededModelsToJSON = exports.SeededModelsFromJSONTyped = exports.SeededModelsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededModelsFromJSON(json) {
        return SeededModelsFromJSONTyped(json, false);
      }
      exports.SeededModelsFromJSON = SeededModelsFromJSON;
      function SeededModelsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeededModelFromJSON)
        };
      }
      exports.SeededModelsFromJSONTyped = SeededModelsFromJSONTyped;
      function SeededModelsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeededModelToJSON)
        };
      }
      exports.SeededModelsToJSON = SeededModelsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededPKCE.js
  var require_SeededPKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededPKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededPKCEToJSON = exports.SeededPKCEFromJSONTyped = exports.SeededPKCEFromJSON = exports.SeededPKCEResponseModeEnum = exports.SeededPKCEScopeEnum = exports.SeededPKCEPromptEnum = exports.SeededPKCEScreenHintEnum = exports.SeededPKCECodeChallengeMethodEnum = exports.SeededPKCEResponseTypeEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var SeededPKCEResponseTypeEnum;
      (function(SeededPKCEResponseTypeEnum2) {
        SeededPKCEResponseTypeEnum2["Code"] = "code";
        SeededPKCEResponseTypeEnum2["Token"] = "token";
        SeededPKCEResponseTypeEnum2["IdToken"] = "id_token";
      })(SeededPKCEResponseTypeEnum || (exports.SeededPKCEResponseTypeEnum = SeededPKCEResponseTypeEnum = {}));
      var SeededPKCECodeChallengeMethodEnum;
      (function(SeededPKCECodeChallengeMethodEnum2) {
        SeededPKCECodeChallengeMethodEnum2["S256"] = "S256";
      })(SeededPKCECodeChallengeMethodEnum || (exports.SeededPKCECodeChallengeMethodEnum = SeededPKCECodeChallengeMethodEnum = {}));
      var SeededPKCEScreenHintEnum;
      (function(SeededPKCEScreenHintEnum2) {
        SeededPKCEScreenHintEnum2["Signup"] = "signup";
      })(SeededPKCEScreenHintEnum || (exports.SeededPKCEScreenHintEnum = SeededPKCEScreenHintEnum = {}));
      var SeededPKCEPromptEnum;
      (function(SeededPKCEPromptEnum2) {
        SeededPKCEPromptEnum2["Login"] = "login";
        SeededPKCEPromptEnum2["None"] = "none";
      })(SeededPKCEPromptEnum || (exports.SeededPKCEPromptEnum = SeededPKCEPromptEnum = {}));
      var SeededPKCEScopeEnum;
      (function(SeededPKCEScopeEnum2) {
        SeededPKCEScopeEnum2["OfflineAccess"] = "offline_access";
        SeededPKCEScopeEnum2["Email"] = "email";
        SeededPKCEScopeEnum2["Profile"] = "profile";
        SeededPKCEScopeEnum2["Openid"] = "openid";
      })(SeededPKCEScopeEnum || (exports.SeededPKCEScopeEnum = SeededPKCEScopeEnum = {}));
      var SeededPKCEResponseModeEnum;
      (function(SeededPKCEResponseModeEnum2) {
        SeededPKCEResponseModeEnum2["FormPost"] = "form_post";
        SeededPKCEResponseModeEnum2["WebMessage"] = "web_message";
        SeededPKCEResponseModeEnum2["Fragment"] = "fragment";
        SeededPKCEResponseModeEnum2["Query"] = "query";
      })(SeededPKCEResponseModeEnum || (exports.SeededPKCEResponseModeEnum = SeededPKCEResponseModeEnum = {}));
      function SeededPKCEFromJSON(json) {
        return SeededPKCEFromJSONTyped(json, false);
      }
      exports.SeededPKCEFromJSON = SeededPKCEFromJSON;
      function SeededPKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "responseType": json["response_type"],
          "state": json["state"],
          "nonce": json["nonce"],
          "redirectUri": !(0, runtime_1.exists)(json, "redirect_uri") ? void 0 : json["redirect_uri"],
          "codeChallenge": json["code_challenge"],
          "codeChallengeMethod": json["code_challenge_method"],
          "domain": !(0, runtime_1.exists)(json, "domain") ? void 0 : json["domain"],
          "audience": !(0, runtime_1.exists)(json, "audience") ? void 0 : json["audience"],
          "screenHint": !(0, runtime_1.exists)(json, "screen_hint") ? void 0 : json["screen_hint"],
          "prompt": !(0, runtime_1.exists)(json, "prompt") ? void 0 : json["prompt"],
          "organization": !(0, runtime_1.exists)(json, "organization") ? void 0 : json["organization"],
          "invitation": !(0, runtime_1.exists)(json, "invitation") ? void 0 : json["invitation"],
          "scope": json["scope"],
          "clientId": json["client_id"],
          "aDDITIONALPARAMETERS": !(0, runtime_1.exists)(json, "ADDITIONAL_PARAMETERS") ? void 0 : (0, _1.SeededPKCEADDITIONALPARAMETERSFromJSON)(json["ADDITIONAL_PARAMETERS"]),
          "responseMode": !(0, runtime_1.exists)(json, "response_mode") ? void 0 : json["response_mode"]
        };
      }
      exports.SeededPKCEFromJSONTyped = SeededPKCEFromJSONTyped;
      function SeededPKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "response_type": value.responseType,
          "state": value.state,
          "nonce": value.nonce,
          "redirect_uri": value.redirectUri,
          "code_challenge": value.codeChallenge,
          "code_challenge_method": value.codeChallengeMethod,
          "domain": value.domain,
          "audience": value.audience,
          "screen_hint": value.screenHint,
          "prompt": value.prompt,
          "organization": value.organization,
          "invitation": value.invitation,
          "scope": value.scope,
          "client_id": value.clientId,
          "ADDITIONAL_PARAMETERS": (0, _1.SeededPKCEADDITIONALPARAMETERSToJSON)(value.aDDITIONALPARAMETERS),
          "response_mode": value.responseMode
        };
      }
      exports.SeededPKCEToJSON = SeededPKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededPKCEADDITIONALPARAMETERS.js
  var require_SeededPKCEADDITIONALPARAMETERS = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededPKCEADDITIONALPARAMETERS.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededPKCEADDITIONALPARAMETERSToJSON = exports.SeededPKCEADDITIONALPARAMETERSFromJSONTyped = exports.SeededPKCEADDITIONALPARAMETERSFromJSON = exports.SeededPKCEADDITIONALPARAMETERSDisplayEnum = exports.SeededPKCEADDITIONALPARAMETERSAccessTypeEnum = void 0;
      var runtime_1 = require_runtime();
      var SeededPKCEADDITIONALPARAMETERSAccessTypeEnum;
      (function(SeededPKCEADDITIONALPARAMETERSAccessTypeEnum2) {
        SeededPKCEADDITIONALPARAMETERSAccessTypeEnum2["Offline"] = "offline";
      })(SeededPKCEADDITIONALPARAMETERSAccessTypeEnum || (exports.SeededPKCEADDITIONALPARAMETERSAccessTypeEnum = SeededPKCEADDITIONALPARAMETERSAccessTypeEnum = {}));
      var SeededPKCEADDITIONALPARAMETERSDisplayEnum;
      (function(SeededPKCEADDITIONALPARAMETERSDisplayEnum2) {
        SeededPKCEADDITIONALPARAMETERSDisplayEnum2["Popup"] = "popup";
      })(SeededPKCEADDITIONALPARAMETERSDisplayEnum || (exports.SeededPKCEADDITIONALPARAMETERSDisplayEnum = SeededPKCEADDITIONALPARAMETERSDisplayEnum = {}));
      function SeededPKCEADDITIONALPARAMETERSFromJSON(json) {
        return SeededPKCEADDITIONALPARAMETERSFromJSONTyped(json, false);
      }
      exports.SeededPKCEADDITIONALPARAMETERSFromJSON = SeededPKCEADDITIONALPARAMETERSFromJSON;
      function SeededPKCEADDITIONALPARAMETERSFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "accessType": !(0, runtime_1.exists)(json, "access_type") ? void 0 : json["access_type"],
          "display": !(0, runtime_1.exists)(json, "display") ? void 0 : json["display"]
        };
      }
      exports.SeededPKCEADDITIONALPARAMETERSFromJSONTyped = SeededPKCEADDITIONALPARAMETERSFromJSONTyped;
      function SeededPKCEADDITIONALPARAMETERSToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "access_type": value.accessType,
          "display": value.display
        };
      }
      exports.SeededPKCEADDITIONALPARAMETERSToJSON = SeededPKCEADDITIONALPARAMETERSToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededPerson.js
  var require_SeededPerson = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededPerson.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededPersonToJSON = exports.SeededPersonFromJSONTyped = exports.SeededPersonFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededPersonFromJSON(json) {
        return SeededPersonFromJSONTyped(json, false);
      }
      exports.SeededPersonFromJSON = SeededPersonFromJSON;
      function SeededPersonFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "access": !(0, runtime_1.exists)(json, "access") ? void 0 : (0, _1.PersonAccessFromJSON)(json["access"]),
          "type": (0, _1.PersonTypeFromJSON)(json["type"]),
          "model": !(0, runtime_1.exists)(json, "model") ? void 0 : (0, _1.PersonModelFromJSON)(json["model"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : json["annotations"].map(_1.SeededAnnotationFromJSON)
        };
      }
      exports.SeededPersonFromJSONTyped = SeededPersonFromJSONTyped;
      function SeededPersonToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "access": (0, _1.PersonAccessToJSON)(value.access),
          "type": (0, _1.PersonTypeToJSON)(value.type),
          "model": (0, _1.PersonModelToJSON)(value.model),
          "annotations": value.annotations === void 0 ? void 0 : value.annotations.map(_1.SeededAnnotationToJSON)
        };
      }
      exports.SeededPersonToJSON = SeededPersonToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededScore.js
  var require_SeededScore = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededScore.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededScoreToJSON = exports.SeededScoreFromJSONTyped = exports.SeededScoreFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededScoreFromJSON(json) {
        return SeededScoreFromJSONTyped(json, false);
      }
      exports.SeededScoreFromJSON = SeededScoreFromJSON;
      function SeededScoreFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "reuse": !(0, runtime_1.exists)(json, "reuse") ? void 0 : json["reuse"],
          "update": !(0, runtime_1.exists)(json, "update") ? void 0 : json["update"],
          "reference": !(0, runtime_1.exists)(json, "reference") ? void 0 : json["reference"],
          "priority": !(0, runtime_1.exists)(json, "priority") ? void 0 : json["priority"]
        };
      }
      exports.SeededScoreFromJSONTyped = SeededScoreFromJSONTyped;
      function SeededScoreToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "reuse": value.reuse,
          "update": value.update,
          "reference": value.reference,
          "priority": value.priority
        };
      }
      exports.SeededScoreToJSON = SeededScoreToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededScoreIncrement.js
  var require_SeededScoreIncrement = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededScoreIncrement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededScoreIncrementToJSON = exports.SeededScoreIncrementFromJSONTyped = exports.SeededScoreIncrementFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededScoreIncrementFromJSON(json) {
        return SeededScoreIncrementFromJSONTyped(json, false);
      }
      exports.SeededScoreIncrementFromJSON = SeededScoreIncrementFromJSON;
      function SeededScoreIncrementFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.SeededScoreFromJSON)(json["asset"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.SeededScoreFromJSON)(json["assets"]),
          "website": !(0, runtime_1.exists)(json, "website") ? void 0 : (0, _1.SeededScoreFromJSON)(json["website"]),
          "websites": !(0, runtime_1.exists)(json, "websites") ? void 0 : (0, _1.SeededScoreFromJSON)(json["websites"]),
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : (0, _1.SeededScoreFromJSON)(json["anchor"]),
          "anchors": !(0, runtime_1.exists)(json, "anchors") ? void 0 : (0, _1.SeededScoreFromJSON)(json["anchors"]),
          "anchorPoint": !(0, runtime_1.exists)(json, "anchorPoint") ? void 0 : (0, _1.SeededScoreFromJSON)(json["anchorPoint"]),
          "anchorPoints": !(0, runtime_1.exists)(json, "anchorPoints") ? void 0 : (0, _1.SeededScoreFromJSON)(json["anchorPoints"]),
          "annotation": !(0, runtime_1.exists)(json, "annotation") ? void 0 : (0, _1.SeededScoreFromJSON)(json["annotation"]),
          "annotations": !(0, runtime_1.exists)(json, "annotations") ? void 0 : (0, _1.SeededScoreFromJSON)(json["annotations"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.SeededScoreFromJSON)(json["conversation"]),
          "conversations": !(0, runtime_1.exists)(json, "conversations") ? void 0 : (0, _1.SeededScoreFromJSON)(json["conversations"]),
          "conversationMessage": !(0, runtime_1.exists)(json, "conversationMessage") ? void 0 : (0, _1.SeededScoreFromJSON)(json["conversationMessage"]),
          "conversationMessages": !(0, runtime_1.exists)(json, "conversationMessages") ? void 0 : (0, _1.SeededScoreFromJSON)(json["conversationMessages"]),
          "share": !(0, runtime_1.exists)(json, "share") ? void 0 : (0, _1.SeededScoreFromJSON)(json["share"]),
          "shares": !(0, runtime_1.exists)(json, "shares") ? void 0 : (0, _1.SeededScoreFromJSON)(json["shares"]),
          "sensitive": !(0, runtime_1.exists)(json, "sensitive") ? void 0 : (0, _1.SeededScoreFromJSON)(json["sensitive"]),
          "sensitives": !(0, runtime_1.exists)(json, "sensitives") ? void 0 : (0, _1.SeededScoreFromJSON)(json["sensitives"]),
          "hint": !(0, runtime_1.exists)(json, "hint") ? void 0 : (0, _1.SeededScoreFromJSON)(json["hint"]),
          "hints": !(0, runtime_1.exists)(json, "hints") ? void 0 : (0, _1.SeededScoreFromJSON)(json["hints"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : (0, _1.SeededScoreFromJSON)(json["person"]),
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.SeededScoreFromJSON)(json["persons"]),
          "tag": !(0, runtime_1.exists)(json, "tag") ? void 0 : (0, _1.SeededScoreFromJSON)(json["tag"]),
          "tags": !(0, runtime_1.exists)(json, "tags") ? void 0 : (0, _1.SeededScoreFromJSON)(json["tags"])
        };
      }
      exports.SeededScoreIncrementFromJSONTyped = SeededScoreIncrementFromJSONTyped;
      function SeededScoreIncrementToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.SeededScoreToJSON)(value.asset),
          "assets": (0, _1.SeededScoreToJSON)(value.assets),
          "website": (0, _1.SeededScoreToJSON)(value.website),
          "websites": (0, _1.SeededScoreToJSON)(value.websites),
          "anchor": (0, _1.SeededScoreToJSON)(value.anchor),
          "anchors": (0, _1.SeededScoreToJSON)(value.anchors),
          "anchorPoint": (0, _1.SeededScoreToJSON)(value.anchorPoint),
          "anchorPoints": (0, _1.SeededScoreToJSON)(value.anchorPoints),
          "annotation": (0, _1.SeededScoreToJSON)(value.annotation),
          "annotations": (0, _1.SeededScoreToJSON)(value.annotations),
          "conversation": (0, _1.SeededScoreToJSON)(value.conversation),
          "conversations": (0, _1.SeededScoreToJSON)(value.conversations),
          "conversationMessage": (0, _1.SeededScoreToJSON)(value.conversationMessage),
          "conversationMessages": (0, _1.SeededScoreToJSON)(value.conversationMessages),
          "share": (0, _1.SeededScoreToJSON)(value.share),
          "shares": (0, _1.SeededScoreToJSON)(value.shares),
          "sensitive": (0, _1.SeededScoreToJSON)(value.sensitive),
          "sensitives": (0, _1.SeededScoreToJSON)(value.sensitives),
          "hint": (0, _1.SeededScoreToJSON)(value.hint),
          "hints": (0, _1.SeededScoreToJSON)(value.hints),
          "person": (0, _1.SeededScoreToJSON)(value.person),
          "persons": (0, _1.SeededScoreToJSON)(value.persons),
          "tag": (0, _1.SeededScoreToJSON)(value.tag),
          "tags": (0, _1.SeededScoreToJSON)(value.tags)
        };
      }
      exports.SeededScoreIncrementToJSON = SeededScoreIncrementToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededSensitive.js
  var require_SeededSensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededSensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededSensitiveToJSON = exports.SeededSensitiveFromJSONTyped = exports.SeededSensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededSensitiveFromJSON(json) {
        return SeededSensitiveFromJSONTyped(json, false);
      }
      exports.SeededSensitiveFromJSON = SeededSensitiveFromJSON;
      function SeededSensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "text": json["text"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": (0, _1.SensitiveCategoryEnumFromJSON)(json["category"]),
          "severity": (0, _1.SensitiveSeverityEnumFromJSON)(json["severity"]),
          "name": json["name"],
          "description": json["description"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SensitiveMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededSensitiveFromJSONTyped = SeededSensitiveFromJSONTyped;
      function SeededSensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.SensitiveCategoryEnumToJSON)(value.category),
          "severity": (0, _1.SensitiveSeverityEnumToJSON)(value.severity),
          "name": value.name,
          "description": value.description,
          "metadata": (0, _1.SensitiveMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededSensitiveToJSON = SeededSensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededShare.js
  var require_SeededShare = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededShare.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededShareToJSON = exports.SeededShareFromJSONTyped = exports.SeededShareFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededShareFromJSON(json) {
        return SeededShareFromJSONTyped(json, false);
      }
      exports.SeededShareFromJSON = SeededShareFromJSON;
      function SeededShareFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.AssetFromJSON)(json["asset"]),
          "users": !(0, runtime_1.exists)(json, "users") ? void 0 : json["users"].map(_1.SeededUserFromJSON),
          "access": (0, _1.AccessEnumFromJSON)(json["access"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.AssetsFromJSON)(json["assets"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"]
        };
      }
      exports.SeededShareFromJSONTyped = SeededShareFromJSONTyped;
      function SeededShareToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.AssetToJSON)(value.asset),
          "users": value.users === void 0 ? void 0 : value.users.map(_1.SeededUserToJSON),
          "access": (0, _1.AccessEnumToJSON)(value.access),
          "assets": (0, _1.AssetsToJSON)(value.assets),
          "name": value.name
        };
      }
      exports.SeededShareToJSON = SeededShareToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTag.js
  var require_SeededTag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTagToJSON = exports.SeededTagFromJSONTyped = exports.SeededTagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTagFromJSON(json) {
        return SeededTagFromJSONTyped(json, false);
      }
      exports.SeededTagFromJSON = SeededTagFromJSON;
      function SeededTagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": !(0, runtime_1.exists)(json, "category") ? void 0 : (0, _1.TagCategoryEnumFromJSON)(json["category"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : json["person"]
        };
      }
      exports.SeededTagFromJSONTyped = SeededTagFromJSONTyped;
      function SeededTagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "asset": value.asset,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.TagCategoryEnumToJSON)(value.category),
          "person": value.person
        };
      }
      exports.SeededTagToJSON = SeededTagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAdoptionEvent.js
  var require_SeededTrackedAdoptionEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAdoptionEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedAdoptionEventToJSON = exports.SeededTrackedAdoptionEventFromJSONTyped = exports.SeededTrackedAdoptionEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedAdoptionEventFromJSON(json) {
        return SeededTrackedAdoptionEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedAdoptionEventFromJSON = SeededTrackedAdoptionEventFromJSON;
      function SeededTrackedAdoptionEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifierDescriptionPair": !(0, runtime_1.exists)(json, "identifier_description_pair") ? void 0 : (0, _1.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"])
        };
      }
      exports.SeededTrackedAdoptionEventFromJSONTyped = SeededTrackedAdoptionEventFromJSONTyped;
      function SeededTrackedAdoptionEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifier_description_pair": (0, _1.AnalyticsTrackedAdoptionEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair)
        };
      }
      exports.SeededTrackedAdoptionEventToJSON = SeededTrackedAdoptionEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedApplication.js
  var require_SeededTrackedApplication = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedApplication.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedApplicationToJSON = exports.SeededTrackedApplicationFromJSONTyped = exports.SeededTrackedApplicationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedApplicationFromJSON(json) {
        return SeededTrackedApplicationFromJSONTyped(json, false);
      }
      exports.SeededTrackedApplicationFromJSON = SeededTrackedApplicationFromJSON;
      function SeededTrackedApplicationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "name": (0, _1.ApplicationNameEnumFromJSON)(json["name"]),
          "version": json["version"],
          "platform": (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "capabilities": !(0, runtime_1.exists)(json, "capabilities") ? void 0 : (0, _1.CapabilitiesEnumFromJSON)(json["capabilities"]),
          "privacy": !(0, runtime_1.exists)(json, "privacy") ? void 0 : (0, _1.PrivacyEnumFromJSON)(json["privacy"]),
          "automaticUnload": !(0, runtime_1.exists)(json, "automaticUnload") ? void 0 : json["automaticUnload"]
        };
      }
      exports.SeededTrackedApplicationFromJSONTyped = SeededTrackedApplicationFromJSONTyped;
      function SeededTrackedApplicationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "name": (0, _1.ApplicationNameEnumToJSON)(value.name),
          "version": value.version,
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "capabilities": (0, _1.CapabilitiesEnumToJSON)(value.capabilities),
          "privacy": (0, _1.PrivacyEnumToJSON)(value.privacy),
          "automaticUnload": value.automaticUnload
        };
      }
      exports.SeededTrackedApplicationToJSON = SeededTrackedApplicationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetEvent.js
  var require_SeededTrackedAssetEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedAssetEventToJSON = exports.SeededTrackedAssetEventFromJSONTyped = exports.SeededTrackedAssetEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedAssetEventFromJSON(json) {
        return SeededTrackedAssetEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedAssetEventFromJSON = SeededTrackedAssetEventFromJSON;
      function SeededTrackedAssetEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "identifierDescriptionPair": (0, _1.TrackedAssetEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.TrackedAssetEventMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededTrackedAssetEventFromJSONTyped = SeededTrackedAssetEventFromJSONTyped;
      function SeededTrackedAssetEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "identifier_description_pair": (0, _1.TrackedAssetEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair),
          "metadata": (0, _1.TrackedAssetEventMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededTrackedAssetEventToJSON = SeededTrackedAssetEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetsEvent.js
  var require_SeededTrackedAssetsEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetsEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedAssetsEventToJSON = exports.SeededTrackedAssetsEventFromJSONTyped = exports.SeededTrackedAssetsEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedAssetsEventFromJSON(json) {
        return SeededTrackedAssetsEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedAssetsEventFromJSON = SeededTrackedAssetsEventFromJSON;
      function SeededTrackedAssetsEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifierDescriptionPair": !(0, runtime_1.exists)(json, "identifier_description_pair") ? void 0 : (0, _1.TrackedAssetsEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SeededTrackedAssetsEventMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededTrackedAssetsEventFromJSONTyped = SeededTrackedAssetsEventFromJSONTyped;
      function SeededTrackedAssetsEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifier_description_pair": (0, _1.TrackedAssetsEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair),
          "metadata": (0, _1.SeededTrackedAssetsEventMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededTrackedAssetsEventToJSON = SeededTrackedAssetsEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetsEventMetadata.js
  var require_SeededTrackedAssetsEventMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedAssetsEventMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedAssetsEventMetadataToJSON = exports.SeededTrackedAssetsEventMetadataFromJSONTyped = exports.SeededTrackedAssetsEventMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedAssetsEventMetadataFromJSON(json) {
        return SeededTrackedAssetsEventMetadataFromJSONTyped(json, false);
      }
      exports.SeededTrackedAssetsEventMetadataFromJSON = SeededTrackedAssetsEventMetadataFromJSON;
      function SeededTrackedAssetsEventMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "search": !(0, runtime_1.exists)(json, "search") ? void 0 : (0, _1.TrackedAssetsEventSearchMetadataFromJSON)(json["search"])
        };
      }
      exports.SeededTrackedAssetsEventMetadataFromJSONTyped = SeededTrackedAssetsEventMetadataFromJSONTyped;
      function SeededTrackedAssetsEventMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "search": (0, _1.TrackedAssetsEventSearchMetadataToJSON)(value.search)
        };
      }
      exports.SeededTrackedAssetsEventMetadataToJSON = SeededTrackedAssetsEventMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedFormatEvent.js
  var require_SeededTrackedFormatEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedFormatEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedFormatEventToJSON = exports.SeededTrackedFormatEventFromJSONTyped = exports.SeededTrackedFormatEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedFormatEventFromJSON(json) {
        return SeededTrackedFormatEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedFormatEventFromJSON = SeededTrackedFormatEventFromJSON;
      function SeededTrackedFormatEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifierDescriptionPair": (0, _1.TrackedFormatEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"]),
          "format": (0, _1.ReferencedFormatFromJSON)(json["format"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.TrackedFormatEventMetadataFromJSON)(json["metadata"])
        };
      }
      exports.SeededTrackedFormatEventFromJSONTyped = SeededTrackedFormatEventFromJSONTyped;
      function SeededTrackedFormatEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifier_description_pair": (0, _1.TrackedFormatEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair),
          "format": (0, _1.ReferencedFormatToJSON)(value.format),
          "metadata": (0, _1.TrackedFormatEventMetadataToJSON)(value.metadata)
        };
      }
      exports.SeededTrackedFormatEventToJSON = SeededTrackedFormatEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedInteractionEvent.js
  var require_SeededTrackedInteractionEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedInteractionEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedInteractionEventToJSON = exports.SeededTrackedInteractionEventFromJSONTyped = exports.SeededTrackedInteractionEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedInteractionEventFromJSON(json) {
        return SeededTrackedInteractionEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedInteractionEventFromJSON = SeededTrackedInteractionEventFromJSON;
      function SeededTrackedInteractionEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "description": json["description"],
          "element": !(0, runtime_1.exists)(json, "element") ? void 0 : json["element"],
          "identifierDescriptionPair": !(0, runtime_1.exists)(json, "identifier_description_pair") ? void 0 : (0, _1.SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"])
        };
      }
      exports.SeededTrackedInteractionEventFromJSONTyped = SeededTrackedInteractionEventFromJSONTyped;
      function SeededTrackedInteractionEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "description": value.description,
          "element": value.element,
          "identifier_description_pair": (0, _1.SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair)
        };
      }
      exports.SeededTrackedInteractionEventToJSON = SeededTrackedInteractionEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedInteractionEventIdentifierDescriptionPairs.js
  var require_SeededTrackedInteractionEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedInteractionEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON = exports.SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped = exports.SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON = exports.SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum;
      (function(SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum2) {
        SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum2["TheAssetsListWasRefreshedThroughUiElement"] = "the_assets_list_was_refreshed_through_ui_element";
      })(SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum || (exports.SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum = SeededTrackedInteractionEventIdentifierDescriptionPairsAssetsListRefreshedEnum = {}));
      function SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON(json) {
        return SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON = SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSON;
      function SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assetsListRefreshed": !(0, runtime_1.exists)(json, "assets_list_refreshed") ? void 0 : json["assets_list_refreshed"]
        };
      }
      exports.SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped = SeededTrackedInteractionEventIdentifierDescriptionPairsFromJSONTyped;
      function SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets_list_refreshed": value.assetsListRefreshed
        };
      }
      exports.SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON = SeededTrackedInteractionEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedKeyboardEvent.js
  var require_SeededTrackedKeyboardEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedKeyboardEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedKeyboardEventToJSON = exports.SeededTrackedKeyboardEventFromJSONTyped = exports.SeededTrackedKeyboardEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedKeyboardEventFromJSON(json) {
        return SeededTrackedKeyboardEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedKeyboardEventFromJSON = SeededTrackedKeyboardEventFromJSON;
      function SeededTrackedKeyboardEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "description": json["description"],
          "shortcut": json["shortcut"],
          "identifierDescriptionPair": !(0, runtime_1.exists)(json, "identifier_description_pair") ? void 0 : (0, _1.SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"])
        };
      }
      exports.SeededTrackedKeyboardEventFromJSONTyped = SeededTrackedKeyboardEventFromJSONTyped;
      function SeededTrackedKeyboardEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "description": value.description,
          "shortcut": value.shortcut,
          "identifier_description_pair": (0, _1.SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair)
        };
      }
      exports.SeededTrackedKeyboardEventToJSON = SeededTrackedKeyboardEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedKeyboardEventIdentifierDescriptionPairs.js
  var require_SeededTrackedKeyboardEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedKeyboardEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON = exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped = exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON = exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum;
      (function(SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum2) {
        SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum2["TheAssetsListWasRefreshedThroughAKeyboardShortcut"] = "the_assets_list_was_refreshed_through_a_keyboard_shortcut";
      })(SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum || (exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum = SeededTrackedKeyboardEventIdentifierDescriptionPairsAssetsListRefreshedEnum = {}));
      function SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON(json) {
        return SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON = SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSON;
      function SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assetsListRefreshed": !(0, runtime_1.exists)(json, "assets_list_refreshed") ? void 0 : json["assets_list_refreshed"]
        };
      }
      exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped = SeededTrackedKeyboardEventIdentifierDescriptionPairsFromJSONTyped;
      function SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets_list_refreshed": value.assetsListRefreshed
        };
      }
      exports.SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON = SeededTrackedKeyboardEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedMachineLearningEvent.js
  var require_SeededTrackedMachineLearningEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedMachineLearningEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedMachineLearningEventToJSON = exports.SeededTrackedMachineLearningEventFromJSONTyped = exports.SeededTrackedMachineLearningEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedMachineLearningEventFromJSON(json) {
        return SeededTrackedMachineLearningEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedMachineLearningEventFromJSON = SeededTrackedMachineLearningEventFromJSON;
      function SeededTrackedMachineLearningEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "tlp": !(0, runtime_1.exists)(json, "tlp") ? void 0 : (0, _1.TLPMachineLearningProcessingEventFromJSON)(json["tlp"]),
          "graphical": !(0, runtime_1.exists)(json, "graphical") ? void 0 : (0, _1.GraphicalMachineLearningProcessingEventFromJSON)(json["graphical"])
        };
      }
      exports.SeededTrackedMachineLearningEventFromJSONTyped = SeededTrackedMachineLearningEventFromJSONTyped;
      function SeededTrackedMachineLearningEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "tlp": (0, _1.TLPMachineLearningProcessingEventToJSON)(value.tlp),
          "graphical": (0, _1.GraphicalMachineLearningProcessingEventToJSON)(value.graphical)
        };
      }
      exports.SeededTrackedMachineLearningEventToJSON = SeededTrackedMachineLearningEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedSessionEvent.js
  var require_SeededTrackedSessionEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededTrackedSessionEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededTrackedSessionEventToJSON = exports.SeededTrackedSessionEventFromJSONTyped = exports.SeededTrackedSessionEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededTrackedSessionEventFromJSON(json) {
        return SeededTrackedSessionEventFromJSONTyped(json, false);
      }
      exports.SeededTrackedSessionEventFromJSON = SeededTrackedSessionEventFromJSON;
      function SeededTrackedSessionEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "identifierDescriptionPair": (0, _1.TrackedSessionEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"])
        };
      }
      exports.SeededTrackedSessionEventFromJSONTyped = SeededTrackedSessionEventFromJSONTyped;
      function SeededTrackedSessionEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "identifier_description_pair": (0, _1.TrackedSessionEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair)
        };
      }
      exports.SeededTrackedSessionEventToJSON = SeededTrackedSessionEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededUltraSuiteAsset.js
  var require_SeededUltraSuiteAsset = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededUltraSuiteAsset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededUltraSuiteAssetToJSON = exports.SeededUltraSuiteAssetFromJSONTyped = exports.SeededUltraSuiteAssetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededUltraSuiteAssetFromJSON(json) {
        return SeededUltraSuiteAssetFromJSONTyped(json, false);
      }
      exports.SeededUltraSuiteAssetFromJSON = SeededUltraSuiteAssetFromJSON;
      function SeededUltraSuiteAssetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "ext": !(0, runtime_1.exists)(json, "ext") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["ext"]),
          "format": (0, _1.SeededFormatFromJSON)(json["format"]),
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"]
        };
      }
      exports.SeededUltraSuiteAssetFromJSONTyped = SeededUltraSuiteAssetFromJSONTyped;
      function SeededUltraSuiteAssetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "name": value.name,
          "ext": (0, _1.ClassificationSpecificEnumToJSON)(value.ext),
          "format": (0, _1.SeededFormatToJSON)(value.format),
          "description": value.description
        };
      }
      exports.SeededUltraSuiteAssetToJSON = SeededUltraSuiteAssetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededUser.js
  var require_SeededUser = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededUser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededUserToJSON = exports.SeededUserFromJSONTyped = exports.SeededUserFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededUserFromJSON(json) {
        return SeededUserFromJSONTyped(json, false);
      }
      exports.SeededUserFromJSON = SeededUserFromJSON;
      function SeededUserFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "emails": json["emails"]
        };
      }
      exports.SeededUserFromJSONTyped = SeededUserFromJSONTyped;
      function SeededUserToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "emails": value.emails
        };
      }
      exports.SeededUserToJSON = SeededUserToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SeededWebsite.js
  var require_SeededWebsite = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SeededWebsite.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeededWebsiteToJSON = exports.SeededWebsiteFromJSONTyped = exports.SeededWebsiteFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeededWebsiteFromJSON(json) {
        return SeededWebsiteFromJSONTyped(json, false);
      }
      exports.SeededWebsiteFromJSON = SeededWebsiteFromJSON;
      function SeededWebsiteFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : json["asset"],
          "url": json["url"],
          "name": json["name"],
          "mechanism": !(0, runtime_1.exists)(json, "mechanism") ? void 0 : (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : json["person"]
        };
      }
      exports.SeededWebsiteFromJSONTyped = SeededWebsiteFromJSONTyped;
      function SeededWebsiteToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "url": value.url,
          "name": value.name,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "person": value.person
        };
      }
      exports.SeededWebsiteToJSON = SeededWebsiteToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Seeds.js
  var require_Seeds = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Seeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SeedsToJSON = exports.SeedsFromJSONTyped = exports.SeedsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SeedsFromJSON(json) {
        return SeedsFromJSONTyped(json, false);
      }
      exports.SeedsFromJSON = SeedsFromJSON;
      function SeedsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SeedFromJSON)
        };
      }
      exports.SeedsFromJSONTyped = SeedsFromJSONTyped;
      function SeedsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SeedToJSON)
        };
      }
      exports.SeedsToJSON = SeedsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SegmentedTechnicalLanguage.js
  var require_SegmentedTechnicalLanguage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SegmentedTechnicalLanguage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SegmentedTechnicalLanguageToJSON = exports.SegmentedTechnicalLanguageFromJSONTyped = exports.SegmentedTechnicalLanguageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SegmentedTechnicalLanguageFromJSON(json) {
        return SegmentedTechnicalLanguageFromJSONTyped(json, false);
      }
      exports.SegmentedTechnicalLanguageFromJSON = SegmentedTechnicalLanguageFromJSON;
      function SegmentedTechnicalLanguageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SegmentedTechnicalLanguageFragmentFromJSON)
        };
      }
      exports.SegmentedTechnicalLanguageFromJSONTyped = SegmentedTechnicalLanguageFromJSONTyped;
      function SegmentedTechnicalLanguageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SegmentedTechnicalLanguageFragmentToJSON)
        };
      }
      exports.SegmentedTechnicalLanguageToJSON = SegmentedTechnicalLanguageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SegmentedTechnicalLanguageFragment.js
  var require_SegmentedTechnicalLanguageFragment = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SegmentedTechnicalLanguageFragment.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SegmentedTechnicalLanguageFragmentToJSON = exports.SegmentedTechnicalLanguageFragmentFromJSONTyped = exports.SegmentedTechnicalLanguageFragmentFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SegmentedTechnicalLanguageFragmentFromJSON(json) {
        return SegmentedTechnicalLanguageFragmentFromJSONTyped(json, false);
      }
      exports.SegmentedTechnicalLanguageFragmentFromJSON = SegmentedTechnicalLanguageFragmentFromJSON;
      function SegmentedTechnicalLanguageFragmentFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "generic": (0, _1.ClassificationGenericEnumFromJSON)(json["generic"]),
          "specific": !(0, runtime_1.exists)(json, "specific") ? void 0 : (0, _1.ClassificationSpecificEnumFromJSON)(json["specific"]),
          "fragment": (0, _1.FragmentFormatFromJSON)(json["fragment"])
        };
      }
      exports.SegmentedTechnicalLanguageFragmentFromJSONTyped = SegmentedTechnicalLanguageFragmentFromJSONTyped;
      function SegmentedTechnicalLanguageFragmentToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "generic": (0, _1.ClassificationGenericEnumToJSON)(value.generic),
          "specific": (0, _1.ClassificationSpecificEnumToJSON)(value.specific),
          "fragment": (0, _1.FragmentFormatToJSON)(value.fragment)
        };
      }
      exports.SegmentedTechnicalLanguageFragmentToJSON = SegmentedTechnicalLanguageFragmentToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Sensitive.js
  var require_Sensitive = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Sensitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitiveToJSON = exports.SensitiveFromJSONTyped = exports.SensitiveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SensitiveFromJSON(json) {
        return SensitiveFromJSONTyped(json, false);
      }
      exports.SensitiveFromJSON = SensitiveFromJSON;
      function SensitiveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "asset": (0, _1.FlattenedAssetFromJSON)(json["asset"]),
          "text": json["text"],
          "mechanism": (0, _1.MechanismEnumFromJSON)(json["mechanism"]),
          "category": (0, _1.SensitiveCategoryEnumFromJSON)(json["category"]),
          "severity": (0, _1.SensitiveSeverityEnumFromJSON)(json["severity"]),
          "name": json["name"],
          "description": json["description"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.SensitiveMetadataFromJSON)(json["metadata"]),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.SensitiveFromJSONTyped = SensitiveFromJSONTyped;
      function SensitiveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "asset": (0, _1.FlattenedAssetToJSON)(value.asset),
          "text": value.text,
          "mechanism": (0, _1.MechanismEnumToJSON)(value.mechanism),
          "category": (0, _1.SensitiveCategoryEnumToJSON)(value.category),
          "severity": (0, _1.SensitiveSeverityEnumToJSON)(value.severity),
          "name": value.name,
          "description": value.description,
          "metadata": (0, _1.SensitiveMetadataToJSON)(value.metadata),
          "interactions": value.interactions,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.SensitiveToJSON = SensitiveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveCategoryEnum.js
  var require_SensitiveCategoryEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveCategoryEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitiveCategoryEnumToJSON = exports.SensitiveCategoryEnumFromJSONTyped = exports.SensitiveCategoryEnumFromJSON = exports.SensitiveCategoryEnum = void 0;
      var SensitiveCategoryEnum;
      (function(SensitiveCategoryEnum2) {
        SensitiveCategoryEnum2["Secret"] = "SECRET";
        SensitiveCategoryEnum2["ApiKey"] = "API_KEY";
        SensitiveCategoryEnum2["ClientId"] = "CLIENT_ID";
        SensitiveCategoryEnum2["ClientSecret"] = "CLIENT_SECRET";
        SensitiveCategoryEnum2["SecretKey"] = "SECRET_KEY";
        SensitiveCategoryEnum2["ApiToken"] = "API_TOKEN";
        SensitiveCategoryEnum2["AccessKey"] = "ACCESS_KEY";
        SensitiveCategoryEnum2["AccessToken"] = "ACCESS_TOKEN";
        SensitiveCategoryEnum2["Url"] = "URL";
        SensitiveCategoryEnum2["PublicKey"] = "PUBLIC_KEY";
        SensitiveCategoryEnum2["PrivateKey"] = "PRIVATE_KEY";
        SensitiveCategoryEnum2["ApiId"] = "API_ID";
        SensitiveCategoryEnum2["WebHookUrl"] = "WEB_HOOK_URL";
      })(SensitiveCategoryEnum || (exports.SensitiveCategoryEnum = SensitiveCategoryEnum = {}));
      function SensitiveCategoryEnumFromJSON(json) {
        return SensitiveCategoryEnumFromJSONTyped(json, false);
      }
      exports.SensitiveCategoryEnumFromJSON = SensitiveCategoryEnumFromJSON;
      function SensitiveCategoryEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.SensitiveCategoryEnumFromJSONTyped = SensitiveCategoryEnumFromJSONTyped;
      function SensitiveCategoryEnumToJSON(value) {
        return value;
      }
      exports.SensitiveCategoryEnumToJSON = SensitiveCategoryEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveMetadata.js
  var require_SensitiveMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitiveMetadataToJSON = exports.SensitiveMetadataFromJSONTyped = exports.SensitiveMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SensitiveMetadataFromJSON(json) {
        return SensitiveMetadataFromJSONTyped(json, false);
      }
      exports.SensitiveMetadataFromJSON = SensitiveMetadataFromJSON;
      function SensitiveMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "match": !(0, runtime_1.exists)(json, "match") ? void 0 : (0, _1.TextMatchFromJSON)(json["match"]),
          "entropy": !(0, runtime_1.exists)(json, "entropy") ? void 0 : json["entropy"]
        };
      }
      exports.SensitiveMetadataFromJSONTyped = SensitiveMetadataFromJSONTyped;
      function SensitiveMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "match": (0, _1.TextMatchToJSON)(value.match),
          "entropy": value.entropy
        };
      }
      exports.SensitiveMetadataToJSON = SensitiveMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveSeverityEnum.js
  var require_SensitiveSeverityEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SensitiveSeverityEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitiveSeverityEnumToJSON = exports.SensitiveSeverityEnumFromJSONTyped = exports.SensitiveSeverityEnumFromJSON = exports.SensitiveSeverityEnum = void 0;
      var SensitiveSeverityEnum;
      (function(SensitiveSeverityEnum2) {
        SensitiveSeverityEnum2["Low"] = "LOW";
        SensitiveSeverityEnum2["Moderate"] = "MODERATE";
        SensitiveSeverityEnum2["High"] = "HIGH";
      })(SensitiveSeverityEnum || (exports.SensitiveSeverityEnum = SensitiveSeverityEnum = {}));
      function SensitiveSeverityEnumFromJSON(json) {
        return SensitiveSeverityEnumFromJSONTyped(json, false);
      }
      exports.SensitiveSeverityEnumFromJSON = SensitiveSeverityEnumFromJSON;
      function SensitiveSeverityEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.SensitiveSeverityEnumFromJSONTyped = SensitiveSeverityEnumFromJSONTyped;
      function SensitiveSeverityEnumToJSON(value) {
        return value;
      }
      exports.SensitiveSeverityEnumToJSON = SensitiveSeverityEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Sensitives.js
  var require_Sensitives = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Sensitives.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitivesToJSON = exports.SensitivesFromJSONTyped = exports.SensitivesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SensitivesFromJSON(json) {
        return SensitivesFromJSONTyped(json, false);
      }
      exports.SensitivesFromJSON = SensitivesFromJSON;
      function SensitivesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.SensitiveFromJSON),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.SensitivesFromJSONTyped = SensitivesFromJSONTyped;
      function SensitivesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.SensitiveToJSON),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.SensitivesToJSON = SensitivesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Session.js
  var require_Session = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Session.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SessionToJSON = exports.SessionFromJSONTyped = exports.SessionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SessionFromJSON(json) {
        return SessionFromJSONTyped(json, false);
      }
      exports.SessionFromJSON = SessionFromJSON;
      function SessionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "id": json["id"],
          "opened": (0, _1.GroupedTimestampFromJSON)(json["opened"]),
          "closed": !(0, runtime_1.exists)(json, "closed") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["closed"])
        };
      }
      exports.SessionFromJSONTyped = SessionFromJSONTyped;
      function SessionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "id": value.id,
          "opened": (0, _1.GroupedTimestampToJSON)(value.opened),
          "closed": (0, _1.GroupedTimestampToJSON)(value.closed)
        };
      }
      exports.SessionToJSON = SessionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Share.js
  var require_Share = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Share.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ShareToJSON = exports.ShareFromJSONTyped = exports.ShareFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ShareFromJSON(json) {
        return ShareFromJSONTyped(json, false);
      }
      exports.ShareFromJSON = ShareFromJSON;
      function ShareFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : json["user"],
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.FlattenedAssetFromJSON)(json["asset"]),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "link": json["link"],
          "access": (0, _1.AccessEnumFromJSON)(json["access"]),
          "accessors": (0, _1.AccessorsFromJSON)(json["accessors"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "_short": json["short"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "distributions": !(0, runtime_1.exists)(json, "distributions") ? void 0 : (0, _1.DistributionsFromJSON)(json["distributions"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.ShareFromJSONTyped = ShareFromJSONTyped;
      function ShareToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "user": value.user,
          "asset": (0, _1.FlattenedAssetToJSON)(value.asset),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "link": value.link,
          "access": (0, _1.AccessEnumToJSON)(value.access),
          "accessors": (0, _1.AccessorsToJSON)(value.accessors),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "short": value._short,
          "name": value.name,
          "distributions": (0, _1.DistributionsToJSON)(value.distributions),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.ShareToJSON = ShareToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Shares.js
  var require_Shares = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Shares.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SharesToJSON = exports.SharesFromJSONTyped = exports.SharesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SharesFromJSON(json) {
        return SharesFromJSONTyped(json, false);
      }
      exports.SharesFromJSON = SharesFromJSON;
      function SharesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.ShareFromJSON),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.SharesFromJSONTyped = SharesFromJSONTyped;
      function SharesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.ShareToJSON),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.SharesToJSON = SharesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Space.js
  var require_Space = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Space.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SpaceToJSON = exports.SpaceFromJSONTyped = exports.SpaceFromJSON = void 0;
      var runtime_1 = require_runtime();
      function SpaceFromJSON(json) {
        return SpaceFromJSONTyped(json, false);
      }
      exports.SpaceFromJSON = SpaceFromJSON;
      function SpaceFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "size": !(0, runtime_1.exists)(json, "size") ? void 0 : json["size"],
          "duration": !(0, runtime_1.exists)(json, "duration") ? void 0 : json["duration"]
        };
      }
      exports.SpaceFromJSONTyped = SpaceFromJSONTyped;
      function SpaceToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "size": value.size,
          "duration": value.duration
        };
      }
      exports.SpaceToJSON = SpaceToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/StreamedIdentifier.js
  var require_StreamedIdentifier = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/StreamedIdentifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StreamedIdentifierToJSON = exports.StreamedIdentifierFromJSONTyped = exports.StreamedIdentifierFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function StreamedIdentifierFromJSON(json) {
        return StreamedIdentifierFromJSONTyped(json, false);
      }
      exports.StreamedIdentifierFromJSON = StreamedIdentifierFromJSON;
      function StreamedIdentifierFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "asset": !(0, runtime_1.exists)(json, "asset") ? void 0 : (0, _1.ReferencedAssetFromJSON)(json["asset"]),
          "conversation": !(0, runtime_1.exists)(json, "conversation") ? void 0 : (0, _1.ReferencedConversationFromJSON)(json["conversation"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : json["deleted"]
        };
      }
      exports.StreamedIdentifierFromJSONTyped = StreamedIdentifierFromJSONTyped;
      function StreamedIdentifierToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "asset": (0, _1.ReferencedAssetToJSON)(value.asset),
          "conversation": (0, _1.ReferencedConversationToJSON)(value.conversation),
          "deleted": value.deleted
        };
      }
      exports.StreamedIdentifierToJSON = StreamedIdentifierToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/StreamedIdentifiers.js
  var require_StreamedIdentifiers = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/StreamedIdentifiers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StreamedIdentifiersToJSON = exports.StreamedIdentifiersFromJSONTyped = exports.StreamedIdentifiersFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function StreamedIdentifiersFromJSON(json) {
        return StreamedIdentifiersFromJSONTyped(json, false);
      }
      exports.StreamedIdentifiersFromJSON = StreamedIdentifiersFromJSON;
      function StreamedIdentifiersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.StreamedIdentifierFromJSON)
        };
      }
      exports.StreamedIdentifiersFromJSONTyped = StreamedIdentifiersFromJSONTyped;
      function StreamedIdentifiersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.StreamedIdentifierToJSON)
        };
      }
      exports.StreamedIdentifiersToJSON = StreamedIdentifiersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Suggestion.js
  var require_Suggestion = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Suggestion.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SuggestionToJSON = exports.SuggestionFromJSONTyped = exports.SuggestionFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SuggestionFromJSON(json) {
        return SuggestionFromJSONTyped(json, false);
      }
      exports.SuggestionFromJSON = SuggestionFromJSON;
      function SuggestionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "reuse": (0, _1.ReuseSuggestionFromJSON)(json["reuse"]),
          "save": (0, _1.SaveSuggestionFromJSON)(json["save"]),
          "target": (0, _1.SuggestionTargetFromJSON)(json["target"]),
          "assets": (0, _1.AssetsFromJSON)(json["assets"]),
          "distribution": !(0, runtime_1.exists)(json, "distribution") ? void 0 : json["distribution"]
        };
      }
      exports.SuggestionFromJSONTyped = SuggestionFromJSONTyped;
      function SuggestionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "reuse": (0, _1.ReuseSuggestionToJSON)(value.reuse),
          "save": (0, _1.SaveSuggestionToJSON)(value.save),
          "target": (0, _1.SuggestionTargetToJSON)(value.target),
          "assets": (0, _1.AssetsToJSON)(value.assets),
          "distribution": value.distribution
        };
      }
      exports.SuggestionToJSON = SuggestionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SuggestionTarget.js
  var require_SuggestionTarget = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SuggestionTarget.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SuggestionTargetToJSON = exports.SuggestionTargetFromJSONTyped = exports.SuggestionTargetFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function SuggestionTargetFromJSON(json) {
        return SuggestionTargetFromJSONTyped(json, false);
      }
      exports.SuggestionTargetFromJSON = SuggestionTargetFromJSON;
      function SuggestionTargetFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "seed": (0, _1.SeededConnectorCreationFromJSON)(json["seed"]),
          "vector": json["vector"]
        };
      }
      exports.SuggestionTargetFromJSONTyped = SuggestionTargetFromJSONTyped;
      function SuggestionTargetToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "seed": (0, _1.SeededConnectorCreationToJSON)(value.seed),
          "vector": value.vector
        };
      }
      exports.SuggestionTargetToJSON = SuggestionTargetToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SystemExecutionCpuInformation.js
  var require_SystemExecutionCpuInformation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SystemExecutionCpuInformation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SystemExecutionCpuInformationToJSON = exports.SystemExecutionCpuInformationFromJSONTyped = exports.SystemExecutionCpuInformationFromJSON = void 0;
      function SystemExecutionCpuInformationFromJSON(json) {
        return SystemExecutionCpuInformationFromJSONTyped(json, false);
      }
      exports.SystemExecutionCpuInformationFromJSON = SystemExecutionCpuInformationFromJSON;
      function SystemExecutionCpuInformationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "count": json["count"],
          "brand": json["brand"],
          "frequency": json["frequency"]
        };
      }
      exports.SystemExecutionCpuInformationFromJSONTyped = SystemExecutionCpuInformationFromJSONTyped;
      function SystemExecutionCpuInformationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "count": value.count,
          "brand": value.brand,
          "frequency": value.frequency
        };
      }
      exports.SystemExecutionCpuInformationToJSON = SystemExecutionCpuInformationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/SystemExecutionInformation.js
  var require_SystemExecutionInformation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/SystemExecutionInformation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SystemExecutionInformationToJSON = exports.SystemExecutionInformationFromJSONTyped = exports.SystemExecutionInformationFromJSON = void 0;
      var _1 = require_models();
      function SystemExecutionInformationFromJSON(json) {
        return SystemExecutionInformationFromJSONTyped(json, false);
      }
      exports.SystemExecutionInformationFromJSON = SystemExecutionInformationFromJSON;
      function SystemExecutionInformationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "memory": json["memory"],
          "os": json["os"],
          "kernel": json["kernel"],
          "cpu": (0, _1.SystemExecutionCpuInformationFromJSON)(json["cpu"])
        };
      }
      exports.SystemExecutionInformationFromJSONTyped = SystemExecutionInformationFromJSONTyped;
      function SystemExecutionInformationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "memory": value.memory,
          "os": value.os,
          "kernel": value.kernel,
          "cpu": (0, _1.SystemExecutionCpuInformationToJSON)(value.cpu)
        };
      }
      exports.SystemExecutionInformationToJSON = SystemExecutionInformationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeDirectoryAnalytics.js
  var require_TLPCodeDirectoryAnalytics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeDirectoryAnalytics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeDirectoryAnalyticsToJSON = exports.TLPCodeDirectoryAnalyticsFromJSONTyped = exports.TLPCodeDirectoryAnalyticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeDirectoryAnalyticsFromJSON(json) {
        return TLPCodeDirectoryAnalyticsFromJSONTyped(json, false);
      }
      exports.TLPCodeDirectoryAnalyticsFromJSON = TLPCodeDirectoryAnalyticsFromJSON;
      function TLPCodeDirectoryAnalyticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"]
        };
      }
      exports.TLPCodeDirectoryAnalyticsFromJSONTyped = TLPCodeDirectoryAnalyticsFromJSONTyped;
      function TLPCodeDirectoryAnalyticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.TLPCodeDirectoryAnalyticsToJSON = TLPCodeDirectoryAnalyticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFileAnalytics.js
  var require_TLPCodeFileAnalytics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFileAnalytics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFileAnalyticsToJSON = exports.TLPCodeFileAnalyticsFromJSONTyped = exports.TLPCodeFileAnalyticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFileAnalyticsFromJSON(json) {
        return TLPCodeFileAnalyticsFromJSONTyped(json, false);
      }
      exports.TLPCodeFileAnalyticsFromJSON = TLPCodeFileAnalyticsFromJSON;
      function TLPCodeFileAnalyticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"]
        };
      }
      exports.TLPCodeFileAnalyticsFromJSONTyped = TLPCodeFileAnalyticsFromJSONTyped;
      function TLPCodeFileAnalyticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.TLPCodeFileAnalyticsToJSON = TLPCodeFileAnalyticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentClassification.js
  var require_TLPCodeFragmentClassification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentClassification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentClassificationToJSON = exports.TLPCodeFragmentClassificationFromJSONTyped = exports.TLPCodeFragmentClassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentClassificationFromJSON(json) {
        return TLPCodeFragmentClassificationFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentClassificationFromJSON = TLPCodeFragmentClassificationFromJSON;
      function TLPCodeFragmentClassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "model": json["model"],
          "created": json["created"],
          "classification": json["classification"],
          "probability": json["probability"],
          "context": json["context"],
          "distribution": !(0, runtime_1.exists)(json, "distribution") ? void 0 : json["distribution"],
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.TLPCodeFragmentClassificationMetadataFromJSON)(json["metadata"]),
          "user": json["user"],
          "latency": !(0, runtime_1.exists)(json, "latency") ? void 0 : json["latency"],
          "system": !(0, runtime_1.exists)(json, "system") ? void 0 : (0, _1.SystemExecutionInformationFromJSON)(json["system"])
        };
      }
      exports.TLPCodeFragmentClassificationFromJSONTyped = TLPCodeFragmentClassificationFromJSONTyped;
      function TLPCodeFragmentClassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "model": value.model,
          "created": value.created,
          "classification": value.classification,
          "probability": value.probability,
          "context": value.context,
          "distribution": value.distribution,
          "metadata": (0, _1.TLPCodeFragmentClassificationMetadataToJSON)(value.metadata),
          "user": value.user,
          "latency": value.latency,
          "system": (0, _1.SystemExecutionInformationToJSON)(value.system)
        };
      }
      exports.TLPCodeFragmentClassificationToJSON = TLPCodeFragmentClassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentClassificationMetadata.js
  var require_TLPCodeFragmentClassificationMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentClassificationMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentClassificationMetadataToJSON = exports.TLPCodeFragmentClassificationMetadataFromJSONTyped = exports.TLPCodeFragmentClassificationMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentClassificationMetadataFromJSON(json) {
        return TLPCodeFragmentClassificationMetadataFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentClassificationMetadataFromJSON = TLPCodeFragmentClassificationMetadataFromJSON;
      function TLPCodeFragmentClassificationMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "context": !(0, runtime_1.exists)(json, "context") ? void 0 : (0, _1.ClassificationFromJSON)(json["context"]),
          "prior": !(0, runtime_1.exists)(json, "prior") ? void 0 : (0, _1.ClassificationFromJSON)(json["prior"])
        };
      }
      exports.TLPCodeFragmentClassificationMetadataFromJSONTyped = TLPCodeFragmentClassificationMetadataFromJSONTyped;
      function TLPCodeFragmentClassificationMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "context": (0, _1.ClassificationToJSON)(value.context),
          "prior": (0, _1.ClassificationToJSON)(value.prior)
        };
      }
      exports.TLPCodeFragmentClassificationMetadataToJSON = TLPCodeFragmentClassificationMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentDescription.js
  var require_TLPCodeFragmentDescription = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentDescription.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentDescriptionToJSON = exports.TLPCodeFragmentDescriptionFromJSONTyped = exports.TLPCodeFragmentDescriptionFromJSON = void 0;
      var runtime_1 = require_runtime();
      function TLPCodeFragmentDescriptionFromJSON(json) {
        return TLPCodeFragmentDescriptionFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentDescriptionFromJSON = TLPCodeFragmentDescriptionFromJSON;
      function TLPCodeFragmentDescriptionFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : json["description"],
          "asset": json["asset"],
          "created": json["created"],
          "model": json["model"],
          "latency": !(0, runtime_1.exists)(json, "latency") ? void 0 : json["latency"],
          "user": json["user"],
          "context": !(0, runtime_1.exists)(json, "context") ? void 0 : json["context"],
          "os": !(0, runtime_1.exists)(json, "os") ? void 0 : json["os"]
        };
      }
      exports.TLPCodeFragmentDescriptionFromJSONTyped = TLPCodeFragmentDescriptionFromJSONTyped;
      function TLPCodeFragmentDescriptionToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "description": value.description,
          "asset": value.asset,
          "created": value.created,
          "model": value.model,
          "latency": value.latency,
          "user": value.user,
          "context": value.context,
          "os": value.os
        };
      }
      exports.TLPCodeFragmentDescriptionToJSON = TLPCodeFragmentDescriptionToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentDescriptiveStatistics.js
  var require_TLPCodeFragmentDescriptiveStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentDescriptiveStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentDescriptiveStatisticsToJSON = exports.TLPCodeFragmentDescriptiveStatisticsFromJSONTyped = exports.TLPCodeFragmentDescriptiveStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentDescriptiveStatisticsFromJSON(json) {
        return TLPCodeFragmentDescriptiveStatisticsFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentDescriptiveStatisticsFromJSON = TLPCodeFragmentDescriptiveStatisticsFromJSON;
      function TLPCodeFragmentDescriptiveStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "user": json["user"],
          "os": json["os"],
          "language": json["language"],
          "length": json["length"],
          "ast": json["ast"],
          "timestamp": json["timestamp"],
          "asset": json["asset"],
          "context": json["context"],
          "snippet": json["snippet"]
        };
      }
      exports.TLPCodeFragmentDescriptiveStatisticsFromJSONTyped = TLPCodeFragmentDescriptiveStatisticsFromJSONTyped;
      function TLPCodeFragmentDescriptiveStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "user": value.user,
          "os": value.os,
          "language": value.language,
          "length": value.length,
          "ast": value.ast,
          "timestamp": value.timestamp,
          "asset": value.asset,
          "context": value.context,
          "snippet": value.snippet
        };
      }
      exports.TLPCodeFragmentDescriptiveStatisticsToJSON = TLPCodeFragmentDescriptiveStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentReclassification.js
  var require_TLPCodeFragmentReclassification = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentReclassification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentReclassificationToJSON = exports.TLPCodeFragmentReclassificationFromJSONTyped = exports.TLPCodeFragmentReclassificationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentReclassificationFromJSON(json) {
        return TLPCodeFragmentReclassificationFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentReclassificationFromJSON = TLPCodeFragmentReclassificationFromJSON;
      function TLPCodeFragmentReclassificationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "model": json["model"],
          "created": json["created"],
          "updates": (0, _1.TLPCodeFragmentReclassificationUpdatesFromJSON)(json["updates"]),
          "user": json["user"],
          "context": json["context"]
        };
      }
      exports.TLPCodeFragmentReclassificationFromJSONTyped = TLPCodeFragmentReclassificationFromJSONTyped;
      function TLPCodeFragmentReclassificationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "model": value.model,
          "created": value.created,
          "updates": (0, _1.TLPCodeFragmentReclassificationUpdatesToJSON)(value.updates),
          "user": value.user,
          "context": value.context
        };
      }
      exports.TLPCodeFragmentReclassificationToJSON = TLPCodeFragmentReclassificationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentReclassificationUpdates.js
  var require_TLPCodeFragmentReclassificationUpdates = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentReclassificationUpdates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentReclassificationUpdatesToJSON = exports.TLPCodeFragmentReclassificationUpdatesFromJSONTyped = exports.TLPCodeFragmentReclassificationUpdatesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentReclassificationUpdatesFromJSON(json) {
        return TLPCodeFragmentReclassificationUpdatesFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentReclassificationUpdatesFromJSON = TLPCodeFragmentReclassificationUpdatesFromJSON;
      function TLPCodeFragmentReclassificationUpdatesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "previous": (0, _1.ClassificationFromJSON)(json["previous"]),
          "current": (0, _1.ClassificationFromJSON)(json["current"])
        };
      }
      exports.TLPCodeFragmentReclassificationUpdatesFromJSONTyped = TLPCodeFragmentReclassificationUpdatesFromJSONTyped;
      function TLPCodeFragmentReclassificationUpdatesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "previous": (0, _1.ClassificationToJSON)(value.previous),
          "current": (0, _1.ClassificationToJSON)(value.current)
        };
      }
      exports.TLPCodeFragmentReclassificationUpdatesToJSON = TLPCodeFragmentReclassificationUpdatesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentStatistics.js
  var require_TLPCodeFragmentStatistics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentStatistics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentStatisticsToJSON = exports.TLPCodeFragmentStatisticsFromJSONTyped = exports.TLPCodeFragmentStatisticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentStatisticsFromJSON(json) {
        return TLPCodeFragmentStatisticsFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentStatisticsFromJSON = TLPCodeFragmentStatisticsFromJSON;
      function TLPCodeFragmentStatisticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "descriptive": !(0, runtime_1.exists)(json, "descriptive") ? void 0 : (0, _1.TLPCodeFragmentDescriptiveStatisticsFromJSON)(json["descriptive"])
        };
      }
      exports.TLPCodeFragmentStatisticsFromJSONTyped = TLPCodeFragmentStatisticsFromJSONTyped;
      function TLPCodeFragmentStatisticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "descriptive": (0, _1.TLPCodeFragmentDescriptiveStatisticsToJSON)(value.descriptive)
        };
      }
      exports.TLPCodeFragmentStatisticsToJSON = TLPCodeFragmentStatisticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentSuggestedReuse.js
  var require_TLPCodeFragmentSuggestedReuse = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentSuggestedReuse.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentSuggestedReuseToJSON = exports.TLPCodeFragmentSuggestedReuseFromJSONTyped = exports.TLPCodeFragmentSuggestedReuseFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentSuggestedReuseFromJSON(json) {
        return TLPCodeFragmentSuggestedReuseFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentSuggestedReuseFromJSON = TLPCodeFragmentSuggestedReuseFromJSON;
      function TLPCodeFragmentSuggestedReuseFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"]
        };
      }
      exports.TLPCodeFragmentSuggestedReuseFromJSONTyped = TLPCodeFragmentSuggestedReuseFromJSONTyped;
      function TLPCodeFragmentSuggestedReuseToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.TLPCodeFragmentSuggestedReuseToJSON = TLPCodeFragmentSuggestedReuseToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentSuggestedSave.js
  var require_TLPCodeFragmentSuggestedSave = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentSuggestedSave.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentSuggestedSaveToJSON = exports.TLPCodeFragmentSuggestedSaveFromJSONTyped = exports.TLPCodeFragmentSuggestedSaveFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentSuggestedSaveFromJSON(json) {
        return TLPCodeFragmentSuggestedSaveFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentSuggestedSaveFromJSON = TLPCodeFragmentSuggestedSaveFromJSON;
      function TLPCodeFragmentSuggestedSaveFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "asset": json["asset"],
          "user": json["user"],
          "model": json["model"],
          "created": json["created"],
          "os": json["os"],
          "context": !(0, runtime_1.exists)(json, "context") ? void 0 : json["context"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : json["score"],
          "candidates": !(0, runtime_1.exists)(json, "candidates") ? void 0 : json["candidates"]
        };
      }
      exports.TLPCodeFragmentSuggestedSaveFromJSONTyped = TLPCodeFragmentSuggestedSaveFromJSONTyped;
      function TLPCodeFragmentSuggestedSaveToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset": value.asset,
          "user": value.user,
          "model": value.model,
          "created": value.created,
          "os": value.os,
          "context": value.context,
          "score": value.score,
          "candidates": value.candidates
        };
      }
      exports.TLPCodeFragmentSuggestedSaveToJSON = TLPCodeFragmentSuggestedSaveToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentTagify.js
  var require_TLPCodeFragmentTagify = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeFragmentTagify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeFragmentTagifyToJSON = exports.TLPCodeFragmentTagifyFromJSONTyped = exports.TLPCodeFragmentTagifyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeFragmentTagifyFromJSON(json) {
        return TLPCodeFragmentTagifyFromJSONTyped(json, false);
      }
      exports.TLPCodeFragmentTagifyFromJSON = TLPCodeFragmentTagifyFromJSON;
      function TLPCodeFragmentTagifyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "code": !(0, runtime_1.exists)(json, "code") ? void 0 : (0, _1.TLPCodeSnippetTagifyCodeFromJSON)(json["code"])
        };
      }
      exports.TLPCodeFragmentTagifyFromJSONTyped = TLPCodeFragmentTagifyFromJSONTyped;
      function TLPCodeFragmentTagifyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "code": (0, _1.TLPCodeSnippetTagifyCodeToJSON)(value.code)
        };
      }
      exports.TLPCodeFragmentTagifyToJSON = TLPCodeFragmentTagifyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeProcessing.js
  var require_TLPCodeProcessing = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeProcessing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeProcessingToJSON = exports.TLPCodeProcessingFromJSONTyped = exports.TLPCodeProcessingFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeProcessingFromJSON(json) {
        return TLPCodeProcessingFromJSONTyped(json, false);
      }
      exports.TLPCodeProcessingFromJSON = TLPCodeProcessingFromJSON;
      function TLPCodeProcessingFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "fragment": !(0, runtime_1.exists)(json, "fragment") ? void 0 : (0, _1.TLPCodeSnippetAnalyticsFromJSON)(json["fragment"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.TLPCodeFileAnalyticsFromJSON)(json["file"]),
          "directory": !(0, runtime_1.exists)(json, "directory") ? void 0 : (0, _1.TLPCodeDirectoryAnalyticsFromJSON)(json["directory"]),
          "repository": !(0, runtime_1.exists)(json, "repository") ? void 0 : (0, _1.TLPCodeRepositoryAnalyticsFromJSON)(json["repository"])
        };
      }
      exports.TLPCodeProcessingFromJSONTyped = TLPCodeProcessingFromJSONTyped;
      function TLPCodeProcessingToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "fragment": (0, _1.TLPCodeSnippetAnalyticsToJSON)(value.fragment),
          "file": (0, _1.TLPCodeFileAnalyticsToJSON)(value.file),
          "directory": (0, _1.TLPCodeDirectoryAnalyticsToJSON)(value.directory),
          "repository": (0, _1.TLPCodeRepositoryAnalyticsToJSON)(value.repository)
        };
      }
      exports.TLPCodeProcessingToJSON = TLPCodeProcessingToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeRepositoryAnalytics.js
  var require_TLPCodeRepositoryAnalytics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeRepositoryAnalytics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeRepositoryAnalyticsToJSON = exports.TLPCodeRepositoryAnalyticsFromJSONTyped = exports.TLPCodeRepositoryAnalyticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeRepositoryAnalyticsFromJSON(json) {
        return TLPCodeRepositoryAnalyticsFromJSONTyped(json, false);
      }
      exports.TLPCodeRepositoryAnalyticsFromJSON = TLPCodeRepositoryAnalyticsFromJSON;
      function TLPCodeRepositoryAnalyticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": !(0, runtime_1.exists)(json, "id") ? void 0 : json["id"]
        };
      }
      exports.TLPCodeRepositoryAnalyticsFromJSONTyped = TLPCodeRepositoryAnalyticsFromJSONTyped;
      function TLPCodeRepositoryAnalyticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id
        };
      }
      exports.TLPCodeRepositoryAnalyticsToJSON = TLPCodeRepositoryAnalyticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetAnalytics.js
  var require_TLPCodeSnippetAnalytics = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetAnalytics.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeSnippetAnalyticsToJSON = exports.TLPCodeSnippetAnalyticsFromJSONTyped = exports.TLPCodeSnippetAnalyticsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeSnippetAnalyticsFromJSON(json) {
        return TLPCodeSnippetAnalyticsFromJSONTyped(json, false);
      }
      exports.TLPCodeSnippetAnalyticsFromJSON = TLPCodeSnippetAnalyticsFromJSON;
      function TLPCodeSnippetAnalyticsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "statistics": !(0, runtime_1.exists)(json, "statistics") ? void 0 : (0, _1.TLPCodeFragmentStatisticsFromJSON)(json["statistics"]),
          "classification": !(0, runtime_1.exists)(json, "classification") ? void 0 : (0, _1.TLPCodeFragmentClassificationFromJSON)(json["classification"]),
          "reclassification": !(0, runtime_1.exists)(json, "reclassification") ? void 0 : (0, _1.TLPCodeFragmentReclassificationFromJSON)(json["reclassification"]),
          "suggested": !(0, runtime_1.exists)(json, "suggested") ? void 0 : (0, _1.TLPCodeSnippetSuggestedInteractionsFromJSON)(json["suggested"]),
          "tagify": !(0, runtime_1.exists)(json, "tagify") ? void 0 : (0, _1.TLPCodeFragmentTagifyFromJSON)(json["tagify"]),
          "description": !(0, runtime_1.exists)(json, "description") ? void 0 : (0, _1.TLPCodeFragmentDescriptionFromJSON)(json["description"])
        };
      }
      exports.TLPCodeSnippetAnalyticsFromJSONTyped = TLPCodeSnippetAnalyticsFromJSONTyped;
      function TLPCodeSnippetAnalyticsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "statistics": (0, _1.TLPCodeFragmentStatisticsToJSON)(value.statistics),
          "classification": (0, _1.TLPCodeFragmentClassificationToJSON)(value.classification),
          "reclassification": (0, _1.TLPCodeFragmentReclassificationToJSON)(value.reclassification),
          "suggested": (0, _1.TLPCodeSnippetSuggestedInteractionsToJSON)(value.suggested),
          "tagify": (0, _1.TLPCodeFragmentTagifyToJSON)(value.tagify),
          "description": (0, _1.TLPCodeFragmentDescriptionToJSON)(value.description)
        };
      }
      exports.TLPCodeSnippetAnalyticsToJSON = TLPCodeSnippetAnalyticsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetSuggestedInteractions.js
  var require_TLPCodeSnippetSuggestedInteractions = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetSuggestedInteractions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeSnippetSuggestedInteractionsToJSON = exports.TLPCodeSnippetSuggestedInteractionsFromJSONTyped = exports.TLPCodeSnippetSuggestedInteractionsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeSnippetSuggestedInteractionsFromJSON(json) {
        return TLPCodeSnippetSuggestedInteractionsFromJSONTyped(json, false);
      }
      exports.TLPCodeSnippetSuggestedInteractionsFromJSON = TLPCodeSnippetSuggestedInteractionsFromJSON;
      function TLPCodeSnippetSuggestedInteractionsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "save": !(0, runtime_1.exists)(json, "save") ? void 0 : (0, _1.TLPCodeFragmentSuggestedSaveFromJSON)(json["save"]),
          "reuse": !(0, runtime_1.exists)(json, "reuse") ? void 0 : (0, _1.TLPCodeFragmentSuggestedReuseFromJSON)(json["reuse"])
        };
      }
      exports.TLPCodeSnippetSuggestedInteractionsFromJSONTyped = TLPCodeSnippetSuggestedInteractionsFromJSONTyped;
      function TLPCodeSnippetSuggestedInteractionsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "save": (0, _1.TLPCodeFragmentSuggestedSaveToJSON)(value.save),
          "reuse": (0, _1.TLPCodeFragmentSuggestedReuseToJSON)(value.reuse)
        };
      }
      exports.TLPCodeSnippetSuggestedInteractionsToJSON = TLPCodeSnippetSuggestedInteractionsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetTagifyCode.js
  var require_TLPCodeSnippetTagifyCode = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPCodeSnippetTagifyCode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPCodeSnippetTagifyCodeToJSON = exports.TLPCodeSnippetTagifyCodeFromJSONTyped = exports.TLPCodeSnippetTagifyCodeFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPCodeSnippetTagifyCodeFromJSON(json) {
        return TLPCodeSnippetTagifyCodeFromJSONTyped(json, false);
      }
      exports.TLPCodeSnippetTagifyCodeFromJSON = TLPCodeSnippetTagifyCodeFromJSON;
      function TLPCodeSnippetTagifyCodeFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "distribution": json["distribution"],
          "inferredDistribution": json["inferred_distribution"],
          "tags": json["tags"],
          "inferredTags": json["inferred_tags"],
          "model": json["model"],
          "labelVersion": json["label_version"],
          "threshold": json["threshold"],
          "inferredThreshold": json["inferred_threshold"],
          "context": json["context"],
          "asset": json["asset"]
        };
      }
      exports.TLPCodeSnippetTagifyCodeFromJSONTyped = TLPCodeSnippetTagifyCodeFromJSONTyped;
      function TLPCodeSnippetTagifyCodeToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "distribution": value.distribution,
          "inferred_distribution": value.inferredDistribution,
          "tags": value.tags,
          "inferred_tags": value.inferredTags,
          "model": value.model,
          "label_version": value.labelVersion,
          "threshold": value.threshold,
          "inferred_threshold": value.inferredThreshold,
          "context": value.context,
          "asset": value.asset
        };
      }
      exports.TLPCodeSnippetTagifyCodeToJSON = TLPCodeSnippetTagifyCodeToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilter.js
  var require_TLPDirectedDiscoveryFilter = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPDirectedDiscoveryFilterToJSON = exports.TLPDirectedDiscoveryFilterFromJSONTyped = exports.TLPDirectedDiscoveryFilterFromJSON = void 0;
      var _1 = require_models();
      function TLPDirectedDiscoveryFilterFromJSON(json) {
        return TLPDirectedDiscoveryFilterFromJSONTyped(json, false);
      }
      exports.TLPDirectedDiscoveryFilterFromJSON = TLPDirectedDiscoveryFilterFromJSON;
      function TLPDirectedDiscoveryFilterFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "name": (0, _1.TLPDirectedDiscoveryFilterEnumFromJSON)(json["name"])
        };
      }
      exports.TLPDirectedDiscoveryFilterFromJSONTyped = TLPDirectedDiscoveryFilterFromJSONTyped;
      function TLPDirectedDiscoveryFilterToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "name": (0, _1.TLPDirectedDiscoveryFilterEnumToJSON)(value.name)
        };
      }
      exports.TLPDirectedDiscoveryFilterToJSON = TLPDirectedDiscoveryFilterToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilterEnum.js
  var require_TLPDirectedDiscoveryFilterEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilterEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPDirectedDiscoveryFilterEnumToJSON = exports.TLPDirectedDiscoveryFilterEnumFromJSONTyped = exports.TLPDirectedDiscoveryFilterEnumFromJSON = exports.TLPDirectedDiscoveryFilterEnum = void 0;
      var TLPDirectedDiscoveryFilterEnum;
      (function(TLPDirectedDiscoveryFilterEnum2) {
        TLPDirectedDiscoveryFilterEnum2["Function"] = "FUNCTION";
        TLPDirectedDiscoveryFilterEnum2["Method"] = "METHOD";
        TLPDirectedDiscoveryFilterEnum2["Class"] = "CLASS";
        TLPDirectedDiscoveryFilterEnum2["Struct"] = "STRUCT";
        TLPDirectedDiscoveryFilterEnum2["Abstract"] = "ABSTRACT";
        TLPDirectedDiscoveryFilterEnum2["Comment"] = "COMMENT";
        TLPDirectedDiscoveryFilterEnum2["Import"] = "IMPORT";
        TLPDirectedDiscoveryFilterEnum2["If"] = "IF";
        TLPDirectedDiscoveryFilterEnum2["Loop"] = "LOOP";
        TLPDirectedDiscoveryFilterEnum2["Return"] = "RETURN";
      })(TLPDirectedDiscoveryFilterEnum || (exports.TLPDirectedDiscoveryFilterEnum = TLPDirectedDiscoveryFilterEnum = {}));
      function TLPDirectedDiscoveryFilterEnumFromJSON(json) {
        return TLPDirectedDiscoveryFilterEnumFromJSONTyped(json, false);
      }
      exports.TLPDirectedDiscoveryFilterEnumFromJSON = TLPDirectedDiscoveryFilterEnumFromJSON;
      function TLPDirectedDiscoveryFilterEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.TLPDirectedDiscoveryFilterEnumFromJSONTyped = TLPDirectedDiscoveryFilterEnumFromJSONTyped;
      function TLPDirectedDiscoveryFilterEnumToJSON(value) {
        return value;
      }
      exports.TLPDirectedDiscoveryFilterEnumToJSON = TLPDirectedDiscoveryFilterEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilters.js
  var require_TLPDirectedDiscoveryFilters = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPDirectedDiscoveryFilters.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPDirectedDiscoveryFiltersToJSON = exports.TLPDirectedDiscoveryFiltersFromJSONTyped = exports.TLPDirectedDiscoveryFiltersFromJSON = void 0;
      var _1 = require_models();
      function TLPDirectedDiscoveryFiltersFromJSON(json) {
        return TLPDirectedDiscoveryFiltersFromJSONTyped(json, false);
      }
      exports.TLPDirectedDiscoveryFiltersFromJSON = TLPDirectedDiscoveryFiltersFromJSON;
      function TLPDirectedDiscoveryFiltersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "iterable": json["iterable"].map(_1.TLPDirectedDiscoveryFilterFromJSON)
        };
      }
      exports.TLPDirectedDiscoveryFiltersFromJSONTyped = TLPDirectedDiscoveryFiltersFromJSONTyped;
      function TLPDirectedDiscoveryFiltersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "iterable": value.iterable.map(_1.TLPDirectedDiscoveryFilterToJSON)
        };
      }
      exports.TLPDirectedDiscoveryFiltersToJSON = TLPDirectedDiscoveryFiltersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TLPMachineLearningProcessingEvent.js
  var require_TLPMachineLearningProcessingEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TLPMachineLearningProcessingEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TLPMachineLearningProcessingEventToJSON = exports.TLPMachineLearningProcessingEventFromJSONTyped = exports.TLPMachineLearningProcessingEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TLPMachineLearningProcessingEventFromJSON(json) {
        return TLPMachineLearningProcessingEventFromJSONTyped(json, false);
      }
      exports.TLPMachineLearningProcessingEventFromJSON = TLPMachineLearningProcessingEventFromJSON;
      function TLPMachineLearningProcessingEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "code": !(0, runtime_1.exists)(json, "code") ? void 0 : (0, _1.TLPCodeProcessingFromJSON)(json["code"])
        };
      }
      exports.TLPMachineLearningProcessingEventFromJSONTyped = TLPMachineLearningProcessingEventFromJSONTyped;
      function TLPMachineLearningProcessingEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "code": (0, _1.TLPCodeProcessingToJSON)(value.code)
        };
      }
      exports.TLPMachineLearningProcessingEventToJSON = TLPMachineLearningProcessingEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Tag.js
  var require_Tag = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Tag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TagToJSON = exports.TagFromJSONTyped = exports.TagFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TagFromJSON(json) {
        return TagFromJSONTyped(json, false);
      }
      exports.TagFromJSON = TagFromJSON;
      function TagFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "text": json["text"],
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "category": (0, _1.TagCategoryEnumFromJSON)(json["category"]),
          "relationship": !(0, runtime_1.exists)(json, "relationship") ? void 0 : (0, _1.RelationshipFromJSON)(json["relationship"]),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.FlattenedPersonsFromJSON)(json["persons"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.TagFromJSONTyped = TagFromJSONTyped;
      function TagToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "text": value.text,
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "category": (0, _1.TagCategoryEnumToJSON)(value.category),
          "relationship": (0, _1.RelationshipToJSON)(value.relationship),
          "interactions": value.interactions,
          "persons": (0, _1.FlattenedPersonsToJSON)(value.persons),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.TagToJSON = TagToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TagCategoryEnum.js
  var require_TagCategoryEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TagCategoryEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TagCategoryEnumToJSON = exports.TagCategoryEnumFromJSONTyped = exports.TagCategoryEnumFromJSON = exports.TagCategoryEnum = void 0;
      var TagCategoryEnum;
      (function(TagCategoryEnum2) {
        TagCategoryEnum2["Handle"] = "HANDLE";
        TagCategoryEnum2["Email"] = "EMAIL";
        TagCategoryEnum2["Unknown"] = "UNKNOWN";
      })(TagCategoryEnum || (exports.TagCategoryEnum = TagCategoryEnum = {}));
      function TagCategoryEnumFromJSON(json) {
        return TagCategoryEnumFromJSONTyped(json, false);
      }
      exports.TagCategoryEnumFromJSON = TagCategoryEnumFromJSON;
      function TagCategoryEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.TagCategoryEnumFromJSONTyped = TagCategoryEnumFromJSONTyped;
      function TagCategoryEnumToJSON(value) {
        return value;
      }
      exports.TagCategoryEnumToJSON = TagCategoryEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Tags.js
  var require_Tags = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Tags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TagsToJSON = exports.TagsFromJSONTyped = exports.TagsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TagsFromJSON(json) {
        return TagsFromJSONTyped(json, false);
      }
      exports.TagsFromJSON = TagsFromJSON;
      function TagsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.TagFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.TagsFromJSONTyped = TagsFromJSONTyped;
      function TagsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.TagToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.TagsToJSON = TagsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TextLocation.js
  var require_TextLocation = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TextLocation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TextLocationToJSON = exports.TextLocationFromJSONTyped = exports.TextLocationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TextLocationFromJSON(json) {
        return TextLocationFromJSONTyped(json, false);
      }
      exports.TextLocationFromJSON = TextLocationFromJSON;
      function TextLocationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "text": json["text"],
          "start": json["start"],
          "end": json["end"]
        };
      }
      exports.TextLocationFromJSONTyped = TextLocationFromJSONTyped;
      function TextLocationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "text": value.text,
          "start": value.start,
          "end": value.end
        };
      }
      exports.TextLocationToJSON = TextLocationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TextMatch.js
  var require_TextMatch = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TextMatch.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TextMatchToJSON = exports.TextMatchFromJSONTyped = exports.TextMatchFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TextMatchFromJSON(json) {
        return TextMatchFromJSONTyped(json, false);
      }
      exports.TextMatchFromJSON = TextMatchFromJSON;
      function TextMatchFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "group": (0, _1.TextLocationFromJSON)(json["group"]),
          "subgroup": !(0, runtime_1.exists)(json, "subgroup") ? void 0 : (0, _1.TextLocationFromJSON)(json["subgroup"])
        };
      }
      exports.TextMatchFromJSONTyped = TextMatchFromJSONTyped;
      function TextMatchToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "group": (0, _1.TextLocationToJSON)(value.group),
          "subgroup": (0, _1.TextLocationToJSON)(value.subgroup)
        };
      }
      exports.TextMatchToJSON = TextMatchToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Theme.js
  var require_Theme = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Theme.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ThemeToJSON = exports.ThemeFromJSONTyped = exports.ThemeFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function ThemeFromJSON(json) {
        return ThemeFromJSONTyped(json, false);
      }
      exports.ThemeFromJSON = ThemeFromJSON;
      function ThemeFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "dark": json["dark"]
        };
      }
      exports.ThemeFromJSONTyped = ThemeFromJSONTyped;
      function ThemeToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "dark": value.dark
        };
      }
      exports.ThemeToJSON = ThemeToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TokenizedPKCE.js
  var require_TokenizedPKCE = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TokenizedPKCE.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TokenizedPKCEToJSON = exports.TokenizedPKCEFromJSONTyped = exports.TokenizedPKCEFromJSON = exports.TokenizedPKCEGrantTypeEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TokenizedPKCEGrantTypeEnum;
      (function(TokenizedPKCEGrantTypeEnum2) {
        TokenizedPKCEGrantTypeEnum2["RefreshToken"] = "refresh_token";
        TokenizedPKCEGrantTypeEnum2["AuthorizationCode"] = "authorization_code";
      })(TokenizedPKCEGrantTypeEnum || (exports.TokenizedPKCEGrantTypeEnum = TokenizedPKCEGrantTypeEnum = {}));
      function TokenizedPKCEFromJSON(json) {
        return TokenizedPKCEFromJSONTyped(json, false);
      }
      exports.TokenizedPKCEFromJSON = TokenizedPKCEFromJSON;
      function TokenizedPKCEFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "grantType": json["grant_type"],
          "clientId": json["client_id"],
          "code": json["code"],
          "redirectUri": json["redirect_uri"],
          "codeVerifier": json["code_verifier"],
          "audience": !(0, runtime_1.exists)(json, "audience") ? void 0 : json["audience"]
        };
      }
      exports.TokenizedPKCEFromJSONTyped = TokenizedPKCEFromJSONTyped;
      function TokenizedPKCEToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "grant_type": value.grantType,
          "client_id": value.clientId,
          "code": value.code,
          "redirect_uri": value.redirectUri,
          "code_verifier": value.codeVerifier,
          "audience": value.audience
        };
      }
      exports.TokenizedPKCEToJSON = TokenizedPKCEToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplication.js
  var require_TrackedApplication = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplication.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedApplicationToJSON = exports.TrackedApplicationFromJSONTyped = exports.TrackedApplicationFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedApplicationFromJSON(json) {
        return TrackedApplicationFromJSONTyped(json, false);
      }
      exports.TrackedApplicationFromJSON = TrackedApplicationFromJSON;
      function TrackedApplicationFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "name": (0, _1.ApplicationNameEnumFromJSON)(json["name"]),
          "version": json["version"],
          "platform": (0, _1.PlatformEnumFromJSON)(json["platform"]),
          "automaticUnload": !(0, runtime_1.exists)(json, "automaticUnload") ? void 0 : json["automaticUnload"]
        };
      }
      exports.TrackedApplicationFromJSONTyped = TrackedApplicationFromJSONTyped;
      function TrackedApplicationToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "name": (0, _1.ApplicationNameEnumToJSON)(value.name),
          "version": value.version,
          "platform": (0, _1.PlatformEnumToJSON)(value.platform),
          "automaticUnload": value.automaticUnload
        };
      }
      exports.TrackedApplicationToJSON = TrackedApplicationToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplicationInstall.js
  var require_TrackedApplicationInstall = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplicationInstall.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedApplicationInstallToJSON = exports.TrackedApplicationInstallFromJSONTyped = exports.TrackedApplicationInstallFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedApplicationInstallFromJSON(json) {
        return TrackedApplicationInstallFromJSONTyped(json, false);
      }
      exports.TrackedApplicationInstallFromJSON = TrackedApplicationInstallFromJSON;
      function TrackedApplicationInstallFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "application": (0, _1.TrackedApplicationFromJSON)(json["application"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.TrackedUserProfileFromJSON)(json["user"])
        };
      }
      exports.TrackedApplicationInstallFromJSONTyped = TrackedApplicationInstallFromJSONTyped;
      function TrackedApplicationInstallToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "application": (0, _1.TrackedApplicationToJSON)(value.application),
          "user": (0, _1.TrackedUserProfileToJSON)(value.user)
        };
      }
      exports.TrackedApplicationInstallToJSON = TrackedApplicationInstallToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplicationUpdate.js
  var require_TrackedApplicationUpdate = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedApplicationUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedApplicationUpdateToJSON = exports.TrackedApplicationUpdateFromJSONTyped = exports.TrackedApplicationUpdateFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedApplicationUpdateFromJSON(json) {
        return TrackedApplicationUpdateFromJSONTyped(json, false);
      }
      exports.TrackedApplicationUpdateFromJSON = TrackedApplicationUpdateFromJSON;
      function TrackedApplicationUpdateFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "current": (0, _1.TrackedApplicationFromJSON)(json["current"]),
          "previous": !(0, runtime_1.exists)(json, "previous") ? void 0 : (0, _1.TrackedApplicationFromJSON)(json["previous"]),
          "user": !(0, runtime_1.exists)(json, "user") ? void 0 : (0, _1.TrackedUserProfileFromJSON)(json["user"])
        };
      }
      exports.TrackedApplicationUpdateFromJSONTyped = TrackedApplicationUpdateFromJSONTyped;
      function TrackedApplicationUpdateToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "current": (0, _1.TrackedApplicationToJSON)(value.current),
          "previous": (0, _1.TrackedApplicationToJSON)(value.previous),
          "user": (0, _1.TrackedUserProfileToJSON)(value.user)
        };
      }
      exports.TrackedApplicationUpdateToJSON = TrackedApplicationUpdateToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadata.js
  var require_TrackedAssetEventCreationMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventCreationMetadataToJSON = exports.TrackedAssetEventCreationMetadataFromJSONTyped = exports.TrackedAssetEventCreationMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetEventCreationMetadataFromJSON(json) {
        return TrackedAssetEventCreationMetadataFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventCreationMetadataFromJSON = TrackedAssetEventCreationMetadataFromJSON;
      function TrackedAssetEventCreationMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "clipboard": !(0, runtime_1.exists)(json, "clipboard") ? void 0 : (0, _1.TrackedAssetEventCreationMetadataClipboardFromJSON)(json["clipboard"]),
          "file": !(0, runtime_1.exists)(json, "file") ? void 0 : (0, _1.TrackedAssetEventCreationMetadataFileFromJSON)(json["file"])
        };
      }
      exports.TrackedAssetEventCreationMetadataFromJSONTyped = TrackedAssetEventCreationMetadataFromJSONTyped;
      function TrackedAssetEventCreationMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "clipboard": (0, _1.TrackedAssetEventCreationMetadataClipboardToJSON)(value.clipboard),
          "file": (0, _1.TrackedAssetEventCreationMetadataFileToJSON)(value.file)
        };
      }
      exports.TrackedAssetEventCreationMetadataToJSON = TrackedAssetEventCreationMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadataClipboard.js
  var require_TrackedAssetEventCreationMetadataClipboard = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadataClipboard.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventCreationMetadataClipboardToJSON = exports.TrackedAssetEventCreationMetadataClipboardFromJSONTyped = exports.TrackedAssetEventCreationMetadataClipboardFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetEventCreationMetadataClipboardFromJSON(json) {
        return TrackedAssetEventCreationMetadataClipboardFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventCreationMetadataClipboardFromJSON = TrackedAssetEventCreationMetadataClipboardFromJSON;
      function TrackedAssetEventCreationMetadataClipboardFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "keyboard": !(0, runtime_1.exists)(json, "keyboard") ? void 0 : json["keyboard"],
          "interaction": !(0, runtime_1.exists)(json, "interaction") ? void 0 : json["interaction"]
        };
      }
      exports.TrackedAssetEventCreationMetadataClipboardFromJSONTyped = TrackedAssetEventCreationMetadataClipboardFromJSONTyped;
      function TrackedAssetEventCreationMetadataClipboardToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "keyboard": value.keyboard,
          "interaction": value.interaction
        };
      }
      exports.TrackedAssetEventCreationMetadataClipboardToJSON = TrackedAssetEventCreationMetadataClipboardToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadataFile.js
  var require_TrackedAssetEventCreationMetadataFile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventCreationMetadataFile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventCreationMetadataFileToJSON = exports.TrackedAssetEventCreationMetadataFileFromJSONTyped = exports.TrackedAssetEventCreationMetadataFileFromJSON = void 0;
      var runtime_1 = require_runtime();
      function TrackedAssetEventCreationMetadataFileFromJSON(json) {
        return TrackedAssetEventCreationMetadataFileFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventCreationMetadataFileFromJSON = TrackedAssetEventCreationMetadataFileFromJSON;
      function TrackedAssetEventCreationMetadataFileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "keyboard": !(0, runtime_1.exists)(json, "keyboard") ? void 0 : json["keyboard"],
          "dragAndDrop": !(0, runtime_1.exists)(json, "drag_and_drop") ? void 0 : json["drag_and_drop"],
          "interaction": !(0, runtime_1.exists)(json, "interaction") ? void 0 : json["interaction"]
        };
      }
      exports.TrackedAssetEventCreationMetadataFileFromJSONTyped = TrackedAssetEventCreationMetadataFileFromJSONTyped;
      function TrackedAssetEventCreationMetadataFileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "keyboard": value.keyboard,
          "drag_and_drop": value.dragAndDrop,
          "interaction": value.interaction
        };
      }
      exports.TrackedAssetEventCreationMetadataFileToJSON = TrackedAssetEventCreationMetadataFileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventFormatReclassificationMetadata.js
  var require_TrackedAssetEventFormatReclassificationMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventFormatReclassificationMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventFormatReclassificationMetadataToJSON = exports.TrackedAssetEventFormatReclassificationMetadataFromJSONTyped = exports.TrackedAssetEventFormatReclassificationMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetEventFormatReclassificationMetadataFromJSON(json) {
        return TrackedAssetEventFormatReclassificationMetadataFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventFormatReclassificationMetadataFromJSON = TrackedAssetEventFormatReclassificationMetadataFromJSON;
      function TrackedAssetEventFormatReclassificationMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "previous": !(0, runtime_1.exists)(json, "previous") ? void 0 : (0, _1.ClassificationFromJSON)(json["previous"]),
          "current": !(0, runtime_1.exists)(json, "current") ? void 0 : (0, _1.ClassificationFromJSON)(json["current"])
        };
      }
      exports.TrackedAssetEventFormatReclassificationMetadataFromJSONTyped = TrackedAssetEventFormatReclassificationMetadataFromJSONTyped;
      function TrackedAssetEventFormatReclassificationMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "previous": (0, _1.ClassificationToJSON)(value.previous),
          "current": (0, _1.ClassificationToJSON)(value.current)
        };
      }
      exports.TrackedAssetEventFormatReclassificationMetadataToJSON = TrackedAssetEventFormatReclassificationMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventIdentifierDescriptionPairs.js
  var require_TrackedAssetEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventIdentifierDescriptionPairsToJSON = exports.TrackedAssetEventIdentifierDescriptionPairsFromJSONTyped = exports.TrackedAssetEventIdentifierDescriptionPairsFromJSON = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum = exports.TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum2["AnAssetWasCreated"] = "an_asset_was_created";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetCreatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum2["AnAssetWasViewed"] = "an_asset_was_viewed";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetViewedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum2["AnAssetPreviewFormatWasCopied"] = "an_asset_preview_format_was_copied";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatCopiedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum2["AnAssetFormatWasDownloaded"] = "an_asset_format_was_downloaded";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatDownloadedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum2["AnAssetWasDeleted"] = "an_asset_was_deleted";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum2["AnAssetWasRedescribedByTheUser"] = "an_asset_was_redescribed_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetDescriptionUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum2["AnAssetWasRenamedByTheUser"] = "an_asset_was_renamed_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetNameUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum2["AGenericClassificationWasChangedOnAFormatWithinAnAsset"] = "a_generic_classification_was_changed_on_a_format_within_an_asset";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatGenericClassificationUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum2["ASpecificClassificationWasChangedOnAFormatWithinAnAsset"] = "a_specific_classification_was_changed_on_a_format_within_an_asset";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatSpecificClassificationUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum2["AnAssetFailedToBeCreated"] = "an_asset_failed_to_be_created";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetCreationFailedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum2["ATagWasAddedByTheUser"] = "a_tag_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetTagAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum2["ALinkWasAddedByTheUser"] = "a_link_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetLinkAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum2["AnAssetLinkWasGenerated"] = "an_asset_link_was_generated";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetLinkGeneratedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum2["ALinkWasDeletedByTheUser"] = "a_link_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetLinkDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum2["ATagWasDeletedByTheUser"] = "a_tag_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetTagDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum2["AnAssetWasUpdated"] = "an_asset_was_updated";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum2["ASpecificFormatValueWasEditedOnAnAsset"] = "a_specific_format_value_was_edited_on_an_asset";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatValueEditedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum2["ASpecificFormatWasUpdatedOnAnAsset"] = "a_specific_format_was_updated_on_an_asset";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetFormatUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum2["AnAssetLinkWasRevoked"] = "an_asset_link_was_revoked";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetLinkRevokedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum2["APersonWasAddedByTheUser"] = "a_person_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetPersonAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum2["APersonWasDeletedByTheUser"] = "a_person_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetPersonDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum2["ASensitiveWasAddedByTheUser"] = "a_sensitive_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum2["ASensitiveWasDeletedByTheUser"] = "a_sensitive_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetSensitiveDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum2["ASuggestedAssetWasReferencedByTheUser"] = "a_suggested_asset_was_referenced_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum = TrackedAssetEventIdentifierDescriptionPairsSuggestedAssetReferencedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum2["ASearchedAssetWasReferencedByTheUser"] = "a_searched_asset_was_referenced_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum = TrackedAssetEventIdentifierDescriptionPairsSearchedAssetReferencedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum2["AnAssetWasReferencedByTheUser"] = "an_asset_was_referenced_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetReferencedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum2["AnActivityAssetWasReferencedByTheUser"] = "an_activity_asset_was_referenced_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum = TrackedAssetEventIdentifierDescriptionPairsActivityAssetReferencedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum2["AnAnnotationWasAddedByTheUser"] = "an_annotation_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum2["AnAnnotationWasDeletedByTheUser"] = "an_annotation_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum2["AnAnnotationWasUpdatedByTheUser"] = "an_annotation_was_updated_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnnotationUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum2["AHintWasAddedByTheUser"] = "a_hint_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetHintAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum2["AHintWasDeletedByTheUser"] = "a_hint_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetHintDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum2["AHintWasUpdatedByTheUser"] = "a_hint_was_updated_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetHintUpdatedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum2["AAnchorWasAddedByTheUser"] = "a_anchor_was_added_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnchorAddedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum2["AAnchorWasDeletedByTheUser"] = "a_anchor_was_deleted_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnchorDeletedEnum = {}));
      var TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum;
      (function(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum2) {
        TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum2["AAnchorWasUpdatedByTheUser"] = "a_anchor_was_updated_by_the_user";
      })(TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum || (exports.TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum = TrackedAssetEventIdentifierDescriptionPairsAssetAnchorUpdatedEnum = {}));
      function TrackedAssetEventIdentifierDescriptionPairsFromJSON(json) {
        return TrackedAssetEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventIdentifierDescriptionPairsFromJSON = TrackedAssetEventIdentifierDescriptionPairsFromJSON;
      function TrackedAssetEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assetCreated": !(0, runtime_1.exists)(json, "asset_created") ? void 0 : json["asset_created"],
          "assetViewed": !(0, runtime_1.exists)(json, "asset_viewed") ? void 0 : json["asset_viewed"],
          "assetFormatCopied": !(0, runtime_1.exists)(json, "asset_format_copied") ? void 0 : json["asset_format_copied"],
          "assetFormatDownloaded": !(0, runtime_1.exists)(json, "asset_format_downloaded") ? void 0 : json["asset_format_downloaded"],
          "assetDeleted": !(0, runtime_1.exists)(json, "asset_deleted") ? void 0 : json["asset_deleted"],
          "assetDescriptionUpdated": !(0, runtime_1.exists)(json, "asset_description_updated") ? void 0 : json["asset_description_updated"],
          "assetNameUpdated": !(0, runtime_1.exists)(json, "asset_name_updated") ? void 0 : json["asset_name_updated"],
          "assetFormatGenericClassificationUpdated": !(0, runtime_1.exists)(json, "asset_format_generic_classification_updated") ? void 0 : json["asset_format_generic_classification_updated"],
          "assetFormatSpecificClassificationUpdated": !(0, runtime_1.exists)(json, "asset_format_specific_classification_updated") ? void 0 : json["asset_format_specific_classification_updated"],
          "assetCreationFailed": !(0, runtime_1.exists)(json, "asset_creation_failed") ? void 0 : json["asset_creation_failed"],
          "assetTagAdded": !(0, runtime_1.exists)(json, "asset_tag_added") ? void 0 : json["asset_tag_added"],
          "assetLinkAdded": !(0, runtime_1.exists)(json, "asset_link_added") ? void 0 : json["asset_link_added"],
          "assetLinkGenerated": !(0, runtime_1.exists)(json, "asset_link_generated") ? void 0 : json["asset_link_generated"],
          "assetLinkDeleted": !(0, runtime_1.exists)(json, "asset_link_deleted") ? void 0 : json["asset_link_deleted"],
          "assetTagDeleted": !(0, runtime_1.exists)(json, "asset_tag_deleted") ? void 0 : json["asset_tag_deleted"],
          "assetUpdated": !(0, runtime_1.exists)(json, "asset_updated") ? void 0 : json["asset_updated"],
          "assetFormatValueEdited": !(0, runtime_1.exists)(json, "asset_format_value_edited") ? void 0 : json["asset_format_value_edited"],
          "assetFormatUpdated": !(0, runtime_1.exists)(json, "asset_format_updated") ? void 0 : json["asset_format_updated"],
          "assetLinkRevoked": !(0, runtime_1.exists)(json, "asset_link_revoked") ? void 0 : json["asset_link_revoked"],
          "assetPersonAdded": !(0, runtime_1.exists)(json, "asset_person_added") ? void 0 : json["asset_person_added"],
          "assetPersonDeleted": !(0, runtime_1.exists)(json, "asset_person_deleted") ? void 0 : json["asset_person_deleted"],
          "assetSensitiveAdded": !(0, runtime_1.exists)(json, "asset_sensitive_added") ? void 0 : json["asset_sensitive_added"],
          "assetSensitiveDeleted": !(0, runtime_1.exists)(json, "asset_sensitive_deleted") ? void 0 : json["asset_sensitive_deleted"],
          "suggestedAssetReferenced": !(0, runtime_1.exists)(json, "suggested_asset_referenced") ? void 0 : json["suggested_asset_referenced"],
          "searchedAssetReferenced": !(0, runtime_1.exists)(json, "searched_asset_referenced") ? void 0 : json["searched_asset_referenced"],
          "assetReferenced": !(0, runtime_1.exists)(json, "asset_referenced") ? void 0 : json["asset_referenced"],
          "activityAssetReferenced": !(0, runtime_1.exists)(json, "activity_asset_referenced") ? void 0 : json["activity_asset_referenced"],
          "assetAnnotationAdded": !(0, runtime_1.exists)(json, "asset_annotation_added") ? void 0 : json["asset_annotation_added"],
          "assetAnnotationDeleted": !(0, runtime_1.exists)(json, "asset_annotation_deleted") ? void 0 : json["asset_annotation_deleted"],
          "assetAnnotationUpdated": !(0, runtime_1.exists)(json, "asset_annotation_updated") ? void 0 : json["asset_annotation_updated"],
          "assetHintAdded": !(0, runtime_1.exists)(json, "asset_hint_added") ? void 0 : json["asset_hint_added"],
          "assetHintDeleted": !(0, runtime_1.exists)(json, "asset_hint_deleted") ? void 0 : json["asset_hint_deleted"],
          "assetHintUpdated": !(0, runtime_1.exists)(json, "asset_hint_updated") ? void 0 : json["asset_hint_updated"],
          "assetAnchorAdded": !(0, runtime_1.exists)(json, "asset_anchor_added") ? void 0 : json["asset_anchor_added"],
          "assetAnchorDeleted": !(0, runtime_1.exists)(json, "asset_anchor_deleted") ? void 0 : json["asset_anchor_deleted"],
          "assetAnchorUpdated": !(0, runtime_1.exists)(json, "asset_anchor_updated") ? void 0 : json["asset_anchor_updated"]
        };
      }
      exports.TrackedAssetEventIdentifierDescriptionPairsFromJSONTyped = TrackedAssetEventIdentifierDescriptionPairsFromJSONTyped;
      function TrackedAssetEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "asset_created": value.assetCreated,
          "asset_viewed": value.assetViewed,
          "asset_format_copied": value.assetFormatCopied,
          "asset_format_downloaded": value.assetFormatDownloaded,
          "asset_deleted": value.assetDeleted,
          "asset_description_updated": value.assetDescriptionUpdated,
          "asset_name_updated": value.assetNameUpdated,
          "asset_format_generic_classification_updated": value.assetFormatGenericClassificationUpdated,
          "asset_format_specific_classification_updated": value.assetFormatSpecificClassificationUpdated,
          "asset_creation_failed": value.assetCreationFailed,
          "asset_tag_added": value.assetTagAdded,
          "asset_link_added": value.assetLinkAdded,
          "asset_link_generated": value.assetLinkGenerated,
          "asset_link_deleted": value.assetLinkDeleted,
          "asset_tag_deleted": value.assetTagDeleted,
          "asset_updated": value.assetUpdated,
          "asset_format_value_edited": value.assetFormatValueEdited,
          "asset_format_updated": value.assetFormatUpdated,
          "asset_link_revoked": value.assetLinkRevoked,
          "asset_person_added": value.assetPersonAdded,
          "asset_person_deleted": value.assetPersonDeleted,
          "asset_sensitive_added": value.assetSensitiveAdded,
          "asset_sensitive_deleted": value.assetSensitiveDeleted,
          "suggested_asset_referenced": value.suggestedAssetReferenced,
          "searched_asset_referenced": value.searchedAssetReferenced,
          "asset_referenced": value.assetReferenced,
          "activity_asset_referenced": value.activityAssetReferenced,
          "asset_annotation_added": value.assetAnnotationAdded,
          "asset_annotation_deleted": value.assetAnnotationDeleted,
          "asset_annotation_updated": value.assetAnnotationUpdated,
          "asset_hint_added": value.assetHintAdded,
          "asset_hint_deleted": value.assetHintDeleted,
          "asset_hint_updated": value.assetHintUpdated,
          "asset_anchor_added": value.assetAnchorAdded,
          "asset_anchor_deleted": value.assetAnchorDeleted,
          "asset_anchor_updated": value.assetAnchorUpdated
        };
      }
      exports.TrackedAssetEventIdentifierDescriptionPairsToJSON = TrackedAssetEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventMetadata.js
  var require_TrackedAssetEventMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventMetadataToJSON = exports.TrackedAssetEventMetadataFromJSONTyped = exports.TrackedAssetEventMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetEventMetadataFromJSON(json) {
        return TrackedAssetEventMetadataFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventMetadataFromJSON = TrackedAssetEventMetadataFromJSON;
      function TrackedAssetEventMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "reclassification": !(0, runtime_1.exists)(json, "reclassification") ? void 0 : (0, _1.TrackedAssetEventFormatReclassificationMetadataFromJSON)(json["reclassification"]),
          "creation": !(0, runtime_1.exists)(json, "creation") ? void 0 : (0, _1.TrackedAssetEventCreationMetadataFromJSON)(json["creation"]),
          "rename": !(0, runtime_1.exists)(json, "rename") ? void 0 : (0, _1.TrackedAssetEventRenameMetadataFromJSON)(json["rename"]),
          "tag": !(0, runtime_1.exists)(json, "tag") ? void 0 : (0, _1.ReferencedTagFromJSON)(json["tag"]),
          "website": !(0, runtime_1.exists)(json, "website") ? void 0 : (0, _1.ReferencedWebsiteFromJSON)(json["website"]),
          "person": !(0, runtime_1.exists)(json, "person") ? void 0 : (0, _1.ReferencedPersonFromJSON)(json["person"]),
          "sensitive": !(0, runtime_1.exists)(json, "sensitive") ? void 0 : (0, _1.ReferencedSensitiveFromJSON)(json["sensitive"]),
          "share": !(0, runtime_1.exists)(json, "share") ? void 0 : (0, _1.ReferencedShareFromJSON)(json["share"]),
          "search": !(0, runtime_1.exists)(json, "search") ? void 0 : (0, _1.TrackedAssetsEventSearchMetadataFromJSON)(json["search"]),
          "annotation": !(0, runtime_1.exists)(json, "annotation") ? void 0 : (0, _1.ReferencedAnnotationFromJSON)(json["annotation"]),
          "hint": !(0, runtime_1.exists)(json, "hint") ? void 0 : (0, _1.ReferencedHintFromJSON)(json["hint"]),
          "anchor": !(0, runtime_1.exists)(json, "anchor") ? void 0 : (0, _1.ReferencedAnchorFromJSON)(json["anchor"])
        };
      }
      exports.TrackedAssetEventMetadataFromJSONTyped = TrackedAssetEventMetadataFromJSONTyped;
      function TrackedAssetEventMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "reclassification": (0, _1.TrackedAssetEventFormatReclassificationMetadataToJSON)(value.reclassification),
          "creation": (0, _1.TrackedAssetEventCreationMetadataToJSON)(value.creation),
          "rename": (0, _1.TrackedAssetEventRenameMetadataToJSON)(value.rename),
          "tag": (0, _1.ReferencedTagToJSON)(value.tag),
          "website": (0, _1.ReferencedWebsiteToJSON)(value.website),
          "person": (0, _1.ReferencedPersonToJSON)(value.person),
          "sensitive": (0, _1.ReferencedSensitiveToJSON)(value.sensitive),
          "share": (0, _1.ReferencedShareToJSON)(value.share),
          "search": (0, _1.TrackedAssetsEventSearchMetadataToJSON)(value.search),
          "annotation": (0, _1.ReferencedAnnotationToJSON)(value.annotation),
          "hint": (0, _1.ReferencedHintToJSON)(value.hint),
          "anchor": (0, _1.ReferencedAnchorToJSON)(value.anchor)
        };
      }
      exports.TrackedAssetEventMetadataToJSON = TrackedAssetEventMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventRenameMetadata.js
  var require_TrackedAssetEventRenameMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetEventRenameMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetEventRenameMetadataToJSON = exports.TrackedAssetEventRenameMetadataFromJSONTyped = exports.TrackedAssetEventRenameMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetEventRenameMetadataFromJSON(json) {
        return TrackedAssetEventRenameMetadataFromJSONTyped(json, false);
      }
      exports.TrackedAssetEventRenameMetadataFromJSON = TrackedAssetEventRenameMetadataFromJSON;
      function TrackedAssetEventRenameMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "previous": json["previous"],
          "current": json["current"]
        };
      }
      exports.TrackedAssetEventRenameMetadataFromJSONTyped = TrackedAssetEventRenameMetadataFromJSONTyped;
      function TrackedAssetEventRenameMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "previous": value.previous,
          "current": value.current
        };
      }
      exports.TrackedAssetEventRenameMetadataToJSON = TrackedAssetEventRenameMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventIdentifierDescriptionPairs.js
  var require_TrackedAssetsEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetsEventIdentifierDescriptionPairsToJSON = exports.TrackedAssetsEventIdentifierDescriptionPairsFromJSONTyped = exports.TrackedAssetsEventIdentifierDescriptionPairsFromJSON = exports.TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum;
      (function(TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum2) {
        TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum2["AssetsWereSearched"] = "assets_were_searched";
      })(TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum || (exports.TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum = TrackedAssetsEventIdentifierDescriptionPairsAssetsSearchedEnum = {}));
      function TrackedAssetsEventIdentifierDescriptionPairsFromJSON(json) {
        return TrackedAssetsEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.TrackedAssetsEventIdentifierDescriptionPairsFromJSON = TrackedAssetsEventIdentifierDescriptionPairsFromJSON;
      function TrackedAssetsEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "assetsSearched": !(0, runtime_1.exists)(json, "assets_searched") ? void 0 : json["assets_searched"]
        };
      }
      exports.TrackedAssetsEventIdentifierDescriptionPairsFromJSONTyped = TrackedAssetsEventIdentifierDescriptionPairsFromJSONTyped;
      function TrackedAssetsEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "assets_searched": value.assetsSearched
        };
      }
      exports.TrackedAssetsEventIdentifierDescriptionPairsToJSON = TrackedAssetsEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventSearchMetadata.js
  var require_TrackedAssetsEventSearchMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventSearchMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetsEventSearchMetadataToJSON = exports.TrackedAssetsEventSearchMetadataFromJSONTyped = exports.TrackedAssetsEventSearchMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetsEventSearchMetadataFromJSON(json) {
        return TrackedAssetsEventSearchMetadataFromJSONTyped(json, false);
      }
      exports.TrackedAssetsEventSearchMetadataFromJSON = TrackedAssetsEventSearchMetadataFromJSON;
      function TrackedAssetsEventSearchMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "query": !(0, runtime_1.exists)(json, "query") ? void 0 : json["query"],
          "results": !(0, runtime_1.exists)(json, "results") ? void 0 : (0, _1.TrackedAssetsEventSearchMetadataResultsFromJSON)(json["results"])
        };
      }
      exports.TrackedAssetsEventSearchMetadataFromJSONTyped = TrackedAssetsEventSearchMetadataFromJSONTyped;
      function TrackedAssetsEventSearchMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "query": value.query,
          "results": (0, _1.TrackedAssetsEventSearchMetadataResultsToJSON)(value.results)
        };
      }
      exports.TrackedAssetsEventSearchMetadataToJSON = TrackedAssetsEventSearchMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventSearchMetadataResults.js
  var require_TrackedAssetsEventSearchMetadataResults = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedAssetsEventSearchMetadataResults.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedAssetsEventSearchMetadataResultsToJSON = exports.TrackedAssetsEventSearchMetadataResultsFromJSONTyped = exports.TrackedAssetsEventSearchMetadataResultsFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedAssetsEventSearchMetadataResultsFromJSON(json) {
        return TrackedAssetsEventSearchMetadataResultsFromJSONTyped(json, false);
      }
      exports.TrackedAssetsEventSearchMetadataResultsFromJSON = TrackedAssetsEventSearchMetadataResultsFromJSON;
      function TrackedAssetsEventSearchMetadataResultsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "fuzzy": !(0, runtime_1.exists)(json, "fuzzy") ? void 0 : json["fuzzy"],
          "exact": !(0, runtime_1.exists)(json, "exact") ? void 0 : json["exact"],
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "space": !(0, runtime_1.exists)(json, "space") ? void 0 : (0, _1.SpaceFromJSON)(json["space"])
        };
      }
      exports.TrackedAssetsEventSearchMetadataResultsFromJSONTyped = TrackedAssetsEventSearchMetadataResultsFromJSONTyped;
      function TrackedAssetsEventSearchMetadataResultsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "fuzzy": value.fuzzy,
          "exact": value.exact,
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "space": (0, _1.SpaceToJSON)(value.space)
        };
      }
      exports.TrackedAssetsEventSearchMetadataResultsToJSON = TrackedAssetsEventSearchMetadataResultsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormat.js
  var require_TrackedFormat = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormat.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedFormatToJSON = exports.TrackedFormatFromJSONTyped = exports.TrackedFormatFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedFormatFromJSON(json) {
        return TrackedFormatFromJSONTyped(json, false);
      }
      exports.TrackedFormatFromJSON = TrackedFormatFromJSON;
      function TrackedFormatFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "classification": (0, _1.ClassificationFromJSON)(json["classification"]),
          "role": (0, _1.RoleFromJSON)(json["role"]),
          "asset": json["asset"],
          "fragment": json["fragment"],
          "file": json["file"]
        };
      }
      exports.TrackedFormatFromJSONTyped = TrackedFormatFromJSONTyped;
      function TrackedFormatToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "classification": (0, _1.ClassificationToJSON)(value.classification),
          "role": (0, _1.RoleToJSON)(value.role),
          "asset": value.asset,
          "fragment": value.fragment,
          "file": value.file
        };
      }
      exports.TrackedFormatToJSON = TrackedFormatToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEvent.js
  var require_TrackedFormatEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedFormatEventToJSON = exports.TrackedFormatEventFromJSONTyped = exports.TrackedFormatEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedFormatEventFromJSON(json) {
        return TrackedFormatEventFromJSONTyped(json, false);
      }
      exports.TrackedFormatEventFromJSON = TrackedFormatEventFromJSON;
      function TrackedFormatEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "format": (0, _1.TrackedFormatFromJSON)(json[" format"]),
          "identifierDescriptionPair": (0, _1.TrackedFormatEventIdentifierDescriptionPairsFromJSON)(json["identifier_description_pair"]),
          "metadata": !(0, runtime_1.exists)(json, "metadata") ? void 0 : (0, _1.TrackedFormatEventMetadataFromJSON)(json["metadata"])
        };
      }
      exports.TrackedFormatEventFromJSONTyped = TrackedFormatEventFromJSONTyped;
      function TrackedFormatEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          " format": (0, _1.TrackedFormatToJSON)(value.format),
          "identifier_description_pair": (0, _1.TrackedFormatEventIdentifierDescriptionPairsToJSON)(value.identifierDescriptionPair),
          "metadata": (0, _1.TrackedFormatEventMetadataToJSON)(value.metadata)
        };
      }
      exports.TrackedFormatEventToJSON = TrackedFormatEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEventIdentifierDescriptionPairs.js
  var require_TrackedFormatEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedFormatEventIdentifierDescriptionPairsToJSON = exports.TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped = exports.TrackedFormatEventIdentifierDescriptionPairsFromJSON = exports.TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum = exports.TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum2["AFormatWasCreated"] = "a_format_was_created";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatCreatedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum2["IfAFormatWasEntirelyCopied"] = "if_a_format_was_entirely_copied";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatCopiedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum2["IfAFormatWasPartiallyCopied"] = "if_a_format_was_partially_copied";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatPartiallyCopiedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum2["IfAFormatWasDownloaded"] = "if_a_format_was_downloaded";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatDownloadedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum2["IfAFormatWasDeleted"] = "if_a_format_was_deleted";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatDeletedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum2["IfAGenericClassificationWasChangedOnAFormat"] = "if_a_generic_classification_was_changed_on_a_format";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatGenericClassificationUpdatedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum2["IfASpecificClassificationWasChangedOnAFormat"] = "if_a_specific_classification_was_changed_on_a_format";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatSpecificClassificationUpdatedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum2["AFormatWasUpdated"] = "a_format_was_updated";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatUpdatedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum2["AFormatWasInserted"] = "a_format_was_inserted";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatInsertedEnum = {}));
      var TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum;
      (function(TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum2) {
        TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum2["AFormatValueWasEdited"] = "a_format_value_was_edited";
      })(TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum || (exports.TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum = TrackedFormatEventIdentifierDescriptionPairsFormatValueEditedEnum = {}));
      function TrackedFormatEventIdentifierDescriptionPairsFromJSON(json) {
        return TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.TrackedFormatEventIdentifierDescriptionPairsFromJSON = TrackedFormatEventIdentifierDescriptionPairsFromJSON;
      function TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "formatCreated": !(0, runtime_1.exists)(json, "format_created") ? void 0 : json["format_created"],
          "formatCopied": !(0, runtime_1.exists)(json, "format_copied") ? void 0 : json["format_copied"],
          "formatPartiallyCopied": !(0, runtime_1.exists)(json, "format_partially_copied") ? void 0 : json["format_partially_copied"],
          "formatDownloaded": !(0, runtime_1.exists)(json, "format_downloaded") ? void 0 : json["format_downloaded"],
          "formatDeleted": !(0, runtime_1.exists)(json, "format_deleted") ? void 0 : json["format_deleted"],
          "formatGenericClassificationUpdated": !(0, runtime_1.exists)(json, "format_generic_classification_updated") ? void 0 : json["format_generic_classification_updated"],
          "formatSpecificClassificationUpdated": !(0, runtime_1.exists)(json, "format_specific_classification_updated") ? void 0 : json["format_specific_classification_updated"],
          "formatUpdated": !(0, runtime_1.exists)(json, "format_updated") ? void 0 : json["format_updated"],
          "formatInserted": !(0, runtime_1.exists)(json, "format_inserted") ? void 0 : json["format_inserted"],
          "formatValueEdited": !(0, runtime_1.exists)(json, "format_value_edited") ? void 0 : json["format_value_edited"]
        };
      }
      exports.TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped = TrackedFormatEventIdentifierDescriptionPairsFromJSONTyped;
      function TrackedFormatEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "format_created": value.formatCreated,
          "format_copied": value.formatCopied,
          "format_partially_copied": value.formatPartiallyCopied,
          "format_downloaded": value.formatDownloaded,
          "format_deleted": value.formatDeleted,
          "format_generic_classification_updated": value.formatGenericClassificationUpdated,
          "format_specific_classification_updated": value.formatSpecificClassificationUpdated,
          "format_updated": value.formatUpdated,
          "format_inserted": value.formatInserted,
          "format_value_edited": value.formatValueEdited
        };
      }
      exports.TrackedFormatEventIdentifierDescriptionPairsToJSON = TrackedFormatEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEventMetadata.js
  var require_TrackedFormatEventMetadata = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedFormatEventMetadata.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedFormatEventMetadataToJSON = exports.TrackedFormatEventMetadataFromJSONTyped = exports.TrackedFormatEventMetadataFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedFormatEventMetadataFromJSON(json) {
        return TrackedFormatEventMetadataFromJSONTyped(json, false);
      }
      exports.TrackedFormatEventMetadataFromJSON = TrackedFormatEventMetadataFromJSON;
      function TrackedFormatEventMetadataFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "reclassification": !(0, runtime_1.exists)(json, "reclassification") ? void 0 : (0, _1.TrackedAssetEventFormatReclassificationMetadataFromJSON)(json["reclassification"])
        };
      }
      exports.TrackedFormatEventMetadataFromJSONTyped = TrackedFormatEventMetadataFromJSONTyped;
      function TrackedFormatEventMetadataToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "reclassification": (0, _1.TrackedAssetEventFormatReclassificationMetadataToJSON)(value.reclassification)
        };
      }
      exports.TrackedFormatEventMetadataToJSON = TrackedFormatEventMetadataToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedInteractionEvent.js
  var require_TrackedInteractionEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedInteractionEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedInteractionEventToJSON = exports.TrackedInteractionEventFromJSONTyped = exports.TrackedInteractionEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedInteractionEventFromJSON(json) {
        return TrackedInteractionEventFromJSONTyped(json, false);
      }
      exports.TrackedInteractionEventFromJSON = TrackedInteractionEventFromJSON;
      function TrackedInteractionEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "description": json["description"],
          "element": !(0, runtime_1.exists)(json, "element") ? void 0 : json["element"]
        };
      }
      exports.TrackedInteractionEventFromJSONTyped = TrackedInteractionEventFromJSONTyped;
      function TrackedInteractionEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "description": value.description,
          "element": value.element
        };
      }
      exports.TrackedInteractionEventToJSON = TrackedInteractionEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedKeyboardEvent.js
  var require_TrackedKeyboardEvent = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedKeyboardEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedKeyboardEventToJSON = exports.TrackedKeyboardEventFromJSONTyped = exports.TrackedKeyboardEventFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TrackedKeyboardEventFromJSON(json) {
        return TrackedKeyboardEventFromJSONTyped(json, false);
      }
      exports.TrackedKeyboardEventFromJSON = TrackedKeyboardEventFromJSON;
      function TrackedKeyboardEventFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "description": json["description"],
          "shortcut": json["shortcut"]
        };
      }
      exports.TrackedKeyboardEventFromJSONTyped = TrackedKeyboardEventFromJSONTyped;
      function TrackedKeyboardEventToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "description": value.description,
          "shortcut": value.shortcut
        };
      }
      exports.TrackedKeyboardEventToJSON = TrackedKeyboardEventToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedSessionEventIdentifierDescriptionPairs.js
  var require_TrackedSessionEventIdentifierDescriptionPairs = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedSessionEventIdentifierDescriptionPairs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedSessionEventIdentifierDescriptionPairsToJSON = exports.TrackedSessionEventIdentifierDescriptionPairsFromJSONTyped = exports.TrackedSessionEventIdentifierDescriptionPairsFromJSON = exports.TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum = exports.TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum2["ASessionHasBeenInitializedAndTheApplicationHasBeenOpened"] = "a_session_has_been_initialized_and_the_application_has_been_opened";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum = TrackedSessionEventIdentifierDescriptionPairsSessionInitializedEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum2["OneOrMoreApplicationsHasSuccessfullyConnected"] = "one_or_more_applications_has_successfully_connected";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum = TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionSucceededEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum2["OneOrMoreApplicationsHasFailedToConnectLocally"] = "one_or_more_applications_has_failed_to_connect_locally";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum = TrackedSessionEventIdentifierDescriptionPairsSessionLocalConnectionFailedEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum2["ASessionIsInactiveBecauseTheApplicationIsNotInTheForeground"] = "a_session_is_inactive_because_the_application_is_not_in_the_foreground";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum = TrackedSessionEventIdentifierDescriptionPairsSessionInactiveEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum2["ASessionIsActiveBecauseTheApplicationIsInTheForeground"] = "a_session_is_active_because_the_application_is_in_the_foreground";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum = TrackedSessionEventIdentifierDescriptionPairsSessionActiveEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum2["ASessionHasBeenEndedAndTheApplicationHasBeenClosed"] = "a_session_has_been_ended_and_the_application_has_been_closed";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum = TrackedSessionEventIdentifierDescriptionPairsSessionTerminatedEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum2["AUserHasSignedIntoThisSessionWithAAnExternalAccount"] = "a_user_has_signed_into_this_session_with_a_an_external_account";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum = TrackedSessionEventIdentifierDescriptionPairsSessionAuthenticatedWithSignInEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum2["AUserHasSignedOutOfThisSession"] = "a_user_has_signed_out_of_this_session";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum = TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithSignOutEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum2["AUserDidNotSignIntoTheSessionWithADismissal"] = "a_user_did_not_sign_into_the_session_with_a_dismissal";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum = TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithDismissEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum2["AUserDidNotSignIntoTheSessionWithAReminder"] = "a_user_did_not_sign_into_the_session_with_a_reminder";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum = TrackedSessionEventIdentifierDescriptionPairsSessionUnauthenticatedWithRemindEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum2["OnboardingHasBeenInitializedForThisSession"] = "onboarding_has_been_initialized_for_this_session";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum = TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingInitializedEnum = {}));
      var TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum;
      (function(TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum2) {
        TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum2["OnboardingHasBeenCompletedForThisSession"] = "onboarding_has_been_completed_for_this_session";
      })(TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum || (exports.TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum = TrackedSessionEventIdentifierDescriptionPairsSessionOnboardingCompletedEnum = {}));
      function TrackedSessionEventIdentifierDescriptionPairsFromJSON(json) {
        return TrackedSessionEventIdentifierDescriptionPairsFromJSONTyped(json, false);
      }
      exports.TrackedSessionEventIdentifierDescriptionPairsFromJSON = TrackedSessionEventIdentifierDescriptionPairsFromJSON;
      function TrackedSessionEventIdentifierDescriptionPairsFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "sessionInitialized": !(0, runtime_1.exists)(json, "session_initialized") ? void 0 : json["session_initialized"],
          "sessionLocalConnectionSucceeded": !(0, runtime_1.exists)(json, "session_local_connection_succeeded") ? void 0 : json["session_local_connection_succeeded"],
          "sessionLocalConnectionFailed": !(0, runtime_1.exists)(json, "session_local_connection_failed") ? void 0 : json["session_local_connection_failed"],
          "sessionInactive": !(0, runtime_1.exists)(json, "session_inactive") ? void 0 : json["session_inactive"],
          "sessionActive": !(0, runtime_1.exists)(json, "session_active") ? void 0 : json["session_active"],
          "sessionTerminated": !(0, runtime_1.exists)(json, "session_terminated") ? void 0 : json["session_terminated"],
          "sessionAuthenticatedWithSignIn": !(0, runtime_1.exists)(json, "session_authenticated_with_sign_in") ? void 0 : json["session_authenticated_with_sign_in"],
          "sessionUnauthenticatedWithSignOut": !(0, runtime_1.exists)(json, "session_unauthenticated_with_sign_out") ? void 0 : json["session_unauthenticated_with_sign_out"],
          "sessionUnauthenticatedWithDismiss": !(0, runtime_1.exists)(json, "session_unauthenticated_with_dismiss") ? void 0 : json["session_unauthenticated_with_dismiss"],
          "sessionUnauthenticatedWithRemind": !(0, runtime_1.exists)(json, "session_unauthenticated_with_remind") ? void 0 : json["session_unauthenticated_with_remind"],
          "sessionOnboardingInitialized": !(0, runtime_1.exists)(json, "session_onboarding_initialized") ? void 0 : json["session_onboarding_initialized"],
          "sessionOnboardingCompleted": !(0, runtime_1.exists)(json, "session_onboarding_completed") ? void 0 : json["session_onboarding_completed"]
        };
      }
      exports.TrackedSessionEventIdentifierDescriptionPairsFromJSONTyped = TrackedSessionEventIdentifierDescriptionPairsFromJSONTyped;
      function TrackedSessionEventIdentifierDescriptionPairsToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "session_initialized": value.sessionInitialized,
          "session_local_connection_succeeded": value.sessionLocalConnectionSucceeded,
          "session_local_connection_failed": value.sessionLocalConnectionFailed,
          "session_inactive": value.sessionInactive,
          "session_active": value.sessionActive,
          "session_terminated": value.sessionTerminated,
          "session_authenticated_with_sign_in": value.sessionAuthenticatedWithSignIn,
          "session_unauthenticated_with_sign_out": value.sessionUnauthenticatedWithSignOut,
          "session_unauthenticated_with_dismiss": value.sessionUnauthenticatedWithDismiss,
          "session_unauthenticated_with_remind": value.sessionUnauthenticatedWithRemind,
          "session_onboarding_initialized": value.sessionOnboardingInitialized,
          "session_onboarding_completed": value.sessionOnboardingCompleted
        };
      }
      exports.TrackedSessionEventIdentifierDescriptionPairsToJSON = TrackedSessionEventIdentifierDescriptionPairsToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TrackedUserProfile.js
  var require_TrackedUserProfile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TrackedUserProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TrackedUserProfileToJSON = exports.TrackedUserProfileFromJSONTyped = exports.TrackedUserProfileFromJSON = exports.TrackedUserProfileGranularityEnum = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      var TrackedUserProfileGranularityEnum;
      (function(TrackedUserProfileGranularityEnum2) {
        TrackedUserProfileGranularityEnum2["Device"] = "DEVICE";
        TrackedUserProfileGranularityEnum2["Account"] = "ACCOUNT";
        TrackedUserProfileGranularityEnum2["Anonymous"] = "ANONYMOUS";
      })(TrackedUserProfileGranularityEnum || (exports.TrackedUserProfileGranularityEnum = TrackedUserProfileGranularityEnum = {}));
      function TrackedUserProfileFromJSON(json) {
        return TrackedUserProfileFromJSONTyped(json, false);
      }
      exports.TrackedUserProfileFromJSON = TrackedUserProfileFromJSON;
      function TrackedUserProfileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "username": json["username"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "granularity": json["granularity"]
        };
      }
      exports.TrackedUserProfileFromJSONTyped = TrackedUserProfileFromJSONTyped;
      function TrackedUserProfileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "username": value.username,
          "email": value.email,
          "granularity": value.granularity
        };
      }
      exports.TrackedUserProfileToJSON = TrackedUserProfileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TransferableBytes.js
  var require_TransferableBytes = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TransferableBytes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TransferableBytesToJSON = exports.TransferableBytesFromJSONTyped = exports.TransferableBytesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TransferableBytesFromJSON(json) {
        return TransferableBytesFromJSONTyped(json, false);
      }
      exports.TransferableBytesFromJSON = TransferableBytesFromJSON;
      function TransferableBytesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "raw": !(0, runtime_1.exists)(json, "raw") ? void 0 : json["raw"],
          "base64": !(0, runtime_1.exists)(json, "base64") ? void 0 : json["base64"],
          "base64Url": !(0, runtime_1.exists)(json, "base64_url") ? void 0 : json["base64_url"],
          "dataUrl": !(0, runtime_1.exists)(json, "data_url") ? void 0 : json["data_url"]
        };
      }
      exports.TransferableBytesFromJSONTyped = TransferableBytesFromJSONTyped;
      function TransferableBytesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "raw": value.raw,
          "base64": value.base64,
          "base64_url": value.base64Url,
          "data_url": value.dataUrl
        };
      }
      exports.TransferableBytesToJSON = TransferableBytesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/TransferableString.js
  var require_TransferableString = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/TransferableString.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TransferableStringToJSON = exports.TransferableStringFromJSONTyped = exports.TransferableStringFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function TransferableStringFromJSON(json) {
        return TransferableStringFromJSONTyped(json, false);
      }
      exports.TransferableStringFromJSON = TransferableStringFromJSON;
      function TransferableStringFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "raw": !(0, runtime_1.exists)(json, "raw") ? void 0 : json["raw"],
          "base64": !(0, runtime_1.exists)(json, "base64") ? void 0 : json["base64"],
          "base64Url": !(0, runtime_1.exists)(json, "base64_url") ? void 0 : json["base64_url"],
          "dataUrl": !(0, runtime_1.exists)(json, "data_url") ? void 0 : json["data_url"]
        };
      }
      exports.TransferableStringFromJSONTyped = TransferableStringFromJSONTyped;
      function TransferableStringToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "raw": value.raw,
          "base64": value.base64,
          "base64_url": value.base64Url,
          "data_url": value.dataUrl
        };
      }
      exports.TransferableStringToJSON = TransferableStringToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/UncheckedOSUpdate.js
  var require_UncheckedOSUpdate = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/UncheckedOSUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UncheckedOSUpdateToJSON = exports.UncheckedOSUpdateFromJSONTyped = exports.UncheckedOSUpdateFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function UncheckedOSUpdateFromJSON(json) {
        return UncheckedOSUpdateFromJSONTyped(json, false);
      }
      exports.UncheckedOSUpdateFromJSON = UncheckedOSUpdateFromJSON;
      function UncheckedOSUpdateFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"])
        };
      }
      exports.UncheckedOSUpdateFromJSONTyped = UncheckedOSUpdateFromJSONTyped;
      function UncheckedOSUpdateToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema)
        };
      }
      exports.UncheckedOSUpdateToJSON = UncheckedOSUpdateToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/UnsegmentedTechnicalLanguage.js
  var require_UnsegmentedTechnicalLanguage = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/UnsegmentedTechnicalLanguage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnsegmentedTechnicalLanguageToJSON = exports.UnsegmentedTechnicalLanguageFromJSONTyped = exports.UnsegmentedTechnicalLanguageFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function UnsegmentedTechnicalLanguageFromJSON(json) {
        return UnsegmentedTechnicalLanguageFromJSONTyped(json, false);
      }
      exports.UnsegmentedTechnicalLanguageFromJSON = UnsegmentedTechnicalLanguageFromJSON;
      function UnsegmentedTechnicalLanguageFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "value": json["value"]
        };
      }
      exports.UnsegmentedTechnicalLanguageFromJSONTyped = UnsegmentedTechnicalLanguageFromJSONTyped;
      function UnsegmentedTechnicalLanguageToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "value": value.value
        };
      }
      exports.UnsegmentedTechnicalLanguageToJSON = UnsegmentedTechnicalLanguageToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/UpdatedExternalProviderApiKey.js
  var require_UpdatedExternalProviderApiKey = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/UpdatedExternalProviderApiKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UpdatedExternalProviderApiKeyToJSON = exports.UpdatedExternalProviderApiKeyFromJSONTyped = exports.UpdatedExternalProviderApiKeyFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function UpdatedExternalProviderApiKeyFromJSON(json) {
        return UpdatedExternalProviderApiKeyFromJSONTyped(json, false);
      }
      exports.UpdatedExternalProviderApiKeyFromJSON = UpdatedExternalProviderApiKeyFromJSON;
      function UpdatedExternalProviderApiKeyFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "metadata": (0, _1.Auth0UserMetadataFromJSON)(json["metadata"])
        };
      }
      exports.UpdatedExternalProviderApiKeyFromJSONTyped = UpdatedExternalProviderApiKeyFromJSONTyped;
      function UpdatedExternalProviderApiKeyToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "metadata": (0, _1.Auth0UserMetadataToJSON)(value.metadata)
        };
      }
      exports.UpdatedExternalProviderApiKeyToJSON = UpdatedExternalProviderApiKeyToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/UpdatingStatusEnum.js
  var require_UpdatingStatusEnum = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/UpdatingStatusEnum.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UpdatingStatusEnumToJSON = exports.UpdatingStatusEnumFromJSONTyped = exports.UpdatingStatusEnumFromJSON = exports.UpdatingStatusEnum = void 0;
      var UpdatingStatusEnum;
      (function(UpdatingStatusEnum2) {
        UpdatingStatusEnum2["ReadyToRestart"] = "READY_TO_RESTART";
        UpdatingStatusEnum2["Available"] = "AVAILABLE";
        UpdatingStatusEnum2["Downloading"] = "DOWNLOADING";
        UpdatingStatusEnum2["Unknown"] = "UNKNOWN";
        UpdatingStatusEnum2["UpToDate"] = "UP_TO_DATE";
        UpdatingStatusEnum2["ReinstallRequired"] = "REINSTALL_REQUIRED";
        UpdatingStatusEnum2["ContactSupport"] = "CONTACT_SUPPORT";
      })(UpdatingStatusEnum || (exports.UpdatingStatusEnum = UpdatingStatusEnum = {}));
      function UpdatingStatusEnumFromJSON(json) {
        return UpdatingStatusEnumFromJSONTyped(json, false);
      }
      exports.UpdatingStatusEnumFromJSON = UpdatingStatusEnumFromJSON;
      function UpdatingStatusEnumFromJSONTyped(json, ignoreDiscriminator) {
        return json;
      }
      exports.UpdatingStatusEnumFromJSONTyped = UpdatingStatusEnumFromJSONTyped;
      function UpdatingStatusEnumToJSON(value) {
        return value;
      }
      exports.UpdatingStatusEnumToJSON = UpdatingStatusEnumToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/UserProfile.js
  var require_UserProfile = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/UserProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UserProfileToJSON = exports.UserProfileFromJSONTyped = exports.UserProfileFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function UserProfileFromJSON(json) {
        return UserProfileFromJSONTyped(json, false);
      }
      exports.UserProfileFromJSON = UserProfileFromJSON;
      function UserProfileFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "picture": !(0, runtime_1.exists)(json, "picture") ? void 0 : json["picture"],
          "email": !(0, runtime_1.exists)(json, "email") ? void 0 : json["email"],
          "created": !(0, runtime_1.exists)(json, "created") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": !(0, runtime_1.exists)(json, "updated") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "username": !(0, runtime_1.exists)(json, "username") ? void 0 : json["username"],
          "id": json["id"],
          "name": !(0, runtime_1.exists)(json, "name") ? void 0 : json["name"],
          "aesthetics": (0, _1.AestheticsFromJSON)(json["aesthetics"]),
          "vanityname": !(0, runtime_1.exists)(json, "vanityname") ? void 0 : json["vanityname"],
          "allocation": !(0, runtime_1.exists)(json, "allocation") ? void 0 : (0, _1.AllocationCloudFromJSON)(json["allocation"]),
          "providers": !(0, runtime_1.exists)(json, "providers") ? void 0 : (0, _1.ExternalProvidersFromJSON)(json["providers"]),
          "auth0": !(0, runtime_1.exists)(json, "auth0") ? void 0 : (0, _1.Auth0UserMetadataFromJSON)(json["auth0"])
        };
      }
      exports.UserProfileFromJSONTyped = UserProfileFromJSONTyped;
      function UserProfileToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "picture": value.picture,
          "email": value.email,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "username": value.username,
          "id": value.id,
          "name": value.name,
          "aesthetics": (0, _1.AestheticsToJSON)(value.aesthetics),
          "vanityname": value.vanityname,
          "allocation": (0, _1.AllocationCloudToJSON)(value.allocation),
          "providers": (0, _1.ExternalProvidersToJSON)(value.providers),
          "auth0": (0, _1.Auth0UserMetadataToJSON)(value.auth0)
        };
      }
      exports.UserProfileToJSON = UserProfileToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Users.js
  var require_Users = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Users.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UsersToJSON = exports.UsersFromJSONTyped = exports.UsersFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function UsersFromJSON(json) {
        return UsersFromJSONTyped(json, false);
      }
      exports.UsersFromJSON = UsersFromJSON;
      function UsersFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": !(0, runtime_1.exists)(json, "iterable") ? void 0 : json["iterable"].map(_1.UserProfileFromJSON)
        };
      }
      exports.UsersFromJSONTyped = UsersFromJSONTyped;
      function UsersToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable === void 0 ? void 0 : value.iterable.map(_1.UserProfileToJSON)
        };
      }
      exports.UsersToJSON = UsersToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Website.js
  var require_Website = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Website.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebsiteToJSON = exports.WebsiteFromJSONTyped = exports.WebsiteFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function WebsiteFromJSON(json) {
        return WebsiteFromJSONTyped(json, false);
      }
      exports.WebsiteFromJSON = WebsiteFromJSON;
      function WebsiteFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "id": json["id"],
          "assets": !(0, runtime_1.exists)(json, "assets") ? void 0 : (0, _1.FlattenedAssetsFromJSON)(json["assets"]),
          "url": json["url"],
          "name": json["name"],
          "created": (0, _1.GroupedTimestampFromJSON)(json["created"]),
          "updated": (0, _1.GroupedTimestampFromJSON)(json["updated"]),
          "deleted": !(0, runtime_1.exists)(json, "deleted") ? void 0 : (0, _1.GroupedTimestampFromJSON)(json["deleted"]),
          "mechanisms": !(0, runtime_1.exists)(json, "mechanisms") ? void 0 : (0, runtime_1.mapValues)(json["mechanisms"], _1.MechanismEnumFromJSON),
          "interactions": !(0, runtime_1.exists)(json, "interactions") ? void 0 : json["interactions"],
          "persons": !(0, runtime_1.exists)(json, "persons") ? void 0 : (0, _1.FlattenedPersonsFromJSON)(json["persons"]),
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.WebsiteFromJSONTyped = WebsiteFromJSONTyped;
      function WebsiteToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "id": value.id,
          "assets": (0, _1.FlattenedAssetsToJSON)(value.assets),
          "url": value.url,
          "name": value.name,
          "created": (0, _1.GroupedTimestampToJSON)(value.created),
          "updated": (0, _1.GroupedTimestampToJSON)(value.updated),
          "deleted": (0, _1.GroupedTimestampToJSON)(value.deleted),
          "mechanisms": value.mechanisms === void 0 ? void 0 : (0, runtime_1.mapValues)(value.mechanisms, _1.MechanismEnumToJSON),
          "interactions": value.interactions,
          "persons": (0, _1.FlattenedPersonsToJSON)(value.persons),
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.WebsiteToJSON = WebsiteToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/Websites.js
  var require_Websites = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/Websites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebsitesToJSON = exports.WebsitesFromJSONTyped = exports.WebsitesFromJSON = void 0;
      var runtime_1 = require_runtime();
      var _1 = require_models();
      function WebsitesFromJSON(json) {
        return WebsitesFromJSONTyped(json, false);
      }
      exports.WebsitesFromJSON = WebsitesFromJSON;
      function WebsitesFromJSONTyped(json, ignoreDiscriminator) {
        if (json === void 0 || json === null) {
          return json;
        }
        return {
          "schema": !(0, runtime_1.exists)(json, "schema") ? void 0 : (0, _1.EmbeddedModelSchemaFromJSON)(json["schema"]),
          "iterable": json["iterable"].map(_1.WebsiteFromJSON),
          "indices": !(0, runtime_1.exists)(json, "indices") ? void 0 : json["indices"],
          "score": !(0, runtime_1.exists)(json, "score") ? void 0 : (0, _1.ScoreFromJSON)(json["score"])
        };
      }
      exports.WebsitesFromJSONTyped = WebsitesFromJSONTyped;
      function WebsitesToJSON(value) {
        if (value === void 0) {
          return void 0;
        }
        if (value === null) {
          return null;
        }
        return {
          "schema": (0, _1.EmbeddedModelSchemaToJSON)(value.schema),
          "iterable": value.iterable.map(_1.WebsiteToJSON),
          "indices": value.indices,
          "score": (0, _1.ScoreToJSON)(value.score)
        };
      }
      exports.WebsitesToJSON = WebsitesToJSON;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/models/index.js
  var require_models = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/models/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_AccessEnum(), exports);
      __exportStar(require_Accessor(), exports);
      __exportStar(require_Accessors(), exports);
      __exportStar(require_Activities(), exports);
      __exportStar(require_Activity(), exports);
      __exportStar(require_Aesthetics(), exports);
      __exportStar(require_AllocationCloud(), exports);
      __exportStar(require_AllocationCloudStatus(), exports);
      __exportStar(require_AllocationCloudUrl(), exports);
      __exportStar(require_AllocationCloudUrls(), exports);
      __exportStar(require_AllocationStatusEnum(), exports);
      __exportStar(require_Allocations(), exports);
      __exportStar(require_Analyses(), exports);
      __exportStar(require_Analysis(), exports);
      __exportStar(require_AnalyticsTrackedAdoptionEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_Anchor(), exports);
      __exportStar(require_AnchorPoint(), exports);
      __exportStar(require_AnchorPoints(), exports);
      __exportStar(require_AnchorTypeEnum(), exports);
      __exportStar(require_Anchors(), exports);
      __exportStar(require_Annotation(), exports);
      __exportStar(require_AnnotationTypeEnum(), exports);
      __exportStar(require_Annotations(), exports);
      __exportStar(require_Application(), exports);
      __exportStar(require_ApplicationNameEnum(), exports);
      __exportStar(require_Applications(), exports);
      __exportStar(require_Asset(), exports);
      __exportStar(require_AssetFilter(), exports);
      __exportStar(require_AssetFilterPhrase(), exports);
      __exportStar(require_AssetFilterPhraseOptions(), exports);
      __exportStar(require_AssetFilterTimestamp(), exports);
      __exportStar(require_AssetFilters(), exports);
      __exportStar(require_AssetReclassification(), exports);
      __exportStar(require_AssetSearchSpace(), exports);
      __exportStar(require_Assets(), exports);
      __exportStar(require_AssetsSearchWithFiltersInput(), exports);
      __exportStar(require_AssetsSearchWithFiltersOutput(), exports);
      __exportStar(require_Auth0(), exports);
      __exportStar(require_Auth0Identity(), exports);
      __exportStar(require_Auth0OpenAIUserMetadata(), exports);
      __exportStar(require_Auth0Redirects(), exports);
      __exportStar(require_Auth0User(), exports);
      __exportStar(require_Auth0UserAllocationMetadata(), exports);
      __exportStar(require_Auth0UserMetadata(), exports);
      __exportStar(require_AvailableFormats(), exports);
      __exportStar(require_ByteDescriptor(), exports);
      __exportStar(require_CapabilitiesEnum(), exports);
      __exportStar(require_ChallengedPKCE(), exports);
      __exportStar(require_CheckedOSUpdate(), exports);
      __exportStar(require_Classification(), exports);
      __exportStar(require_ClassificationGenericEnum(), exports);
      __exportStar(require_ClassificationRenderingEnum(), exports);
      __exportStar(require_ClassificationSpecificEnum(), exports);
      __exportStar(require_CodeAnalyses(), exports);
      __exportStar(require_CodeAnalysis(), exports);
      __exportStar(require_Context(), exports);
      __exportStar(require_Conversation(), exports);
      __exportStar(require_ConversationGrounding(), exports);
      __exportStar(require_ConversationMessage(), exports);
      __exportStar(require_ConversationMessageSentimentEnum(), exports);
      __exportStar(require_ConversationMessages(), exports);
      __exportStar(require_ConversationSummarizeInput(), exports);
      __exportStar(require_ConversationSummarizeOutput(), exports);
      __exportStar(require_ConversationTypeEnum(), exports);
      __exportStar(require_Conversations(), exports);
      __exportStar(require_ConversationsCreateFromAssetOutput(), exports);
      __exportStar(require_CreatedExternalProviderApiKey(), exports);
      __exportStar(require_DeletedExternalProviderApiKey(), exports);
      __exportStar(require_DiscoveredAsset(), exports);
      __exportStar(require_DiscoveredAssets(), exports);
      __exportStar(require_DiscoveredHtmlWebpage(), exports);
      __exportStar(require_DiscoveredHtmlWebpages(), exports);
      __exportStar(require_DiscoveredRelatedTag(), exports);
      __exportStar(require_DiscoveredRelatedTags(), exports);
      __exportStar(require_DiscoveredSensitive(), exports);
      __exportStar(require_DiscoveredSensitives(), exports);
      __exportStar(require_Distribution(), exports);
      __exportStar(require_Distributions(), exports);
      __exportStar(require_Edges(), exports);
      __exportStar(require_EmbeddedModelSchema(), exports);
      __exportStar(require_EmbeddedModelSchemaSemanticVersionEnum(), exports);
      __exportStar(require_Embedding(), exports);
      __exportStar(require_Embeddings(), exports);
      __exportStar(require_ExistentMetadata(), exports);
      __exportStar(require_ExistingMetadata(), exports);
      __exportStar(require_ExportedAsset(), exports);
      __exportStar(require_ExportedDatabase(), exports);
      __exportStar(require_ExportedDatabaseFormat(), exports);
      __exportStar(require_ExportedDatabaseFormats(), exports);
      __exportStar(require_ExternalMLProviderEnum(), exports);
      __exportStar(require_ExternalProvider(), exports);
      __exportStar(require_ExternalProviderProfileData(), exports);
      __exportStar(require_ExternalProviderTypeEnum(), exports);
      __exportStar(require_ExternalProviders(), exports);
      __exportStar(require_ExternallySourcedEnum(), exports);
      __exportStar(require_FileFormat(), exports);
      __exportStar(require_FileMetadata(), exports);
      __exportStar(require_FilePickerInput(), exports);
      __exportStar(require_FilterOperationTypeEnum(), exports);
      __exportStar(require_FlattenedActivities(), exports);
      __exportStar(require_FlattenedActivity(), exports);
      __exportStar(require_FlattenedAnalysis(), exports);
      __exportStar(require_FlattenedAnchor(), exports);
      __exportStar(require_FlattenedAnchorPoint(), exports);
      __exportStar(require_FlattenedAnchorPoints(), exports);
      __exportStar(require_FlattenedAnchors(), exports);
      __exportStar(require_FlattenedAnnotation(), exports);
      __exportStar(require_FlattenedAnnotations(), exports);
      __exportStar(require_FlattenedAsset(), exports);
      __exportStar(require_FlattenedAssets(), exports);
      __exportStar(require_FlattenedConversation(), exports);
      __exportStar(require_FlattenedConversationMessage(), exports);
      __exportStar(require_FlattenedConversationMessages(), exports);
      __exportStar(require_FlattenedConversations(), exports);
      __exportStar(require_FlattenedDistribution(), exports);
      __exportStar(require_FlattenedDistributions(), exports);
      __exportStar(require_FlattenedFormat(), exports);
      __exportStar(require_FlattenedFormats(), exports);
      __exportStar(require_FlattenedHint(), exports);
      __exportStar(require_FlattenedHints(), exports);
      __exportStar(require_FlattenedImageAnalysis(), exports);
      __exportStar(require_FlattenedOCRAnalysis(), exports);
      __exportStar(require_FlattenedPerson(), exports);
      __exportStar(require_FlattenedPersons(), exports);
      __exportStar(require_FlattenedPreview(), exports);
      __exportStar(require_FlattenedSensitive(), exports);
      __exportStar(require_FlattenedSensitives(), exports);
      __exportStar(require_FlattenedShare(), exports);
      __exportStar(require_FlattenedShares(), exports);
      __exportStar(require_FlattenedTag(), exports);
      __exportStar(require_FlattenedTags(), exports);
      __exportStar(require_FlattenedUserProfile(), exports);
      __exportStar(require_FlattenedWebsite(), exports);
      __exportStar(require_FlattenedWebsites(), exports);
      __exportStar(require_Font(), exports);
      __exportStar(require_Format(), exports);
      __exportStar(require_FormatMetric(), exports);
      __exportStar(require_FormatReclassification(), exports);
      __exportStar(require_Formats(), exports);
      __exportStar(require_FormatsMetrics(), exports);
      __exportStar(require_FragmentFormat(), exports);
      __exportStar(require_FragmentMetadata(), exports);
      __exportStar(require_GitHubDistribution(), exports);
      __exportStar(require_GitHubGistDistribution(), exports);
      __exportStar(require_GraphicalImageDescriptiveStatistics(), exports);
      __exportStar(require_GraphicalImageProcessing(), exports);
      __exportStar(require_GraphicalImageStatistics(), exports);
      __exportStar(require_GraphicalMachineLearningProcessingEvent(), exports);
      __exportStar(require_GraphicalOCRDescriptiveStatistics(), exports);
      __exportStar(require_GraphicalOCRDescriptiveStatisticsConfidence(), exports);
      __exportStar(require_GraphicalOCRProcessing(), exports);
      __exportStar(require_GraphicalOCRStatistics(), exports);
      __exportStar(require_GraphicalSVGStatistics(), exports);
      __exportStar(require_GroupedTimestamp(), exports);
      __exportStar(require_Health(), exports);
      __exportStar(require_Hint(), exports);
      __exportStar(require_HintTypeEnum(), exports);
      __exportStar(require_Hints(), exports);
      __exportStar(require_ImageAnalyses(), exports);
      __exportStar(require_ImageAnalysis(), exports);
      __exportStar(require_InteractedAsset(), exports);
      __exportStar(require_InteractedAssetInteractions(), exports);
      __exportStar(require_InteractedAssets(), exports);
      __exportStar(require_Linkify(), exports);
      __exportStar(require_LinkifyMultiple(), exports);
      __exportStar(require_MailgunDistribution(), exports);
      __exportStar(require_MailgunMetadata(), exports);
      __exportStar(require_MechanismEnum(), exports);
      __exportStar(require_Model(), exports);
      __exportStar(require_ModelDeleteCacheInput(), exports);
      __exportStar(require_ModelDeleteCacheOutput(), exports);
      __exportStar(require_ModelDownloadProgress(), exports);
      __exportStar(require_ModelDownloadProgressStatusEnum(), exports);
      __exportStar(require_ModelFoundationEnum(), exports);
      __exportStar(require_ModelMaxTokens(), exports);
      __exportStar(require_ModelTypeEnum(), exports);
      __exportStar(require_ModelUsageEnum(), exports);
      __exportStar(require_Models(), exports);
      __exportStar(require_Node(), exports);
      __exportStar(require_NodeTypeEnum(), exports);
      __exportStar(require_Notification(), exports);
      __exportStar(require_OAuthAccount(), exports);
      __exportStar(require_OAuthGroup(), exports);
      __exportStar(require_OAuthToken(), exports);
      __exportStar(require_OCRAnalyses(), exports);
      __exportStar(require_OCRAnalysis(), exports);
      __exportStar(require_OSHealth(), exports);
      __exportStar(require_OpenAIModelsListInput(), exports);
      __exportStar(require_OpenAIModelsListOutput(), exports);
      __exportStar(require_OrderedMetrics(), exports);
      __exportStar(require_PKCE(), exports);
      __exportStar(require_Person(), exports);
      __exportStar(require_PersonAccess(), exports);
      __exportStar(require_PersonAccessScopedEnum(), exports);
      __exportStar(require_PersonBasicType(), exports);
      __exportStar(require_PersonModel(), exports);
      __exportStar(require_PersonType(), exports);
      __exportStar(require_Persons(), exports);
      __exportStar(require_PlatformEnum(), exports);
      __exportStar(require_PrecreatedExternalProviderApiKey(), exports);
      __exportStar(require_PredeletedExternalProviderApiKey(), exports);
      __exportStar(require_PreupdatedExternalProviderApiKey(), exports);
      __exportStar(require_Preview(), exports);
      __exportStar(require_PrivacyEnum(), exports);
      __exportStar(require_PseudoAssets(), exports);
      __exportStar(require_QGPTConversation(), exports);
      __exportStar(require_QGPTConversationMessage(), exports);
      __exportStar(require_QGPTConversationMessageRoleEnum(), exports);
      __exportStar(require_QGPTHintsInput(), exports);
      __exportStar(require_QGPTPersonsRelatedInput(), exports);
      __exportStar(require_QGPTPersonsRelatedOutput(), exports);
      __exportStar(require_QGPTQuestionAnswer(), exports);
      __exportStar(require_QGPTQuestionAnswers(), exports);
      __exportStar(require_QGPTQuestionInput(), exports);
      __exportStar(require_QGPTQuestionOutput(), exports);
      __exportStar(require_QGPTRelevanceInput(), exports);
      __exportStar(require_QGPTRelevanceInputOptions(), exports);
      __exportStar(require_QGPTRelevanceOutput(), exports);
      __exportStar(require_QGPTRepromptInput(), exports);
      __exportStar(require_QGPTRepromptOutput(), exports);
      __exportStar(require_QGPTStreamEnum(), exports);
      __exportStar(require_QGPTStreamInput(), exports);
      __exportStar(require_QGPTStreamOutput(), exports);
      __exportStar(require_Reaction(), exports);
      __exportStar(require_Recipients(), exports);
      __exportStar(require_ReferencedActivity(), exports);
      __exportStar(require_ReferencedAnchor(), exports);
      __exportStar(require_ReferencedAnchorPoint(), exports);
      __exportStar(require_ReferencedAnnotation(), exports);
      __exportStar(require_ReferencedAsset(), exports);
      __exportStar(require_ReferencedConversation(), exports);
      __exportStar(require_ReferencedConversationMessage(), exports);
      __exportStar(require_ReferencedDistribution(), exports);
      __exportStar(require_ReferencedFormat(), exports);
      __exportStar(require_ReferencedHint(), exports);
      __exportStar(require_ReferencedModel(), exports);
      __exportStar(require_ReferencedPerson(), exports);
      __exportStar(require_ReferencedSensitive(), exports);
      __exportStar(require_ReferencedShare(), exports);
      __exportStar(require_ReferencedTag(), exports);
      __exportStar(require_ReferencedUser(), exports);
      __exportStar(require_ReferencedWebsite(), exports);
      __exportStar(require_Relationship(), exports);
      __exportStar(require_Relationships(), exports);
      __exportStar(require_RelevantQGPTSeed(), exports);
      __exportStar(require_RelevantQGPTSeeds(), exports);
      __exportStar(require_ResultedPKCE(), exports);
      __exportStar(require_ReturnedUserProfile(), exports);
      __exportStar(require_ReuseReaction(), exports);
      __exportStar(require_ReuseSuggestion(), exports);
      __exportStar(require_RevokedPKCE(), exports);
      __exportStar(require_Role(), exports);
      __exportStar(require_SaveSuggestion(), exports);
      __exportStar(require_Score(), exports);
      __exportStar(require_SearchedAsset(), exports);
      __exportStar(require_SearchedAssets(), exports);
      __exportStar(require_SearchedMatchEnum(), exports);
      __exportStar(require_Seed(), exports);
      __exportStar(require_SeededAccessor(), exports);
      __exportStar(require_SeededActivity(), exports);
      __exportStar(require_SeededAnchor(), exports);
      __exportStar(require_SeededAnchorPoint(), exports);
      __exportStar(require_SeededAnnotation(), exports);
      __exportStar(require_SeededAsset(), exports);
      __exportStar(require_SeededAssetMetadata(), exports);
      __exportStar(require_SeededAssetSensitive(), exports);
      __exportStar(require_SeededAssetTag(), exports);
      __exportStar(require_SeededAssetTags(), exports);
      __exportStar(require_SeededAssetWebsite(), exports);
      __exportStar(require_SeededAssetsRecommendation(), exports);
      __exportStar(require_SeededClassification(), exports);
      __exportStar(require_SeededConnectorAsset(), exports);
      __exportStar(require_SeededConnectorConnection(), exports);
      __exportStar(require_SeededConnectorCreation(), exports);
      __exportStar(require_SeededConnectorTracking(), exports);
      __exportStar(require_SeededConversation(), exports);
      __exportStar(require_SeededConversationMessage(), exports);
      __exportStar(require_SeededDiscoverableAsset(), exports);
      __exportStar(require_SeededDiscoverableAssets(), exports);
      __exportStar(require_SeededDiscoverableHtmlWebpage(), exports);
      __exportStar(require_SeededDiscoverableHtmlWebpages(), exports);
      __exportStar(require_SeededDiscoverableRelatedTag(), exports);
      __exportStar(require_SeededDiscoverableRelatedTags(), exports);
      __exportStar(require_SeededDiscoverableSensitive(), exports);
      __exportStar(require_SeededDiscoverableSensitives(), exports);
      __exportStar(require_SeededDistribution(), exports);
      __exportStar(require_SeededDistributions(), exports);
      __exportStar(require_SeededExternalProvider(), exports);
      __exportStar(require_SeededFile(), exports);
      __exportStar(require_SeededFormat(), exports);
      __exportStar(require_SeededFragment(), exports);
      __exportStar(require_SeededGitHubDistribution(), exports);
      __exportStar(require_SeededGitHubGistDistribution(), exports);
      __exportStar(require_SeededGithubGistsImport(), exports);
      __exportStar(require_SeededHint(), exports);
      __exportStar(require_SeededMacOSAsset(), exports);
      __exportStar(require_SeededModel(), exports);
      __exportStar(require_SeededModels(), exports);
      __exportStar(require_SeededPKCE(), exports);
      __exportStar(require_SeededPKCEADDITIONALPARAMETERS(), exports);
      __exportStar(require_SeededPerson(), exports);
      __exportStar(require_SeededScore(), exports);
      __exportStar(require_SeededScoreIncrement(), exports);
      __exportStar(require_SeededSensitive(), exports);
      __exportStar(require_SeededShare(), exports);
      __exportStar(require_SeededTag(), exports);
      __exportStar(require_SeededTrackedAdoptionEvent(), exports);
      __exportStar(require_SeededTrackedApplication(), exports);
      __exportStar(require_SeededTrackedAssetEvent(), exports);
      __exportStar(require_SeededTrackedAssetsEvent(), exports);
      __exportStar(require_SeededTrackedAssetsEventMetadata(), exports);
      __exportStar(require_SeededTrackedFormatEvent(), exports);
      __exportStar(require_SeededTrackedInteractionEvent(), exports);
      __exportStar(require_SeededTrackedInteractionEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_SeededTrackedKeyboardEvent(), exports);
      __exportStar(require_SeededTrackedKeyboardEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_SeededTrackedMachineLearningEvent(), exports);
      __exportStar(require_SeededTrackedSessionEvent(), exports);
      __exportStar(require_SeededUltraSuiteAsset(), exports);
      __exportStar(require_SeededUser(), exports);
      __exportStar(require_SeededWebsite(), exports);
      __exportStar(require_Seeds(), exports);
      __exportStar(require_SegmentedTechnicalLanguage(), exports);
      __exportStar(require_SegmentedTechnicalLanguageFragment(), exports);
      __exportStar(require_Sensitive(), exports);
      __exportStar(require_SensitiveCategoryEnum(), exports);
      __exportStar(require_SensitiveMetadata(), exports);
      __exportStar(require_SensitiveSeverityEnum(), exports);
      __exportStar(require_Sensitives(), exports);
      __exportStar(require_Session(), exports);
      __exportStar(require_Share(), exports);
      __exportStar(require_Shares(), exports);
      __exportStar(require_Space(), exports);
      __exportStar(require_StreamedIdentifier(), exports);
      __exportStar(require_StreamedIdentifiers(), exports);
      __exportStar(require_Suggestion(), exports);
      __exportStar(require_SuggestionTarget(), exports);
      __exportStar(require_SystemExecutionCpuInformation(), exports);
      __exportStar(require_SystemExecutionInformation(), exports);
      __exportStar(require_TLPCodeDirectoryAnalytics(), exports);
      __exportStar(require_TLPCodeFileAnalytics(), exports);
      __exportStar(require_TLPCodeFragmentClassification(), exports);
      __exportStar(require_TLPCodeFragmentClassificationMetadata(), exports);
      __exportStar(require_TLPCodeFragmentDescription(), exports);
      __exportStar(require_TLPCodeFragmentDescriptiveStatistics(), exports);
      __exportStar(require_TLPCodeFragmentReclassification(), exports);
      __exportStar(require_TLPCodeFragmentReclassificationUpdates(), exports);
      __exportStar(require_TLPCodeFragmentStatistics(), exports);
      __exportStar(require_TLPCodeFragmentSuggestedReuse(), exports);
      __exportStar(require_TLPCodeFragmentSuggestedSave(), exports);
      __exportStar(require_TLPCodeFragmentTagify(), exports);
      __exportStar(require_TLPCodeProcessing(), exports);
      __exportStar(require_TLPCodeRepositoryAnalytics(), exports);
      __exportStar(require_TLPCodeSnippetAnalytics(), exports);
      __exportStar(require_TLPCodeSnippetSuggestedInteractions(), exports);
      __exportStar(require_TLPCodeSnippetTagifyCode(), exports);
      __exportStar(require_TLPDirectedDiscoveryFilter(), exports);
      __exportStar(require_TLPDirectedDiscoveryFilterEnum(), exports);
      __exportStar(require_TLPDirectedDiscoveryFilters(), exports);
      __exportStar(require_TLPMachineLearningProcessingEvent(), exports);
      __exportStar(require_Tag(), exports);
      __exportStar(require_TagCategoryEnum(), exports);
      __exportStar(require_Tags(), exports);
      __exportStar(require_TextLocation(), exports);
      __exportStar(require_TextMatch(), exports);
      __exportStar(require_Theme(), exports);
      __exportStar(require_TokenizedPKCE(), exports);
      __exportStar(require_TrackedApplication(), exports);
      __exportStar(require_TrackedApplicationInstall(), exports);
      __exportStar(require_TrackedApplicationUpdate(), exports);
      __exportStar(require_TrackedAssetEventCreationMetadata(), exports);
      __exportStar(require_TrackedAssetEventCreationMetadataClipboard(), exports);
      __exportStar(require_TrackedAssetEventCreationMetadataFile(), exports);
      __exportStar(require_TrackedAssetEventFormatReclassificationMetadata(), exports);
      __exportStar(require_TrackedAssetEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_TrackedAssetEventMetadata(), exports);
      __exportStar(require_TrackedAssetEventRenameMetadata(), exports);
      __exportStar(require_TrackedAssetsEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_TrackedAssetsEventSearchMetadata(), exports);
      __exportStar(require_TrackedAssetsEventSearchMetadataResults(), exports);
      __exportStar(require_TrackedFormat(), exports);
      __exportStar(require_TrackedFormatEvent(), exports);
      __exportStar(require_TrackedFormatEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_TrackedFormatEventMetadata(), exports);
      __exportStar(require_TrackedInteractionEvent(), exports);
      __exportStar(require_TrackedKeyboardEvent(), exports);
      __exportStar(require_TrackedSessionEventIdentifierDescriptionPairs(), exports);
      __exportStar(require_TrackedUserProfile(), exports);
      __exportStar(require_TransferableBytes(), exports);
      __exportStar(require_TransferableString(), exports);
      __exportStar(require_UncheckedOSUpdate(), exports);
      __exportStar(require_UnsegmentedTechnicalLanguage(), exports);
      __exportStar(require_UpdatedExternalProviderApiKey(), exports);
      __exportStar(require_UpdatingStatusEnum(), exports);
      __exportStar(require_UserProfile(), exports);
      __exportStar(require_Users(), exports);
      __exportStar(require_Website(), exports);
      __exportStar(require_Websites(), exports);
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ActivitiesApi.js
  var require_ActivitiesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ActivitiesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivitiesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ActivitiesApi = class extends runtime.BaseAPI {
        /**
         * This will create a new Activity.
         * /activities/create [POST]
         */
        async activitiesCreateNewActivityRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/activities/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededActivityToJSON)(requestParameters.seededActivity)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityFromJSON)(jsonValue));
        }
        /**
         * This will create a new Activity.
         * /activities/create [POST]
         */
        async activitiesCreateNewActivity(requestParameters) {
          const response = await this.activitiesCreateNewActivityRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
         * /activities/{activity}/delete [POST]
         */
        async activitiesDeleteSpecificActivityRaw(requestParameters) {
          if (requestParameters.activity === null || requestParameters.activity === void 0) {
            throw new runtime.RequiredError("activity", "Required parameter requestParameters.activity was null or undefined when calling activitiesDeleteSpecificActivity.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/activities/{activity}/delete`.replace(`{${"activity"}}`, encodeURIComponent(String(requestParameters.activity))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific activity.  important note: if we delete an activity: that is going to be a generic or a specific/ we will also delete its counter part i.e the specific. and vise versa, this ensures that the references are always cleaned.
         * /activities/{activity}/delete [POST]
         */
        async activitiesDeleteSpecificActivity(requestParameters) {
          await this.activitiesDeleteSpecificActivityRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all of the activities
         * /activities [GET]
         */
        async activitiesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/activities`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivitiesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of the activities
         * /activities [GET]
         */
        async activitiesSnapshot(requestParameters) {
          const response = await this.activitiesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ActivitiesApi = ActivitiesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ActivityApi.js
  var require_ActivityApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ActivityApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivityIdentifiersSnapshotActivityFilterEnumEnum = exports.ActivityApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ActivityApi = class extends runtime.BaseAPI {
        /**
         * This will attempt to get a specific activity.
         * /activity/{activity} [GET]
         */
        async activitiesSpecificActivitySnapshotRaw(requestParameters) {
          if (requestParameters.activity === null || requestParameters.activity === void 0) {
            throw new runtime.RequiredError("activity", "Required parameter requestParameters.activity was null or undefined when calling activitiesSpecificActivitySnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/activity/{activity}`.replace(`{${"activity"}}`, encodeURIComponent(String(requestParameters.activity))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityFromJSON)(jsonValue));
        }
        /**
         * This will attempt to get a specific activity.
         * /activity/{activity} [GET]
         */
        async activitiesSpecificActivitySnapshot(requestParameters) {
          const response = await this.activitiesSpecificActivitySnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is going to return all the identifiers of the activity event in order of most recent -> oldest.
         * /activity/identifiers [GET]
         */
        async activityIdentifiersSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          if (requestParameters.activityFilterEnum !== void 0) {
            queryParameters["activity_filter_enum"] = requestParameters.activityFilterEnum;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/activity/identifiers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FlattenedActivitiesFromJSON)(jsonValue));
        }
        /**
         * This is going to return all the identifiers of the activity event in order of most recent -> oldest.
         * /activity/identifiers [GET]
         */
        async activityIdentifiersSnapshot(requestParameters) {
          const response = await this.activityIdentifiersSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * this will update a specific activity.
         * /activity/update [POST]
         */
        async activityUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/activity/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ActivityToJSON)(requestParameters.activity)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityFromJSON)(jsonValue));
        }
        /**
         * this will update a specific activity.
         * /activity/update [POST]
         */
        async activityUpdate(requestParameters) {
          const response = await this.activityUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ActivityApi = ActivityApi;
      var ActivityIdentifiersSnapshotActivityFilterEnumEnum;
      (function(ActivityIdentifiersSnapshotActivityFilterEnumEnum2) {
        ActivityIdentifiersSnapshotActivityFilterEnumEnum2["Created"] = "CREATED";
        ActivityIdentifiersSnapshotActivityFilterEnumEnum2["Updated"] = "UPDATED";
        ActivityIdentifiersSnapshotActivityFilterEnumEnum2["Deleted"] = "DELETED";
        ActivityIdentifiersSnapshotActivityFilterEnumEnum2["Referenced"] = "REFERENCED";
      })(ActivityIdentifiersSnapshotActivityFilterEnumEnum || (exports.ActivityIdentifiersSnapshotActivityFilterEnumEnum = ActivityIdentifiersSnapshotActivityFilterEnumEnum = {}));
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AllocationApi.js
  var require_AllocationApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AllocationApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AllocationApi = class extends runtime.BaseAPI {
        /**
         * This will get a snapshot of a specific allocation.
         * /allocation/{allocation} [GET]
         */
        async allocationSnapshotRaw(requestParameters) {
          if (requestParameters.allocation === null || requestParameters.allocation === void 0) {
            throw new runtime.RequiredError("allocation", "Required parameter requestParameters.allocation was null or undefined when calling allocationSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/allocation/{allocation}`.replace(`{${"allocation"}}`, encodeURIComponent(String(requestParameters.allocation))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationCloudFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a specific allocation.
         * /allocation/{allocation} [GET]
         */
        async allocationSnapshot(requestParameters) {
          const response = await this.allocationSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific allocation.
         * /allocation/update [POST]
         */
        async allocationUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocation/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AllocationCloudToJSON)(requestParameters.allocationCloud)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationCloudFromJSON)(jsonValue));
        }
        /**
         * This will update a specific allocation.
         * /allocation/update [POST]
         */
        async allocationUpdate(requestParameters) {
          const response = await this.allocationUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AllocationApi = AllocationApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AllocationsApi.js
  var require_AllocationsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AllocationsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AllocationsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AllocationsApi = class extends runtime.BaseAPI {
        /**
         * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
         * /allocations/connect [POST]
         */
        async allocationsConnectNewCloudRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocations/connect`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationCloudFromJSON)(jsonValue));
        }
        /**
         * This will attempt to connect to a specific users cloud.(Required that the current user is logged in.)
         * /allocations/connect [POST]
         */
        async allocationsConnectNewCloud(requestParameters) {
          const response = await this.allocationsConnectNewCloudRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is unimplemented locally. This will create an allocation. ONLY used within the cloud.
         * /allocations/create [POST]
         */
        async allocationsCreateNewAllocationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocations/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AllocationCloudToJSON)(requestParameters.allocationCloud)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationCloudFromJSON)(jsonValue));
        }
        /**
         * This is unimplemented locally. This will create an allocation. ONLY used within the cloud.
         * /allocations/create [POST]
         */
        async allocationsCreateNewAllocation(requestParameters) {
          const response = await this.allocationsCreateNewAllocationRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is unimplemented locally. This will delete an allocation. ONLY used within the cloud.
         * /allocations/delete [POST]
         */
        async allocationsDeleteAllocationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocations/delete`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AllocationCloudToJSON)(requestParameters.allocationCloud)
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This is unimplemented locally. This will delete an allocation. ONLY used within the cloud.
         * /allocations/delete [POST]
         */
        async allocationsDeleteAllocation(requestParameters) {
          const response = await this.allocationsDeleteAllocationRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will attempt to disconnect to a specific users cloud.
         * /allocations/disconnect [POST]
         */
        async allocationsDisconnectCloudRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocations/disconnect`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AllocationCloudToJSON)(requestParameters.allocationCloud)
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This will attempt to disconnect to a specific users cloud.
         * /allocations/disconnect [POST]
         */
        async allocationsDisconnectCloud(requestParameters) {
          const response = await this.allocationsDisconnectCloudRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
         * /allocations/reconnect [POST]
         */
        async allocationsReconnectCloudRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/allocations/reconnect`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AllocationCloudToJSON)(requestParameters.allocationCloud)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationCloudFromJSON)(jsonValue));
        }
        /**
         * This will attempt to reconnect to a users cloud. This will ensure that we are connected to a users cloud and will ensure that all the data associated with a user\'s cloud is up-to-date.
         * /allocations/reconnect [POST]
         */
        async allocationsReconnectCloud(requestParameters) {
          const response = await this.allocationsReconnectCloudRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is going to get a snapshot of all of the connected allocations.
         * /allocations [GET]
         */
        async allocationsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/allocations`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AllocationsFromJSON)(jsonValue));
        }
        /**
         * This is going to get a snapshot of all of the connected allocations.
         * /allocations [GET]
         */
        async allocationsSnapshot() {
          const response = await this.allocationsSnapshotRaw();
          return await response.value();
        }
      };
      exports.AllocationsApi = AllocationsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnalysesApi.js
  var require_AnalysesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnalysesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnalysesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnalysesApi = class extends runtime.BaseAPI {
        /**
         * This will get a snapshot of all of your analyses, that are all attached to formats. An analysis can optionally have an codeAnalysis or an optional imageAnalysis.
         * Your GET endpoint
         */
        async analysesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/analyses`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnalysesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your analyses, that are all attached to formats. An analysis can optionally have an codeAnalysis or an optional imageAnalysis.
         * Your GET endpoint
         */
        async analysesSnapshot(requestParameters) {
          const response = await this.analysesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnalysesApi = AnalysesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorApi.js
  var require_AnchorApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnchorApi = class extends runtime.BaseAPI {
        /**
         * This will rename a specific anchor.
         * /anchor/{anchor}/rename [POST]
         */
        async anchorRenameRaw(requestParameters) {
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling anchorRename.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/anchor/{anchor}/rename`.replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorFromJSON)(jsonValue));
        }
        /**
         * This will rename a specific anchor.
         * /anchor/{anchor}/rename [POST]
         */
        async anchorRename(requestParameters) {
          const response = await this.anchorRenameRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/anchor/{anchor}/scores/increment\' [POST]
         */
        async anchorScoresIncrementRaw(requestParameters) {
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling anchorScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchor/{anchor}/scores/increment`.replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/anchor/{anchor}/scores/increment\' [POST]
         */
        async anchorScoresIncrement(requestParameters) {
          await this.anchorScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a snapshot of a single anchor.
         * /anchor/{anchor} [GET]
         */
        async anchorSpecificAnchorSnapshotRaw(requestParameters) {
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling anchorSpecificAnchorSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/anchor/{anchor}`.replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a single anchor.
         * /anchor/{anchor} [GET]
         */
        async anchorSpecificAnchorSnapshot(requestParameters) {
          const response = await this.anchorSpecificAnchorSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific anchor.
         * /anchor/update [POST]
         */
        async anchorUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchor/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AnchorToJSON)(requestParameters.anchor)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorFromJSON)(jsonValue));
        }
        /**
         * This will update a specific anchor.
         * /anchor/update [POST]
         */
        async anchorUpdate(requestParameters) {
          const response = await this.anchorUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnchorApi = AnchorApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorPointApi.js
  var require_AnchorPointApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorPointApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorPointApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnchorPointApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/anchor_point/{anchor_point}/scores/increment\' [POST]
         */
        async anchorPointScoresIncrementRaw(requestParameters) {
          if (requestParameters.anchorPoint === null || requestParameters.anchorPoint === void 0) {
            throw new runtime.RequiredError("anchorPoint", "Required parameter requestParameters.anchorPoint was null or undefined when calling anchorPointScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchor_point/{anchor_point}/scores/increment`.replace(`{${"anchor_point"}}`, encodeURIComponent(String(requestParameters.anchorPoint))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/anchor_point/{anchor_point}/scores/increment\' [POST]
         */
        async anchorPointScoresIncrement(requestParameters) {
          await this.anchorPointScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a snapshot of a single anchorPoint.
         * /anchor_point/{anchor_point} [GET]
         */
        async anchorPointSpecificAnchorPointSnapshotRaw(requestParameters) {
          if (requestParameters.anchorPoint === null || requestParameters.anchorPoint === void 0) {
            throw new runtime.RequiredError("anchorPoint", "Required parameter requestParameters.anchorPoint was null or undefined when calling anchorPointSpecificAnchorPointSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/anchor_point/{anchor_point}`.replace(`{${"anchor_point"}}`, encodeURIComponent(String(requestParameters.anchorPoint))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorPointFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a single anchorPoint.
         * /anchor_point/{anchor_point} [GET]
         */
        async anchorPointSpecificAnchorPointSnapshot(requestParameters) {
          const response = await this.anchorPointSpecificAnchorPointSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific anchorPoint.
         * /anchor_point/update [POST]
         */
        async anchorPointUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchor_point/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AnchorPointToJSON)(requestParameters.anchorPoint)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorPointFromJSON)(jsonValue));
        }
        /**
         * This will update a specific anchorPoint.
         * /anchor_point/update [POST]
         */
        async anchorPointUpdate(requestParameters) {
          const response = await this.anchorPointUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnchorPointApi = AnchorPointApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorPointsApi.js
  var require_AnchorPointsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorPointsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorPointsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnchorPointsApi = class extends runtime.BaseAPI {
        /**
         * This will create a anchorPoint.
         * /anchor_points/create [POST]
         */
        async anchorPointsCreateNewAnchorPointRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchor_points/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAnchorPointToJSON)(requestParameters.seededAnchorPoint)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorPointFromJSON)(jsonValue));
        }
        /**
         * This will create a anchorPoint.
         * /anchor_points/create [POST]
         */
        async anchorPointsCreateNewAnchorPoint(requestParameters) {
          const response = await this.anchorPointsCreateNewAnchorPointRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific anchorPoint!
         * /anchor_points/{anchor_point}/delete [POST]
         */
        async anchorPointsDeleteSpecificAnchorPointRaw(requestParameters) {
          if (requestParameters.anchorPoint === null || requestParameters.anchorPoint === void 0) {
            throw new runtime.RequiredError("anchorPoint", "Required parameter requestParameters.anchorPoint was null or undefined when calling anchorPointsDeleteSpecificAnchorPoint.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/anchor_points/{anchor_point}/delete`.replace(`{${"anchor_point"}}`, encodeURIComponent(String(requestParameters.anchorPoint))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific anchorPoint!
         * /anchor_points/{anchor_point}/delete [POST]
         */
        async anchorPointsDeleteSpecificAnchorPoint(requestParameters) {
          await this.anchorPointsDeleteSpecificAnchorPointRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all your anchorPoints.
         * /anchor_points [GET]
         */
        async anchorPointsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/anchor_points`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorPointsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all your anchorPoints.
         * /anchor_points [GET]
         */
        async anchorPointsSnapshot(requestParameters) {
          const response = await this.anchorPointsSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnchorPointsApi = AnchorPointsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorsApi.js
  var require_AnchorsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnchorsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnchorsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnchorsApi = class extends runtime.BaseAPI {
        /**
         * This will update both the asset and the anchor reference, that will remove a anchor from an asset(only the references).  This will NOT remove the anchor. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
         * /anchors/{anchor}/assets/delete/{asset} [POST]
         */
        async anchorDisassociateAssetRaw(requestParameters) {
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling anchorDisassociateAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling anchorDisassociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/anchors/{anchor}/assets/delete/{asset}`.replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the asset and the anchor reference, that will remove a anchor from an asset(only the references).  This will NOT remove the anchor. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
         * /anchors/{anchor}/assets/delete/{asset} [POST]
         */
        async anchorDisassociateAsset(requestParameters) {
          await this.anchorDisassociateAssetRaw(requestParameters);
        }
        /**
         * This will create a anchor and attach it to a specific asset(s) This will also ensure the anchor is normalized.
         * /anchors/create [POST]
         */
        async anchorsCreateNewAnchorRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/anchors/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAnchorToJSON)(requestParameters.seededAnchor)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorFromJSON)(jsonValue));
        }
        /**
         * This will create a anchor and attach it to a specific asset(s) This will also ensure the anchor is normalized.
         * /anchors/create [POST]
         */
        async anchorsCreateNewAnchor(requestParameters) {
          const response = await this.anchorsCreateNewAnchorRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific anchor!
         * /anchors/{anchor}/delete [POST]
         */
        async anchorsDeleteSpecificAnchorRaw(requestParameters) {
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling anchorsDeleteSpecificAnchor.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/anchors/{anchor}/delete`.replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific anchor!
         * /anchors/{anchor}/delete [POST]
         */
        async anchorsDeleteSpecificAnchor(requestParameters) {
          await this.anchorsDeleteSpecificAnchorRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all your anchors.
         * /anchors [GET]
         */
        async anchorsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/anchors`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnchorsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all your anchors.
         * /anchors [GET]
         */
        async anchorsSnapshot(requestParameters) {
          const response = await this.anchorsSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnchorsApi = AnchorsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnnotationApi.js
  var require_AnnotationApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnnotationApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnnotationApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnnotationApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/annotation/{annotation}/scores/increment\' [POST]
         */
        async annotationScoresIncrementRaw(requestParameters) {
          if (requestParameters.annotation === null || requestParameters.annotation === void 0) {
            throw new runtime.RequiredError("annotation", "Required parameter requestParameters.annotation was null or undefined when calling annotationScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/annotation/{annotation}/scores/increment`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/annotation/{annotation}/scores/increment\' [POST]
         */
        async annotationScoresIncrement(requestParameters) {
          await this.annotationScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a snapshot of a specific annotation.
         * /annotation/{annotation} [GET]
         */
        async annotationSpecificAnnotationSnapshotRaw(requestParameters) {
          if (requestParameters.annotation === null || requestParameters.annotation === void 0) {
            throw new runtime.RequiredError("annotation", "Required parameter requestParameters.annotation was null or undefined when calling annotationSpecificAnnotationSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/annotation/{annotation}`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a specific annotation.
         * /annotation/{annotation} [GET]
         */
        async annotationSpecificAnnotationSnapshot(requestParameters) {
          const response = await this.annotationSpecificAnnotationSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific annotation.
         * /annotation/update [POST]
         */
        async annotationUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/annotation/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AnnotationToJSON)(requestParameters.annotation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationFromJSON)(jsonValue));
        }
        /**
         * This will update a specific annotation.
         * /annotation/update [POST]
         */
        async annotationUpdate(requestParameters) {
          const response = await this.annotationUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnnotationApi = AnnotationApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AnnotationsApi.js
  var require_AnnotationsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AnnotationsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AnnotationsSnapshotAnnotationTypeFilterEnum = exports.AnnotationsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AnnotationsApi = class extends runtime.BaseAPI {
        /**
         * This will create an annotation.
         * /annotations/create [POST]
         */
        async annotationsCreateNewAnnotationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/annotations/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAnnotationToJSON)(requestParameters.seededAnnotation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationFromJSON)(jsonValue));
        }
        /**
         * This will create an annotation.
         * /annotations/create [POST]
         */
        async annotationsCreateNewAnnotation(requestParameters) {
          const response = await this.annotationsCreateNewAnnotationRaw(requestParameters);
          return await response.value();
        }
        /**
         * this will delete a specific annotation
         * /annotations/{annotation}/delete [POST]
         */
        async annotationsDeleteSpecificAnnotationRaw(requestParameters) {
          if (requestParameters.annotation === null || requestParameters.annotation === void 0) {
            throw new runtime.RequiredError("annotation", "Required parameter requestParameters.annotation was null or undefined when calling annotationsDeleteSpecificAnnotation.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/annotations/{annotation}/delete`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * this will delete a specific annotation
         * /annotations/{annotation}/delete [POST]
         */
        async annotationsDeleteSpecificAnnotation(requestParameters) {
          await this.annotationsDeleteSpecificAnnotationRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
         * /annotations [GET]
         */
        async annotationsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.annotationTypeFilter !== void 0) {
            queryParameters["annotation_type_filter"] = requestParameters.annotationTypeFilter;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/annotations`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
         * /annotations [GET]
         */
        async annotationsSnapshot(requestParameters) {
          const response = await this.annotationsSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AnnotationsApi = AnnotationsApi;
      var AnnotationsSnapshotAnnotationTypeFilterEnum;
      (function(AnnotationsSnapshotAnnotationTypeFilterEnum2) {
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Description"] = "DESCRIPTION";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Comment"] = "COMMENT";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Commentation"] = "COMMENTATION";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Documentation"] = "DOCUMENTATION";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Summarization"] = "SUMMARIZATION";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Summary"] = "SUMMARY";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["Explanation"] = "EXPLANATION";
        AnnotationsSnapshotAnnotationTypeFilterEnum2["GitCommit"] = "GIT_COMMIT";
      })(AnnotationsSnapshotAnnotationTypeFilterEnum || (exports.AnnotationsSnapshotAnnotationTypeFilterEnum = AnnotationsSnapshotAnnotationTypeFilterEnum = {}));
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ApplicationApi.js
  var require_ApplicationApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ApplicationApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ApplicationApi = class extends runtime.BaseAPI {
        /**
         * This is an endpoint for updating an application.
         * /application/update [GET]
         */
        async applicationUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/application/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplicationToJSON)(requestParameters.application)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationFromJSON)(jsonValue));
        }
        /**
         * This is an endpoint for updating an application.
         * /application/update [GET]
         */
        async applicationUpdate(requestParameters) {
          const response = await this.applicationUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ApplicationApi = ApplicationApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ApplicationsApi.js
  var require_ApplicationsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ApplicationsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ApplicationsApi = class extends runtime.BaseAPI {
        /**
         * This will register a connected applicaiton.
         * /applications/register [POST]
         */
        async applicationsRegisterRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/register`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplicationToJSON)(requestParameters.application)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationFromJSON)(jsonValue));
        }
        /**
         * This will register a connected applicaiton.
         * /applications/register [POST]
         */
        async applicationsRegister(requestParameters) {
          const response = await this.applicationsRegisterRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will close your opened session! Going to want to accept a session uuid here.
         * /applications/session/close [POST]
         */
        async applicationsSessionCloseRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/session/close`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
        }
        /**
         * This will close your opened session! Going to want to accept a session uuid here.
         * /applications/session/close [POST]
         */
        async applicationsSessionClose(requestParameters) {
          const response = await this.applicationsSessionCloseRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will open a new session. A session is when someone is using the pieces application.
         * /applications/session/open [POST]
         */
        async applicationsSessionOpenRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/applications/session/open`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
        }
        /**
         * This will open a new session. A session is when someone is using the pieces application.
         * /applications/session/open [POST]
         */
        async applicationsSessionOpen() {
          const response = await this.applicationsSessionOpenRaw();
          return await response.value();
        }
        /**
         * This is an endpoint to get a snapshot of a specific session.
         * /applications/sessions/{session} [GET]
         */
        async applicationsSessionSnapshotRaw(requestParameters) {
          if (requestParameters.session === null || requestParameters.session === void 0) {
            throw new runtime.RequiredError("session", "Required parameter requestParameters.session was null or undefined when calling applicationsSessionSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/applications/sessions/{session}`.replace(`{${"session"}}`, encodeURIComponent(String(requestParameters.session))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
        }
        /**
         * This is an endpoint to get a snapshot of a specific session.
         * /applications/sessions/{session} [GET]
         */
        async applicationsSessionSnapshot(requestParameters) {
          const response = await this.applicationsSessionSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * /applications [GET]
         */
        async applicationsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/applications`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationsFromJSON)(jsonValue));
        }
        /**
         * /applications [GET]
         */
        async applicationsSnapshot() {
          const response = await this.applicationsSnapshotRaw();
          return await response.value();
        }
        /**
         * This will retrieve snapshot of a single application.
         * /applications/{application} [GET]
         */
        async applicationsSpecificApplicationSnapshotRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling applicationsSpecificApplicationSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationFromJSON)(jsonValue));
        }
        /**
         * This will retrieve snapshot of a single application.
         * /applications/{application} [GET]
         */
        async applicationsSpecificApplicationSnapshot(requestParameters) {
          const response = await this.applicationsSpecificApplicationSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
         * /applications/usage/engagement/interaction [POST] Scoped to Apps
         */
        async applicationsUsageEngagementInteractionRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/usage/engagement/interaction`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTrackedInteractionEventToJSON)(requestParameters.seededTrackedInteractionEvent)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackedInteractionEventFromJSON)(jsonValue));
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
         * /applications/usage/engagement/interaction [POST] Scoped to Apps
         */
        async applicationsUsageEngagementInteraction(requestParameters) {
          const response = await this.applicationsUsageEngagementInteractionRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
         * /applications/usage/engagement/keyboard [POST] Scoped to Apps
         */
        async applicationsUsageEngagementKeyboardRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/usage/engagement/keyboard`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTrackedKeyboardEventToJSON)(requestParameters.seededTrackedKeyboardEvent)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackedKeyboardEventFromJSON)(jsonValue));
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
         * /applications/usage/engagement/keyboard [POST] Scoped to Apps
         */
        async applicationsUsageEngagementKeyboard(requestParameters) {
          const response = await this.applicationsUsageEngagementKeyboardRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
         * /applications/usage/installation [POST]
         */
        async applicationsUsageInstallationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/usage/installation`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TrackedApplicationInstallToJSON)(requestParameters.trackedApplicationInstall)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
         * /applications/usage/installation [POST]
         */
        async applicationsUsageInstallation(requestParameters) {
          await this.applicationsUsageInstallationRaw(requestParameters);
        }
        /**
         * This is an endpoint to determine when an application has been updated
         * /applications/usage/updated [POST]
         */
        async postApplicationsUsageUpdatedRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/applications/usage/updated`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TrackedApplicationUpdateToJSON)(requestParameters.trackedApplicationUpdate)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This is an endpoint to determine when an application has been updated
         * /applications/usage/updated [POST]
         */
        async postApplicationsUsageUpdated(requestParameters) {
          await this.postApplicationsUsageUpdatedRaw(requestParameters);
        }
      };
      exports.ApplicationsApi = ApplicationsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AssetApi.js
  var require_AssetApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AssetApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetSpecificAssetExportExportTypeEnum = exports.AssetApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AssetApi = class extends runtime.BaseAPI {
        /**
         * This will associate a tag with a asset. This will do the same thing as the tag equivilant.
         * /asset/{asset}/tags/associate/{tag} [POST]
         */
        async assetAssociateTagRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetAssociateTag.");
          }
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling assetAssociateTag.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/tags/associate/{tag}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a tag with a asset. This will do the same thing as the tag equivilant.
         * /asset/{asset}/tags/associate/{tag} [POST]
         */
        async assetAssociateTag(requestParameters) {
          await this.assetAssociateTagRaw(requestParameters);
        }
        /**
         * This will associate a website with a asset. This will do the same thing as the website equivilant.
         * /asset/{asset}/websites/associate/{website} [POST]
         */
        async assetAssociateWebsiteRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetAssociateWebsite.");
          }
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling assetAssociateWebsite.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/websites/associate/{website}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a website with a asset. This will do the same thing as the website equivilant.
         * /asset/{asset}/websites/associate/{website} [POST]
         */
        async assetAssociateWebsite(requestParameters) {
          await this.assetAssociateWebsiteRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a tag from a asset. This will do the same thing as the tag equivilant.
         * /asset/{asset}/tags/disassociate/{tag} [POST]
         */
        async assetDisassociateTagRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling assetDisassociateTag.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetDisassociateTag.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/tags/disassociate/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a tag from a asset. This will do the same thing as the tag equivilant.
         * /asset/{asset}/tags/disassociate/{tag} [POST]
         */
        async assetDisassociateTag(requestParameters) {
          await this.assetDisassociateTagRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a website from a asset. This will do the same thing as the website equivilant.
         * /asset/{asset}/websites/disassociate/{website} [POST]
         */
        async assetDisassociateWebsiteRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling assetDisassociateWebsite.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetDisassociateWebsite.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/websites/disassociate/{website}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a website from a asset. This will do the same thing as the website equivilant.
         * /asset/{asset}/websites/disassociate/{website} [POST]
         */
        async assetDisassociateWebsite(requestParameters) {
          await this.assetDisassociateWebsiteRaw(requestParameters);
        }
        /**
         * Get the formats for a given asset.
         * /asset/{asset}/formats [GET] Scoped To Asset
         */
        async assetFormatsRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetFormats.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/formats`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatsFromJSON)(jsonValue));
        }
        /**
         * Get the formats for a given asset.
         * /asset/{asset}/formats [GET] Scoped To Asset
         */
        async assetFormats(requestParameters) {
          const response = await this.assetFormatsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update the classification of this asset to the proper classification.
         * /asset/reclassify [POST]
         */
        async assetReclassifyRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/asset/reclassify`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetReclassificationToJSON)(requestParameters.assetReclassification)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * This will update the classification of this asset to the proper classification.
         * /asset/reclassify [POST]
         */
        async assetReclassify(requestParameters) {
          const response = await this.assetReclassifyRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/asset/{asset}/scores/increment\' [POST]
         */
        async assetScoresIncrementRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/asset/{asset}/scores/increment`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/asset/{asset}/scores/increment\' [POST]
         */
        async assetScoresIncrement(requestParameters) {
          await this.assetScoresIncrementRaw(requestParameters);
        }
        /**
         * Get the snapshot of a specific asset.
         * /asset/{asset} [GET] Scoped To Asset
         */
        async assetSnapshotRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * Get the snapshot of a specific asset.
         * /asset/{asset} [GET] Scoped To Asset
         */
        async assetSnapshot(requestParameters) {
          const response = await this.assetSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * Get the snapshot of a specific asset. by passing over as well the user who is getting the snapshot.
         * /asset/{asset} [POST] Scoped to an Asset
         */
        async assetSnapshotPostRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetSnapshotPost.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAccessorToJSON)(requestParameters.seededAccessor)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * Get the snapshot of a specific asset. by passing over as well the user who is getting the snapshot.
         * /asset/{asset} [POST] Scoped to an Asset
         */
        async assetSnapshotPost(requestParameters) {
          const response = await this.assetSnapshotPostRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a specific asset\'s conversations
         * /asset/{asset}/conversations [GET]
         */
        async assetSpecificAssetConversationsRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetSpecificAssetConversations.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/conversations`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationsFromJSON)(jsonValue));
        }
        /**
         * This will get a specific asset\'s conversations
         * /asset/{asset}/conversations [GET]
         */
        async assetSpecificAssetConversations(requestParameters) {
          const response = await this.assetSpecificAssetConversationsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will return a export version of your asset.
         * [GET] /asset/{asset}/export
         */
        async assetSpecificAssetExportRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetSpecificAssetExport.");
          }
          if (requestParameters.exportType === null || requestParameters.exportType === void 0) {
            throw new runtime.RequiredError("exportType", "Required parameter requestParameters.exportType was null or undefined when calling assetSpecificAssetExport.");
          }
          const queryParameters = {};
          if (requestParameters.exportType !== void 0) {
            queryParameters["export_type"] = requestParameters.exportType;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/asset/{asset}/export`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExportedAssetFromJSON)(jsonValue));
        }
        /**
         * This will return a export version of your asset.
         * [GET] /asset/{asset}/export
         */
        async assetSpecificAssetExport(requestParameters) {
          const response = await this.assetSpecificAssetExportRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will accept an Asset that the user wants to update, and will return the a full Asset that was updated!
         * /asset/update [POST] Scoped to Asset
         */
        async assetUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/asset/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetToJSON)(requestParameters.asset)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * This endpoint will accept an Asset that the user wants to update, and will return the a full Asset that was updated!
         * /asset/update [POST] Scoped to Asset
         */
        async assetUpdate(requestParameters) {
          const response = await this.assetUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.AssetApi = AssetApi;
      var AssetSpecificAssetExportExportTypeEnum;
      (function(AssetSpecificAssetExportExportTypeEnum2) {
        AssetSpecificAssetExportExportTypeEnum2["Html"] = "HTML";
        AssetSpecificAssetExportExportTypeEnum2["Md"] = "MD";
      })(AssetSpecificAssetExportExportTypeEnum || (exports.AssetSpecificAssetExportExportTypeEnum = AssetSpecificAssetExportExportTypeEnum = {}));
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/AssetsApi.js
  var require_AssetsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/AssetsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssetsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var AssetsApi = class extends runtime.BaseAPI {
        /**
         * This endpoint will accept a seeded (a structure that comes before an asset, will be used in creation) asset to be uploaded to pieces. Response here will be an Asset that was create!
         * /assets/create [POST] Scoped to Asset
         */
        async assetsCreateNewAssetRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/assets/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeedToJSON)(requestParameters.seed)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * This endpoint will accept a seeded (a structure that comes before an asset, will be used in creation) asset to be uploaded to pieces. Response here will be an Asset that was create!
         * /assets/create [POST] Scoped to Asset
         */
        async assetsCreateNewAsset(requestParameters) {
          const response = await this.assetsCreateNewAssetRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will just take a uid to delete out of the assets table, will return the uid that was deleted.
         * /assets/delete [POST] Scoped to Asset
         */
        async assetsDeleteAssetRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetsDeleteAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/{asset}/delete`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This endpoint will just take a uid to delete out of the assets table, will return the uid that was deleted.
         * /assets/delete [POST] Scoped to Asset
         */
        async assetsDeleteAsset(requestParameters) {
          const response = await this.assetsDeleteAssetRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an endpoint that will enable a developer to pass in a Seed and get a seed with preprocessed information on that seed out of this endpoint, nothing is persisted, this is a strict input/output endpoint. and return a drafted asset (seed with some initial information).  for images, we will just return the seed that was passed to us. a TODO for v2 would eb to add preprocessing for images as well.
         * /assets/draft [POST]
         */
        async assetsDraftRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/assets/draft`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeedToJSON)(requestParameters.seed)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SeedFromJSON)(jsonValue));
        }
        /**
         * This is an endpoint that will enable a developer to pass in a Seed and get a seed with preprocessed information on that seed out of this endpoint, nothing is persisted, this is a strict input/output endpoint. and return a drafted asset (seed with some initial information).  for images, we will just return the seed that was passed to us. a TODO for v2 would eb to add preprocessing for images as well.
         * /assets/draft [POST]
         */
        async assetsDraft(requestParameters) {
          const response = await this.assetsDraftRaw(requestParameters);
          return await response.value();
        }
        /**
         * An endpoint that takes in a SeededAssetsRecommendation Model within it\'s request body, which requires an object including assets (Assets Model) as well as interactions (InteractedAssets Model) - the resulting will return an Assets Model for use in a UI.
         * Your GET endpoint
         */
        async assetsGetRecommendedAssetsRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/assets/recommended`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAssetsRecommendationToJSON)(requestParameters.seededAssetsRecommendation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsFromJSON)(jsonValue));
        }
        /**
         * An endpoint that takes in a SeededAssetsRecommendation Model within it\'s request body, which requires an object including assets (Assets Model) as well as interactions (InteractedAssets Model) - the resulting will return an Assets Model for use in a UI.
         * Your GET endpoint
         */
        async assetsGetRecommendedAssets(requestParameters) {
          const response = await this.assetsGetRecommendedAssetsRaw(requestParameters);
          return await response.value();
        }
        /**
         * Gets one or more related assets when provided one or more input assets. The body will expect the shape of
         * /assets/related [GET]
         */
        async assetsGetRelatedAssetsRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/assets/related`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetsToJSON)(requestParameters.assets)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsFromJSON)(jsonValue));
        }
        /**
         * Gets one or more related assets when provided one or more input assets. The body will expect the shape of
         * /assets/related [GET]
         */
        async assetsGetRelatedAssets(requestParameters) {
          const response = await this.assetsGetRelatedAssetsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get all of your asset ids
         * /assets/identifiers [GET]
         */
        async assetsIdentifiersSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/identifiers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FlattenedAssetsFromJSON)(jsonValue));
        }
        /**
         * This will get all of your asset ids
         * /assets/identifiers [GET]
         */
        async assetsIdentifiersSnapshot(requestParameters) {
          const response = await this.assetsIdentifiersSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a snapshot of ONLY the pseudo Assets included in your Pieces drive.
         * /assets/pseudo [GET]
         */
        async assetsPseudoSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/pseudo`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PseudoAssetsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of ONLY the pseudo Assets included in your Pieces drive.
         * /assets/pseudo [GET]
         */
        async assetsPseudoSnapshot() {
          const response = await this.assetsPseudoSnapshotRaw();
          return await response.value();
        }
        /**
         * This function will search your pieces and will return Assets(the results) based on your query! Eventually** /assets/search?query=string [GET] Scoped to Asset  Currently just send along your query in the body.  Required to pass searchable_tags (csv of tags) or a query string.  if a query is passed we will run through fuzzy search.  if searchable_tags are passed we will run through tag_based_search.  if neither are passed in we will return a 500.
         * /assets/search?query=string [GET]
         */
        async assetsSearchAssetsRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.query !== void 0) {
            queryParameters["query"] = requestParameters.query;
          }
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          if (requestParameters.searchableTags !== void 0) {
            queryParameters["searchable_tags"] = requestParameters.searchableTags;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/search`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SearchedAssetsFromJSON)(jsonValue));
        }
        /**
         * This function will search your pieces and will return Assets(the results) based on your query! Eventually** /assets/search?query=string [GET] Scoped to Asset  Currently just send along your query in the body.  Required to pass searchable_tags (csv of tags) or a query string.  if a query is passed we will run through fuzzy search.  if searchable_tags are passed we will run through tag_based_search.  if neither are passed in we will return a 500.
         * /assets/search?query=string [GET]
         */
        async assetsSearchAssets(requestParameters) {
          const response = await this.assetsSearchAssetsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This function will search your pieces and will return Assets(the results) based on your query! /assets/search [POST] Scoped to Asset  Currently just send along your query in the body.  if a query is passed we will run through fuzzy search.  The Post Body will also accept a search space, being either a list of uuids.(in the future potentially Seeds.) The Post Body will also accept optional filters, which is an iterable of filters all will be AND operations for now.
         * /assets/search [POST]
         */
        async assetsSearchWithFiltersRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/assets/search`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetsSearchWithFiltersInputToJSON)(requestParameters.assetsSearchWithFiltersInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsSearchWithFiltersOutputFromJSON)(jsonValue));
        }
        /**
         * This function will search your pieces and will return Assets(the results) based on your query! /assets/search [POST] Scoped to Asset  Currently just send along your query in the body.  if a query is passed we will run through fuzzy search.  The Post Body will also accept a search space, being either a list of uuids.(in the future potentially Seeds.) The Post Body will also accept optional filters, which is an iterable of filters all will be AND operations for now.
         * /assets/search [POST]
         */
        async assetsSearchWithFilters(requestParameters) {
          const response = await this.assetsSearchWithFiltersRaw(requestParameters);
          return await response.value();
        }
        /**
         * Get all of the users Assets.
         * /assets [GET] Scoped to Assets
         */
        async assetsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          if (requestParameters.suggested !== void 0) {
            queryParameters["suggested"] = requestParameters.suggested;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/assets`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsFromJSON)(jsonValue));
        }
        /**
         * Get all of the users Assets.
         * /assets [GET] Scoped to Assets
         */
        async assetsSnapshot(requestParameters) {
          const response = await this.assetsSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will query the formats for agiven asset when provided that asset\'s id.
         * /assets/{asset}/formats [GET] Scoped To Assets
         */
        async assetsSpecificAssetFormatsSnapshotRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetsSpecificAssetFormatsSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/{asset}/formats`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatsFromJSON)(jsonValue));
        }
        /**
         * This will query the formats for agiven asset when provided that asset\'s id.
         * /assets/{asset}/formats [GET] Scoped To Assets
         */
        async assetsSpecificAssetFormatsSnapshot(requestParameters) {
          const response = await this.assetsSpecificAssetFormatsSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an endpoint to enable a client to access a specific asset through a provided uuid in the path.
         * /assets/{asset} [GET] Scoped to Assets
         */
        async assetsSpecificAssetSnapshotRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling assetsSpecificAssetSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * This is an endpoint to enable a client to access a specific asset through a provided uuid in the path.
         * /assets/{asset} [GET] Scoped to Assets
         */
        async assetsSpecificAssetSnapshot(requestParameters) {
          const response = await this.assetsSpecificAssetSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will stream the asset identifiers(uuids) that have changed via a websocket connection.
         * /assets/stream/identifiers [GET]
         */
        async assetsStreamIdentifiersRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/stream/identifiers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StreamedIdentifiersFromJSON)(jsonValue));
        }
        /**
         * This will stream the asset identifiers(uuids) that have changed via a websocket connection.
         * /assets/stream/identifiers [GET]
         */
        async assetsStreamIdentifiers() {
          const response = await this.assetsStreamIdentifiersRaw();
          return await response.value();
        }
        /**
         * This will emit changes of your assets with your transferables included. This is a websocket connection.
         * Your GET endpoint
         */
        async getAssetsStreamTransferablesRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/stream/transferables`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsFromJSON)(jsonValue));
        }
        /**
         * This will emit changes of your assets with your transferables included. This is a websocket connection.
         * Your GET endpoint
         */
        async getAssetsStreamTransferables() {
          const response = await this.getAssetsStreamTransferablesRaw();
          return await response.value();
        }
        /**
         * *** IMPORTANT this stream will emit changes WITHOUT the transferables on a format. if you want transferables included please refer to /assets/stream/transferables
         * /assets/stream [GET]
         */
        async streamAssetsRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/assets/stream`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetsFromJSON)(jsonValue));
        }
        /**
         * *** IMPORTANT this stream will emit changes WITHOUT the transferables on a format. if you want transferables included please refer to /assets/stream/transferables
         * /assets/stream [GET]
         */
        async streamAssets() {
          const response = await this.streamAssetsRaw();
          return await response.value();
        }
      };
      exports.AssetsApi = AssetsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/Auth0Api.js
  var require_Auth0Api = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/Auth0Api.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExchangeForAuth0TokenGrantTypeEnum = exports.AuthorizeAuth0ResponseModeEnum = exports.AuthorizeAuth0CodeChallengeMethodEnum = exports.AuthorizeAuth0ResponseTypeEnum = exports.AuthorizeAuth0ScopeEnum = exports.Auth0Api = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var Auth0Api = class extends runtime.BaseAPI {
        /**
         * https://auth0.com/docs/api/authentication#logout
         * https://auth.pieces.services/v2/logout [GET]
         */
        async auth0LogoutRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.clientId !== void 0) {
            queryParameters["client_id"] = requestParameters.clientId;
          }
          if (requestParameters.returnTo !== void 0) {
            queryParameters["returnTo"] = requestParameters.returnTo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/v2/logout`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * https://auth0.com/docs/api/authentication#logout
         * https://auth.pieces.services/v2/logout [GET]
         */
        async auth0Logout(requestParameters) {
          const response = await this.auth0LogoutRaw(requestParameters);
          return await response.value();
        }
        /**
         * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
         * https://auth.pieces.services/authorize [GET]
         */
        async authorizeAuth0Raw(requestParameters) {
          if (requestParameters.audience === null || requestParameters.audience === void 0) {
            throw new runtime.RequiredError("audience", "Required parameter requestParameters.audience was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.scope === null || requestParameters.scope === void 0) {
            throw new runtime.RequiredError("scope", "Required parameter requestParameters.scope was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.responseType === null || requestParameters.responseType === void 0) {
            throw new runtime.RequiredError("responseType", "Required parameter requestParameters.responseType was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.clientId === null || requestParameters.clientId === void 0) {
            throw new runtime.RequiredError("clientId", "Required parameter requestParameters.clientId was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.codeChallengeMethod === null || requestParameters.codeChallengeMethod === void 0) {
            throw new runtime.RequiredError("codeChallengeMethod", "Required parameter requestParameters.codeChallengeMethod was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.codeChallenge === null || requestParameters.codeChallenge === void 0) {
            throw new runtime.RequiredError("codeChallenge", "Required parameter requestParameters.codeChallenge was null or undefined when calling authorizeAuth0.");
          }
          if (requestParameters.responseMode === null || requestParameters.responseMode === void 0) {
            throw new runtime.RequiredError("responseMode", "Required parameter requestParameters.responseMode was null or undefined when calling authorizeAuth0.");
          }
          const queryParameters = {};
          if (requestParameters.audience !== void 0) {
            queryParameters["audience"] = requestParameters.audience;
          }
          if (requestParameters.scope) {
            queryParameters["scope"] = requestParameters.scope.join(runtime.COLLECTION_FORMATS["ssv"]);
          }
          if (requestParameters.responseType !== void 0) {
            queryParameters["response_type"] = requestParameters.responseType;
          }
          if (requestParameters.clientId !== void 0) {
            queryParameters["client_id"] = requestParameters.clientId;
          }
          if (requestParameters.state !== void 0) {
            queryParameters["state"] = requestParameters.state;
          }
          if (requestParameters.redirectUri !== void 0) {
            queryParameters["redirect_uri"] = requestParameters.redirectUri;
          }
          if (requestParameters.codeChallengeMethod !== void 0) {
            queryParameters["code_challenge_method"] = requestParameters.codeChallengeMethod;
          }
          if (requestParameters.codeChallenge !== void 0) {
            queryParameters["code_challenge"] = requestParameters.codeChallenge;
          }
          if (requestParameters.connection !== void 0) {
            queryParameters["connection"] = requestParameters.connection;
          }
          if (requestParameters.prompt !== void 0) {
            queryParameters["prompt"] = requestParameters.prompt;
          }
          if (requestParameters.responseMode !== void 0) {
            queryParameters["response_mode"] = requestParameters.responseMode;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/authorize`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ResultedPKCEFromJSON)(jsonValue));
        }
        /**
         * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
         * https://auth.pieces.services/authorize [GET]
         */
        async authorizeAuth0(requestParameters) {
          const response = await this.authorizeAuth0Raw(requestParameters);
          return await response.value();
        }
        /**
         * An endpoint to generate a OAuth Token for an authentication flow.
         * https://auth.pieces.services/oauth/token [POST]
         */
        async exchangeForAuth0TokenRaw(requestParameters) {
          if (requestParameters.grantType === null || requestParameters.grantType === void 0) {
            throw new runtime.RequiredError("grantType", "Required parameter requestParameters.grantType was null or undefined when calling exchangeForAuth0Token.");
          }
          if (requestParameters.clientId === null || requestParameters.clientId === void 0) {
            throw new runtime.RequiredError("clientId", "Required parameter requestParameters.clientId was null or undefined when calling exchangeForAuth0Token.");
          }
          if (requestParameters.code === null || requestParameters.code === void 0) {
            throw new runtime.RequiredError("code", "Required parameter requestParameters.code was null or undefined when calling exchangeForAuth0Token.");
          }
          if (requestParameters.redirectUri === null || requestParameters.redirectUri === void 0) {
            throw new runtime.RequiredError("redirectUri", "Required parameter requestParameters.redirectUri was null or undefined when calling exchangeForAuth0Token.");
          }
          if (requestParameters.codeVerifier === null || requestParameters.codeVerifier === void 0) {
            throw new runtime.RequiredError("codeVerifier", "Required parameter requestParameters.codeVerifier was null or undefined when calling exchangeForAuth0Token.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const consumes = [
            { contentType: "application/x-www-form-urlencoded" }
          ];
          const canConsumeForm = runtime.canConsumeForm(consumes);
          let formParams;
          let useForm = false;
          if (useForm) {
            formParams = new FormData();
          } else {
            formParams = new URLSearchParams();
          }
          if (requestParameters.schema !== void 0) {
            formParams.append("schema", new Blob([JSON.stringify((0, models_1.EmbeddedModelSchemaToJSON)(requestParameters.schema))], { type: "application/json" }));
          }
          if (requestParameters.grantType !== void 0) {
            formParams.append("grant_type", requestParameters.grantType);
          }
          if (requestParameters.clientId !== void 0) {
            formParams.append("client_id", requestParameters.clientId);
          }
          if (requestParameters.code !== void 0) {
            formParams.append("code", requestParameters.code);
          }
          if (requestParameters.redirectUri !== void 0) {
            formParams.append("redirect_uri", requestParameters.redirectUri);
          }
          if (requestParameters.codeVerifier !== void 0) {
            formParams.append("code_verifier", requestParameters.codeVerifier);
          }
          if (requestParameters.audience !== void 0) {
            formParams.append("audience", requestParameters.audience);
          }
          const response = await this.request({
            path: `/oauth/token`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OAuthTokenFromJSON)(jsonValue));
        }
        /**
         * An endpoint to generate a OAuth Token for an authentication flow.
         * https://auth.pieces.services/oauth/token [POST]
         */
        async exchangeForAuth0Token(requestParameters) {
          const response = await this.exchangeForAuth0TokenRaw(requestParameters);
          return await response.value();
        }
        /**
         * Get the users info from the Auth0 API
         * https://auth.pieces.services/userinfo [GET]
         */
        async getAuth0UserInfoRaw() {
          const queryParameters = {};
          const headerParameters = {};
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          const response = await this.request({
            path: `/userinfo`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.Auth0UserFromJSON)(jsonValue));
        }
        /**
         * Get the users info from the Auth0 API
         * https://auth.pieces.services/userinfo [GET]
         */
        async getAuth0UserInfo() {
          const response = await this.getAuth0UserInfoRaw();
          return await response.value();
        }
      };
      exports.Auth0Api = Auth0Api;
      var AuthorizeAuth0ScopeEnum;
      (function(AuthorizeAuth0ScopeEnum2) {
        AuthorizeAuth0ScopeEnum2["Openid"] = "openid";
        AuthorizeAuth0ScopeEnum2["Email"] = "email";
        AuthorizeAuth0ScopeEnum2["Profile"] = "profile";
        AuthorizeAuth0ScopeEnum2["OfflineAccess"] = "offline_access";
      })(AuthorizeAuth0ScopeEnum || (exports.AuthorizeAuth0ScopeEnum = AuthorizeAuth0ScopeEnum = {}));
      var AuthorizeAuth0ResponseTypeEnum;
      (function(AuthorizeAuth0ResponseTypeEnum2) {
        AuthorizeAuth0ResponseTypeEnum2["Code"] = "code";
      })(AuthorizeAuth0ResponseTypeEnum || (exports.AuthorizeAuth0ResponseTypeEnum = AuthorizeAuth0ResponseTypeEnum = {}));
      var AuthorizeAuth0CodeChallengeMethodEnum;
      (function(AuthorizeAuth0CodeChallengeMethodEnum2) {
        AuthorizeAuth0CodeChallengeMethodEnum2["S256"] = "S256";
      })(AuthorizeAuth0CodeChallengeMethodEnum || (exports.AuthorizeAuth0CodeChallengeMethodEnum = AuthorizeAuth0CodeChallengeMethodEnum = {}));
      var AuthorizeAuth0ResponseModeEnum;
      (function(AuthorizeAuth0ResponseModeEnum2) {
        AuthorizeAuth0ResponseModeEnum2["FormPost"] = "form_post";
        AuthorizeAuth0ResponseModeEnum2["Fragment"] = "fragment";
        AuthorizeAuth0ResponseModeEnum2["Query"] = "query";
        AuthorizeAuth0ResponseModeEnum2["WebMessage"] = "web_message";
      })(AuthorizeAuth0ResponseModeEnum || (exports.AuthorizeAuth0ResponseModeEnum = AuthorizeAuth0ResponseModeEnum = {}));
      var ExchangeForAuth0TokenGrantTypeEnum;
      (function(ExchangeForAuth0TokenGrantTypeEnum2) {
        ExchangeForAuth0TokenGrantTypeEnum2["RefreshToken"] = "refresh_token";
        ExchangeForAuth0TokenGrantTypeEnum2["AuthorizationCode"] = "authorization_code";
      })(ExchangeForAuth0TokenGrantTypeEnum || (exports.ExchangeForAuth0TokenGrantTypeEnum = ExchangeForAuth0TokenGrantTypeEnum = {}));
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/BackupApi.js
  var require_BackupApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/BackupApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BackupApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var BackupApi = class extends runtime.BaseAPI {
        /**
         * /backup [POST]
         */
        async backupRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/backup`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetsToJSON)(requestParameters.assets)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * /backup [POST]
         */
        async backup(requestParameters) {
          await this.backupRaw(requestParameters);
        }
        /**
         * /backup/asset [POST]
         */
        async backupAssetRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/backup/asset`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AssetToJSON)(requestParameters.asset)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * /backup/asset [POST]
         */
        async backupAsset(requestParameters) {
          await this.backupAssetRaw(requestParameters);
        }
      };
      exports.BackupApi = BackupApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ClassificationApi.js
  var require_ClassificationApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ClassificationApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClassificationApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ClassificationApi = class extends runtime.BaseAPI {
        /**
         * This endpoint converts on a best effort basis from one generic format to another, i.e. from Code to HLJS
         * Convert Generic Classification
         */
        async convertGenericClassificationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/classification/generic/convert`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededFormatToJSON)(requestParameters.seededFormat)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SeededFormatFromJSON)(jsonValue));
        }
        /**
         * This endpoint converts on a best effort basis from one generic format to another, i.e. from Code to HLJS
         * Convert Generic Classification
         */
        async convertGenericClassification(requestParameters) {
          const response = await this.convertGenericClassificationRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ClassificationApi = ClassificationApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/CodeAnalysesApi.js
  var require_CodeAnalysesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/CodeAnalysesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeAnalysesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var CodeAnalysesApi = class extends runtime.BaseAPI {
        /**
         * This will get a snapshot of all of your code analyses, a code analysis is attached to an analysis.
         * Your GET endpoint
         */
        async codeAnalysesSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/code_analyses`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CodeAnalysesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your code analyses, a code analysis is attached to an analysis.
         * Your GET endpoint
         */
        async codeAnalysesSnapshot() {
          const response = await this.codeAnalysesSnapshotRaw();
          return await response.value();
        }
      };
      exports.CodeAnalysesApi = CodeAnalysesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ConnectorApi.js
  var require_ConnectorApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ConnectorApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConnectorApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ConnectorApi = class extends runtime.BaseAPI {
        /**
         * An endpoint which abstracts a bootup/connection for a specific context
         * /connect [POST]
         */
        async connectRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/connect`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConnectorConnectionToJSON)(requestParameters.seededConnectorConnection)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ContextFromJSON)(jsonValue));
        }
        /**
         * An endpoint which abstracts a bootup/connection for a specific context
         * /connect [POST]
         */
        async connect(requestParameters) {
          const response = await this.connectRaw(requestParameters);
          return await response.value();
        }
        /**
         * This can be used to send a SeededAsset over that you may use to compair in the future.
         * /{application}/intention [POST]
         */
        async intentionRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling intention.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/{application}/intention`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConnectorAssetToJSON)(requestParameters.seededConnectorAsset)
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This can be used to send a SeededAsset over that you may use to compair in the future.
         * /{application}/intention [POST]
         */
        async intention(requestParameters) {
          const response = await this.intentionRaw(requestParameters);
          return await response.value();
        }
        /**
         * A consolidation endpoint to handle the updating of an onboarding process.
         * /onboarded [POST]
         */
        async onboardedRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling onboarded.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/{application}/onboarded`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * A consolidation endpoint to handle the updating of an onboarding process.
         * /onboarded [POST]
         */
        async onboarded(requestParameters) {
          const response = await this.onboardedRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will react to the response returned from the /suggest endpoint.
         * /{application}/reaction [POST]
         */
        async reactRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling react.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/{application}/reaction`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReactionToJSON)(requestParameters.reaction)
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This will react to the response returned from the /suggest endpoint.
         * /{application}/reaction [POST]
         */
        async react(requestParameters) {
          const response = await this.reactRaw(requestParameters);
          return await response.value();
        }
        /**
         * This can and should be called everytime a snippet is coppied from an integration. IE A Jetbrains user coppies some code, then this end point can get called to weigh if we want to suggest a piece to be reused (if reuse is true we should provide asset that the user may want to use) or saved or neither.   **Note: Could potentially accept a SeededFormat for the request body if we want.  TODO potentially just make this a get endpoint. (because we are trying to retireve data.
         * /{application}/suggestion [POST]
         */
        async suggestRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling suggest.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/{application}/suggestion`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConnectorCreationToJSON)(requestParameters.seededConnectorCreation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SuggestionFromJSON)(jsonValue));
        }
        /**
         * This can and should be called everytime a snippet is coppied from an integration. IE A Jetbrains user coppies some code, then this end point can get called to weigh if we want to suggest a piece to be reused (if reuse is true we should provide asset that the user may want to use) or saved or neither.   **Note: Could potentially accept a SeededFormat for the request body if we want.  TODO potentially just make this a get endpoint. (because we are trying to retireve data.
         * /{application}/suggestion [POST]
         */
        async suggest(requestParameters) {
          const response = await this.suggestRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an endpoint specifically to abstract the work of packaging for segment on a per-context basis
         * /{application}/track [POST]
         */
        async trackRaw(requestParameters) {
          if (requestParameters.application === null || requestParameters.application === void 0) {
            throw new runtime.RequiredError("application", "Required parameter requestParameters.application was null or undefined when calling track.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/{application}/track`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConnectorTrackingToJSON)(requestParameters.seededConnectorTracking)
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This is an endpoint specifically to abstract the work of packaging for segment on a per-context basis
         * /{application}/track [POST]
         */
        async track(requestParameters) {
          const response = await this.trackRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ConnectorApi = ConnectorApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationApi.js
  var require_ConversationApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ConversationApi = class extends runtime.BaseAPI {
        /**
         * This will update both the anchor and the conversation.  and associate the 2 together
         * /conversation/{conversation}/anchors/associate/{anchor} [POST]
         */
        async conversationAssociateAnchorRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAnchor.");
          }
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling conversationAssociateAnchor.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/anchors/associate/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the anchor and the conversation.  and associate the 2 together
         * /conversation/{conversation}/anchors/associate/{anchor} [POST]
         */
        async conversationAssociateAnchor(requestParameters) {
          await this.conversationAssociateAnchorRaw(requestParameters);
        }
        /**
         * This will update both the asset and the conversation.  and associate the 2 together
         * /conversation/{conversation}/assets/associate/{asset} [POST]
         */
        async conversationAssociateAssetRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling conversationAssociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/assets/associate/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the asset and the conversation.  and associate the 2 together
         * /conversation/{conversation}/assets/associate/{asset} [POST]
         */
        async conversationAssociateAsset(requestParameters) {
          await this.conversationAssociateAssetRaw(requestParameters);
        }
        /**
         * This will update both the anchor and the conversation.  and delete(disacioate) the 2 together
         * /conversation/{conversation}/anchors/delete/{anchor} [POST]
         */
        async conversationDeleteAnchorRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationDeleteAnchor.");
          }
          if (requestParameters.anchor === null || requestParameters.anchor === void 0) {
            throw new runtime.RequiredError("anchor", "Required parameter requestParameters.anchor was null or undefined when calling conversationDeleteAnchor.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/anchors/delete/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the anchor and the conversation.  and delete(disacioate) the 2 together
         * /conversation/{conversation}/anchors/delete/{anchor} [POST]
         */
        async conversationDeleteAnchor(requestParameters) {
          await this.conversationDeleteAnchorRaw(requestParameters);
        }
        /**
         * This will update both the asset and the conversation.  and delete(disacioate) the 2.
         * /conversation/{conversation}/assets/delete/{asset} [POST]
         */
        async conversationDeleteAssetRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationDeleteAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling conversationDeleteAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/assets/delete/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the asset and the conversation.  and delete(disacioate) the 2.
         * /conversation/{conversation}/assets/delete/{asset} [POST]
         */
        async conversationDeleteAsset(requestParameters) {
          await this.conversationDeleteAssetRaw(requestParameters);
        }
        /**
         * This will get a specific conversation.
         * /conversation/{conversation} [GET]
         */
        async conversationGetSpecificConversationRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationGetSpecificConversation.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
        }
        /**
         * This will get a specific conversation.
         * /conversation/{conversation} [GET]
         */
        async conversationGetSpecificConversation(requestParameters) {
          const response = await this.conversationGetSpecificConversationRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
         * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
         */
        async conversationGroundingMessagesAssociateMessageRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesAssociateMessage.");
          }
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesAssociateMessage.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/associate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
         * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
         */
        async conversationGroundingMessagesAssociateMessage(requestParameters) {
          await this.conversationGroundingMessagesAssociateMessageRaw(requestParameters);
        }
        /**
         * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
         * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
         */
        async conversationGroundingMessagesDisassociateMessageRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesDisassociateMessage.");
          }
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesDisassociateMessage.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/disassociate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
         * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
         */
        async conversationGroundingMessagesDisassociateMessage(requestParameters) {
          await this.conversationGroundingMessagesDisassociateMessageRaw(requestParameters);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/conversation/{conversation}/scores/increment\' [POST]
         */
        async conversationScoresIncrementRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/conversation/{conversation}/scores/increment`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/conversation/{conversation}/scores/increment\' [POST]
         */
        async conversationScoresIncrement(requestParameters) {
          await this.conversationScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a specific conversations messages
         * /conversation/{conversation}/messages [GET]
         */
        async conversationSpecificConversationMessagesRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationMessages.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/messages`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessagesFromJSON)(jsonValue));
        }
        /**
         * This will get a specific conversations messages
         * /conversation/{conversation}/messages [GET]
         */
        async conversationSpecificConversationMessages(requestParameters) {
          const response = await this.conversationSpecificConversationMessagesRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take a specific converssation and it will rename using ML.
         * /conversation/{conversation}/rename [POST]
         */
        async conversationSpecificConversationRenameRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationRename.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/conversation/{conversation}/rename`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
        }
        /**
         * This will take a specific converssation and it will rename using ML.
         * /conversation/{conversation}/rename [POST]
         */
        async conversationSpecificConversationRename(requestParameters) {
          const response = await this.conversationSpecificConversationRenameRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
         * /conversation/{conversation}/summarize [POST]
         */
        async conversationSummarizeRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationSummarize.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/conversation/{conversation}/summarize`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConversationSummarizeInputToJSON)(requestParameters.conversationSummarizeInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationSummarizeOutputFromJSON)(jsonValue));
        }
        /**
         * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
         * /conversation/{conversation}/summarize [POST]
         */
        async conversationSummarize(requestParameters) {
          const response = await this.conversationSummarizeRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific conversation.
         * /conversation/update [POST]
         */
        async conversationUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/conversation/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConversationToJSON)(requestParameters.conversation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
        }
        /**
         * This will update a specific conversation.
         * /conversation/update [POST]
         */
        async conversationUpdate(requestParameters) {
          const response = await this.conversationUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ConversationApi = ConversationApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationMessageApi.js
  var require_ConversationMessageApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationMessageApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationMessageApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ConversationMessageApi = class extends runtime.BaseAPI {
        /**
         * This will associate a message with an annotation.
         * /message/{message}/annotations/associate/{annotation} [POST]
         */
        async messageAssociateAnnotationRaw(requestParameters) {
          if (requestParameters.annotation === null || requestParameters.annotation === void 0) {
            throw new runtime.RequiredError("annotation", "Required parameter requestParameters.annotation was null or undefined when calling messageAssociateAnnotation.");
          }
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling messageAssociateAnnotation.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/message/{message}/annotations/associate/{annotation}`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a message with an annotation.
         * /message/{message}/annotations/associate/{annotation} [POST]
         */
        async messageAssociateAnnotation(requestParameters) {
          await this.messageAssociateAnnotationRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a message from an annotation.
         * /message/{message}/annotations/disassociate/{annotation} [POST]
         */
        async messageDisassociateAnnotationRaw(requestParameters) {
          if (requestParameters.annotation === null || requestParameters.annotation === void 0) {
            throw new runtime.RequiredError("annotation", "Required parameter requestParameters.annotation was null or undefined when calling messageDisassociateAnnotation.");
          }
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling messageDisassociateAnnotation.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/message/{message}/annotations/disassociate/{annotation}`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a message from an annotation.
         * /message/{message}/annotations/disassociate/{annotation} [POST]
         */
        async messageDisassociateAnnotation(requestParameters) {
          await this.messageDisassociateAnnotationRaw(requestParameters);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/message/{message}/scores/increment\' [POST]
         */
        async messageScoresIncrementRaw(requestParameters) {
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling messageScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/message/{message}/scores/increment`.replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/message/{message}/scores/increment\' [POST]
         */
        async messageScoresIncrement(requestParameters) {
          await this.messageScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a specific snapshot of a message
         * /message/{message} [GET]
         */
        async messageSpecificMessageSnapshotRaw(requestParameters) {
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling messageSpecificMessageSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/message/{message}`.replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessageFromJSON)(jsonValue));
        }
        /**
         * This will get a specific snapshot of a message
         * /message/{message} [GET]
         */
        async messageSpecificMessageSnapshot(requestParameters) {
          const response = await this.messageSpecificMessageSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a conversation message.
         * /message/update [GET]
         */
        async messageSpecificMessageUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/message/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConversationMessageToJSON)(requestParameters.conversationMessage)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessageFromJSON)(jsonValue));
        }
        /**
         * This will update a conversation message.
         * /message/update [GET]
         */
        async messageSpecificMessageUpdate(requestParameters) {
          const response = await this.messageSpecificMessageUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ConversationMessageApi = ConversationMessageApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationMessagesApi.js
  var require_ConversationMessagesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationMessagesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationMessagesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ConversationMessagesApi = class extends runtime.BaseAPI {
        /**
         * This will create a Message on a specific conversation.
         * /messages/create [POST]
         */
        async messagesCreateSpecificMessageRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/messages/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConversationMessageToJSON)(requestParameters.seededConversationMessage)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessageFromJSON)(jsonValue));
        }
        /**
         * This will create a Message on a specific conversation.
         * /messages/create [POST]
         */
        async messagesCreateSpecificMessage(requestParameters) {
          const response = await this.messagesCreateSpecificMessageRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific message.
         * /messages/{message}/delete [POST]
         */
        async messagesDeleteSpecificMessageRaw(requestParameters) {
          if (requestParameters.message === null || requestParameters.message === void 0) {
            throw new runtime.RequiredError("message", "Required parameter requestParameters.message was null or undefined when calling messagesDeleteSpecificMessage.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/messages/{message}/delete`.replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific message.
         * /messages/{message}/delete [POST]
         */
        async messagesDeleteSpecificMessage(requestParameters) {
          await this.messagesDeleteSpecificMessageRaw(requestParameters);
        }
        /**
         * This will get all the messages.
         * /messages [GET]
         */
        async messagesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/messages`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessagesFromJSON)(jsonValue));
        }
        /**
         * This will get all the messages.
         * /messages [GET]
         */
        async messagesSnapshot(requestParameters) {
          const response = await this.messagesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ConversationMessagesApi = ConversationMessagesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationsApi.js
  var require_ConversationsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ConversationsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConversationsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ConversationsApi = class extends runtime.BaseAPI {
        /**
         * This will create a conversation from an asset, This will create a conversation and an initial message for the conversation(w/ a summary of the asset that is being used as grounding context).
         * /conversations/create/from_asset/{asset} [POST]
         */
        async conversationsCreateFromAssetRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling conversationsCreateFromAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversations/create/from_asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationsCreateFromAssetOutputFromJSON)(jsonValue));
        }
        /**
         * This will create a conversation from an asset, This will create a conversation and an initial message for the conversation(w/ a summary of the asset that is being used as grounding context).
         * /conversations/create/from_asset/{asset} [POST]
         */
        async conversationsCreateFromAsset(requestParameters) {
          const response = await this.conversationsCreateFromAssetRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will create a specific conversation.
         * /conversations/create [POST]
         */
        async conversationsCreateSpecificConversationRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/conversations/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConversationToJSON)(requestParameters.seededConversation)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
        }
        /**
         * This will create a specific conversation.
         * /conversations/create [POST]
         */
        async conversationsCreateSpecificConversation(requestParameters) {
          const response = await this.conversationsCreateSpecificConversationRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific Conversation.
         * /conversations/{conversation}/delete [POST]
         */
        async conversationsDeleteSpecificConversationRaw(requestParameters) {
          if (requestParameters.conversation === null || requestParameters.conversation === void 0) {
            throw new runtime.RequiredError("conversation", "Required parameter requestParameters.conversation was null or undefined when calling conversationsDeleteSpecificConversation.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversations/{conversation}/delete`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific Conversation.
         * /conversations/{conversation}/delete [POST]
         */
        async conversationsDeleteSpecificConversation(requestParameters) {
          await this.conversationsDeleteSpecificConversationRaw(requestParameters);
        }
        /**
         * This will get all the uuids of a Conversation.
         * /conversations/identifiers [GET]
         */
        async conversationsIdentifiersSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversations/identifiers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FlattenedConversationsFromJSON)(jsonValue));
        }
        /**
         * This will get all the uuids of a Conversation.
         * /conversations/identifiers [GET]
         */
        async conversationsIdentifiersSnapshot() {
          const response = await this.conversationsIdentifiersSnapshotRaw();
          return await response.value();
        }
        /**
         * This will return a snapshot of a specific conversation
         * /conversations [GET]
         */
        async conversationsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/conversations`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationsFromJSON)(jsonValue));
        }
        /**
         * This will return a snapshot of a specific conversation
         * /conversations [GET]
         */
        async conversationsSnapshot(requestParameters) {
          const response = await this.conversationsSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is a stream for the conversation identifiers. will return StreamedIdentifiers.
         * /conversations/stream/identifiers [STREAMED]
         */
        async conversationsStreamIdentifiersRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/conversations/stream/identifiers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This is a stream for the conversation identifiers. will return StreamedIdentifiers.
         * /conversations/stream/identifiers [STREAMED]
         */
        async conversationsStreamIdentifiers() {
          await this.conversationsStreamIdentifiersRaw();
        }
      };
      exports.ConversationsApi = ConversationsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/DatabaseApi.js
  var require_DatabaseApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/DatabaseApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DatabaseApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var DatabaseApi = class extends runtime.BaseAPI {
        /**
         * This is going to export your current database.
         * Your GET endpoint
         */
        async databaseExportRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/database/export`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExportedDatabaseFromJSON)(jsonValue));
        }
        /**
         * This is going to export your current database.
         * Your GET endpoint
         */
        async databaseExport() {
          const response = await this.databaseExportRaw();
          return await response.value();
        }
        /**
         * This is going to take in a database, and merge it with the current database. This will revert your database back to it original form if this request fails.
         * /database/import [POST]
         */
        async databaseImportRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/database/import`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ExportedDatabaseToJSON)(requestParameters.exportedDatabase)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This is going to take in a database, and merge it with the current database. This will revert your database back to it original form if this request fails.
         * /database/import [POST]
         */
        async databaseImport(requestParameters) {
          await this.databaseImportRaw(requestParameters);
        }
      };
      exports.DatabaseApi = DatabaseApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/DiscoveryApi.js
  var require_DiscoveryApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/DiscoveryApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscoveryApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var DiscoveryApi = class extends runtime.BaseAPI {
        /**
         * This is the endpoint used for bulk import. In both cases of the bulk import flow, fragments or files. When we already have \"snippets\" or fragments to discover and now our job is to check if they are actually valid snippets(clustering). Otherwise, we should have a file to parse && snippitize and then run through the clustering.
         * /discovery/discover/assets [POST]
         */
        async discoveryDiscoverAssetsRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.automatic !== void 0) {
            queryParameters["automatic"] = requestParameters.automatic;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/discovery/discover/assets`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededDiscoverableAssetsToJSON)(requestParameters.seededDiscoverableAssets)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiscoveredAssetsFromJSON)(jsonValue));
        }
        /**
         * This is the endpoint used for bulk import. In both cases of the bulk import flow, fragments or files. When we already have \"snippets\" or fragments to discover and now our job is to check if they are actually valid snippets(clustering). Otherwise, we should have a file to parse && snippitize and then run through the clustering.
         * /discovery/discover/assets [POST]
         */
        async discoveryDiscoverAssets(requestParameters) {
          const response = await this.discoveryDiscoverAssetsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is the discover discover assets html endpoint. The goal of this endpoint is to either take an iterable of urls and pages(an html string) and extract all the assets from the iterable.
         * /discovery/discover/assets/html[POST]
         */
        async discoveryDiscoverAssetsHtmlRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.automatic !== void 0) {
            queryParameters["automatic"] = requestParameters.automatic;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/discovery/discover/assets/html`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededDiscoverableHtmlWebpagesToJSON)(requestParameters.seededDiscoverableHtmlWebpages)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiscoveredHtmlWebpagesFromJSON)(jsonValue));
        }
        /**
         * This is the discover discover assets html endpoint. The goal of this endpoint is to either take an iterable of urls and pages(an html string) and extract all the assets from the iterable.
         * /discovery/discover/assets/html[POST]
         */
        async discoveryDiscoverAssetsHtml(requestParameters) {
          const response = await this.discoveryDiscoverAssetsHtmlRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will accept an array of text values, and attampt to extract sensitive data out of it.
         * /discovery/discover/sensitives [POST]
         */
        async discoveryDiscoverSensitivesRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.automatic !== void 0) {
            queryParameters["automatic"] = requestParameters.automatic;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/discovery/discover/sensitives`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededDiscoverableSensitivesToJSON)(requestParameters.seededDiscoverableSensitives)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiscoveredSensitivesFromJSON)(jsonValue));
        }
        /**
         * This endpoint will accept an array of text values, and attampt to extract sensitive data out of it.
         * /discovery/discover/sensitives [POST]
         */
        async discoveryDiscoverSensitives(requestParameters) {
          const response = await this.discoveryDiscoverSensitivesRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take in a tag or multiple tags and return all the tags that are related to the tag or tag provide in the body.
         * /discovery/discover/tags/related [POST]
         */
        async discoveryDiscoverTagsRelatedRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.automatic !== void 0) {
            queryParameters["automatic"] = requestParameters.automatic;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/discovery/discover/tags/related`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededDiscoverableRelatedTagsToJSON)(requestParameters.seededDiscoverableRelatedTags)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiscoveredRelatedTagsFromJSON)(jsonValue));
        }
        /**
         * This will take in a tag or multiple tags and return all the tags that are related to the tag or tag provide in the body.
         * /discovery/discover/tags/related [POST]
         */
        async discoveryDiscoverTagsRelated(requestParameters) {
          const response = await this.discoveryDiscoverTagsRelatedRaw(requestParameters);
          return await response.value();
        }
      };
      exports.DiscoveryApi = DiscoveryApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/DistributionApi.js
  var require_DistributionApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/DistributionApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DistributionApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var DistributionApi = class extends runtime.BaseAPI {
        /**
         * This will update a specific Distribution.
         * /distribution/update [POST]
         */
        async distributionUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/distribution/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.DistributionToJSON)(requestParameters.distribution)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DistributionFromJSON)(jsonValue));
        }
        /**
         * This will update a specific Distribution.
         * /distribution/update [POST]
         */
        async distributionUpdate(requestParameters) {
          const response = await this.distributionUpdateRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a specific snapshot of a distribution.
         * /distribution/{distribution} [GET]
         */
        async distributionsSpecificDistributionSnapshotRaw(requestParameters) {
          if (requestParameters.distribution === null || requestParameters.distribution === void 0) {
            throw new runtime.RequiredError("distribution", "Required parameter requestParameters.distribution was null or undefined when calling distributionsSpecificDistributionSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/distribution/{distribution}`.replace(`{${"distribution"}}`, encodeURIComponent(String(requestParameters.distribution))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DistributionFromJSON)(jsonValue));
        }
        /**
         * This will get a specific snapshot of a distribution.
         * /distribution/{distribution} [GET]
         */
        async distributionsSpecificDistributionSnapshot(requestParameters) {
          const response = await this.distributionsSpecificDistributionSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.DistributionApi = DistributionApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/DistributionsApi.js
  var require_DistributionsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/DistributionsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DistributionsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var DistributionsApi = class extends runtime.BaseAPI {
        /**
         * This will create a new distribution.
         * /distributions/create [POST]
         */
        async distributionsCreateNewDistributionRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/distributions/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededDistributionToJSON)(requestParameters.seededDistribution)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DistributionFromJSON)(jsonValue));
        }
        /**
         * This will create a new distribution.
         * /distributions/create [POST]
         */
        async distributionsCreateNewDistribution(requestParameters) {
          const response = await this.distributionsCreateNewDistributionRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific distribution.
         * /distributions/{distribution}/delete [POST]
         */
        async distributionsDeleteSpecificDistributionRaw(requestParameters) {
          if (requestParameters.distribution === null || requestParameters.distribution === void 0) {
            throw new runtime.RequiredError("distribution", "Required parameter requestParameters.distribution was null or undefined when calling distributionsDeleteSpecificDistribution.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/distributions/{distribution}/delete`.replace(`{${"distribution"}}`, encodeURIComponent(String(requestParameters.distribution))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific distribution.
         * /distributions/{distribution}/delete [POST]
         */
        async distributionsDeleteSpecificDistribution(requestParameters) {
          await this.distributionsDeleteSpecificDistributionRaw(requestParameters);
        }
        /**
         * This will get a specific snapshot of all our distributions.
         * /distributions [GET]
         */
        async distributionsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/distributions`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DistributionsFromJSON)(jsonValue));
        }
        /**
         * This will get a specific snapshot of all our distributions.
         * /distributions [GET]
         */
        async distributionsSnapshot() {
          const response = await this.distributionsSnapshotRaw();
          return await response.value();
        }
      };
      exports.DistributionsApi = DistributionsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ExternalProviderApi.js
  var require_ExternalProviderApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ExternalProviderApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExternalProviderApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ExternalProviderApi = class extends runtime.BaseAPI {
        /**
         * This will create a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/create [POST]
         */
        async externalProviderApiKeyCreateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/external_provider/api_key/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PrecreatedExternalProviderApiKeyToJSON)(requestParameters.precreatedExternalProviderApiKey)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreatedExternalProviderApiKeyFromJSON)(jsonValue));
        }
        /**
         * This will create a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/create [POST]
         */
        async externalProviderApiKeyCreate(requestParameters) {
          const response = await this.externalProviderApiKeyCreateRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will remove a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/delete [POST]
         */
        async externalProviderApiKeyDeleteRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/external_provider/api_key/delete`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PredeletedExternalProviderApiKeyToJSON)(requestParameters.predeletedExternalProviderApiKey)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DeletedExternalProviderApiKeyFromJSON)(jsonValue));
        }
        /**
         * This will remove a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/delete [POST]
         */
        async externalProviderApiKeyDelete(requestParameters) {
          const response = await this.externalProviderApiKeyDeleteRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/update [POST]
         */
        async externalProviderApiKeyUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/external_provider/api_key/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PreupdatedExternalProviderApiKeyToJSON)(requestParameters.preupdatedExternalProviderApiKey)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdatedExternalProviderApiKeyFromJSON)(jsonValue));
        }
        /**
         * This will update a specific external_provider api_key from a specific user Auth0UserMetadata
         * /external_provider/api_key/update [POST]
         */
        async externalProviderApiKeyUpdate(requestParameters) {
          const response = await this.externalProviderApiKeyUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ExternalProviderApi = ExternalProviderApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/FormatApi.js
  var require_FormatApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/FormatApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var FormatApi = class extends runtime.BaseAPI {
        /**
         * This will get an analysis from a format\'s id.
         * /format/{format}/analysis [GET]
         */
        async formatAnalysisRaw(requestParameters) {
          if (requestParameters.format === null || requestParameters.format === void 0) {
            throw new runtime.RequiredError("format", "Required parameter requestParameters.format was null or undefined when calling formatAnalysis.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/format/{format}/analysis`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnalysisFromJSON)(jsonValue));
        }
        /**
         * This will get an analysis from a format\'s id.
         * /format/{format}/analysis [GET]
         */
        async formatAnalysis(requestParameters) {
          const response = await this.formatAnalysisRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will be used to reclassify a single Format.
         * /format/reclassify [POST]
         */
        async formatReclassifyRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferable !== void 0) {
            queryParameters["transferable"] = requestParameters.transferable;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/format/reclassify`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.FormatReclassificationToJSON)(requestParameters.formatReclassification)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatFromJSON)(jsonValue));
        }
        /**
         * This endpoint will be used to reclassify a single Format.
         * /format/reclassify [POST]
         */
        async formatReclassify(requestParameters) {
          const response = await this.formatReclassifyRaw(requestParameters);
          return await response.value();
        }
        /**
         * Get a snapshot of a specific format.
         * /format/{format} [GET] Scoped to Format
         */
        async formatSnapshotRaw(requestParameters) {
          if (requestParameters.format === null || requestParameters.format === void 0) {
            throw new runtime.RequiredError("format", "Required parameter requestParameters.format was null or undefined when calling formatSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferable !== void 0) {
            queryParameters["transferable"] = requestParameters.transferable;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/format/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatFromJSON)(jsonValue));
        }
        /**
         * Get a snapshot of a specific format.
         * /format/{format} [GET] Scoped to Format
         */
        async formatSnapshot(requestParameters) {
          const response = await this.formatSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a format\'s value, ie, a formats fragment or file depending on what is provided.  code/text fragment behavior: If this format is an asset.preview.base we will update the asset.original\'s value. if this format is an asset.preview.original we will update the asset.preview.base\'s value.  code/text file behavior: If the the format that is update is the asset.preview.base is a fragment and the asset.original is file then we will update the asset.original\'s value to be bytes or string respectively. This goes the same for orignal to preview but will be go the reverse order so if the original is a file we will update the preview base\'s fragment string.  image fragment/file: We will not modify preview -> orignal or original -> preview here. so there are zero side effects in this case, and will update as normal. (this will be the case for all other value updates.)
         * [POST] /format/update/value
         */
        async formatUpdateValueRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferable !== void 0) {
            queryParameters["transferable"] = requestParameters.transferable;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/format/update/value`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.FormatToJSON)(requestParameters.format)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatFromJSON)(jsonValue));
        }
        /**
         * This will update a format\'s value, ie, a formats fragment or file depending on what is provided.  code/text fragment behavior: If this format is an asset.preview.base we will update the asset.original\'s value. if this format is an asset.preview.original we will update the asset.preview.base\'s value.  code/text file behavior: If the the format that is update is the asset.preview.base is a fragment and the asset.original is file then we will update the asset.original\'s value to be bytes or string respectively. This goes the same for orignal to preview but will be go the reverse order so if the original is a file we will update the preview base\'s fragment string.  image fragment/file: We will not modify preview -> orignal or original -> preview here. so there are zero side effects in this case, and will update as normal. (this will be the case for all other value updates.)
         * [POST] /format/update/value
         */
        async formatUpdateValue(requestParameters) {
          const response = await this.formatUpdateValueRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user has copied/downloaded/beamed/viewed a format.
         * /format/usage/event [POST] Scoped to Format
         */
        async formatUsageEventRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/format/usage/event`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTrackedFormatEventToJSON)(requestParameters.seededTrackedFormatEvent)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackedFormatEventFromJSON)(jsonValue));
        }
        /**
         * This is an analytics endpoint that will enable us to know when a user has copied/downloaded/beamed/viewed a format.
         * /format/usage/event [POST] Scoped to Format
         */
        async formatUsageEvent(requestParameters) {
          const response = await this.formatUsageEventRaw(requestParameters);
          return await response.value();
        }
      };
      exports.FormatApi = FormatApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/FormatsApi.js
  var require_FormatsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/FormatsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormatsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var FormatsApi = class extends runtime.BaseAPI {
        /**
         * Get all of your formats for a given user.
         * /formats [GET] Scoped to Formats
         */
        async formatsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/formats`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatsFromJSON)(jsonValue));
        }
        /**
         * Get all of your formats for a given user.
         * /formats [GET] Scoped to Formats
         */
        async formatsSnapshot(requestParameters) {
          const response = await this.formatsSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * Request a specific format when given a id (uuid in path params)
         * /formats/{format} [GET] Scoped to Formats
         */
        async formatsSpecificFormatSnapshotRaw(requestParameters) {
          if (requestParameters.format === null || requestParameters.format === void 0) {
            throw new runtime.RequiredError("format", "Required parameter requestParameters.format was null or undefined when calling formatsSpecificFormatSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferable !== void 0) {
            queryParameters["transferable"] = requestParameters.transferable;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/formats/{format}`.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatFromJSON)(jsonValue));
        }
        /**
         * Request a specific format when given a id (uuid in path params)
         * /formats/{format} [GET] Scoped to Formats
         */
        async formatsSpecificFormatSnapshot(requestParameters) {
          const response = await this.formatsSpecificFormatSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.FormatsApi = FormatsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/GithubApi.js
  var require_GithubApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/GithubApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GithubApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var GithubApi = class extends runtime.BaseAPI {
        /**
         * This will attempt to get all the gist availble and return them to the user as a DiscoveredAssets.  if automatic is true we will automatically create the asset.  v1. will just get all the users\' gists. <- implemented. v2. can get specific a public gist.
         * /github/gists/import [POST]
         */
        async importGithubGistsRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.automatic !== void 0) {
            queryParameters["automatic"] = requestParameters.automatic;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/github/gists/import`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededGithubGistsImportToJSON)(requestParameters.seededGithubGistsImport)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SeedsFromJSON)(jsonValue));
        }
        /**
         * This will attempt to get all the gist availble and return them to the user as a DiscoveredAssets.  if automatic is true we will automatically create the asset.  v1. will just get all the users\' gists. <- implemented. v2. can get specific a public gist.
         * /github/gists/import [POST]
         */
        async importGithubGists(requestParameters) {
          const response = await this.importGithubGistsRaw(requestParameters);
          return await response.value();
        }
      };
      exports.GithubApi = GithubApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/HintApi.js
  var require_HintApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/HintApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HintApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var HintApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/hint/{hint}/scores/increment\' [POST]
         */
        async hintScoresIncrementRaw(requestParameters) {
          if (requestParameters.hint === null || requestParameters.hint === void 0) {
            throw new runtime.RequiredError("hint", "Required parameter requestParameters.hint was null or undefined when calling hintScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/hint/{hint}/scores/increment`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/hint/{hint}/scores/increment\' [POST]
         */
        async hintScoresIncrement(requestParameters) {
          await this.hintScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a snapshot of a specific hint.
         * /hint/{hint} [POST]
         */
        async hintSpecificHintSnapshotRaw(requestParameters) {
          if (requestParameters.hint === null || requestParameters.hint === void 0) {
            throw new runtime.RequiredError("hint", "Required parameter requestParameters.hint was null or undefined when calling hintSpecificHintSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/hint/{hint}`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HintFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a specific hint.
         * /hint/{hint} [POST]
         */
        async hintSpecificHintSnapshot(requestParameters) {
          const response = await this.hintSpecificHintSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific hint.
         * /hint/update [POST]
         */
        async hintUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/hint/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.HintToJSON)(requestParameters.hint)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HintFromJSON)(jsonValue));
        }
        /**
         * This will update a specific hint.
         * /hint/update [POST]
         */
        async hintUpdate(requestParameters) {
          const response = await this.hintUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.HintApi = HintApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/HintsApi.js
  var require_HintsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/HintsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HintsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var HintsApi = class extends runtime.BaseAPI {
        /**
         * This will create a hint.
         * /hints/create [POST]
         */
        async hintsCreateNewHintRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/hints/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededHintToJSON)(requestParameters.seededHint)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HintFromJSON)(jsonValue));
        }
        /**
         * This will create a hint.
         * /hints/create [POST]
         */
        async hintsCreateNewHint(requestParameters) {
          const response = await this.hintsCreateNewHintRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific hint.
         * /hints/{hint}/delete [POST]
         */
        async hintsDeleteSpecificHintRaw(requestParameters) {
          if (requestParameters.hint === null || requestParameters.hint === void 0) {
            throw new runtime.RequiredError("hint", "Required parameter requestParameters.hint was null or undefined when calling hintsDeleteSpecificHint.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/hints/{hint}/delete`.replace(`{${"hint"}}`, encodeURIComponent(String(requestParameters.hint))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific hint.
         * /hints/{hint}/delete [POST]
         */
        async hintsDeleteSpecificHint(requestParameters) {
          await this.hintsDeleteSpecificHintRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all of the hints.
         * /hints [GET]
         */
        async hintsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/hints`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HintsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of the hints.
         * /hints [GET]
         */
        async hintsSnapshot() {
          const response = await this.hintsSnapshotRaw();
          return await response.value();
        }
      };
      exports.HintsApi = HintsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ImageAnalysesApi.js
  var require_ImageAnalysesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ImageAnalysesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ImageAnalysesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ImageAnalysesApi = class extends runtime.BaseAPI {
        /**
         * This will get a snapshot of all of your code analyses, a code analysis is attached to an image analysis.
         * Your GET endpoint
         */
        async imageAnalysesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/image_analyses`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ImageAnalysesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your code analyses, a code analysis is attached to an image analysis.
         * Your GET endpoint
         */
        async imageAnalysesSnapshot(requestParameters) {
          const response = await this.imageAnalysesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ImageAnalysesApi = ImageAnalysesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/LinkifyApi.js
  var require_LinkifyApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/LinkifyApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LinkifyApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var LinkifyApi = class extends runtime.BaseAPI {
        /**
         * /linkify [POST]
         */
        async linkifyRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/linkify`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.LinkifyToJSON)(requestParameters.linkify)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
        }
        /**
         * /linkify [POST]
         */
        async linkify(requestParameters) {
          const response = await this.linkifyRaw(requestParameters);
          return await response.value();
        }
        /**
         * - assumption that you have already backed up the asset\'s that you are sending to this endpoint.(b/c the assets are ids.)
         * /linkify/multiple [POST]
         */
        async linkifyMultipleRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/linkify/multiple`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.LinkifyMultipleToJSON)(requestParameters.linkifyMultiple)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
        }
        /**
         * - assumption that you have already backed up the asset\'s that you are sending to this endpoint.(b/c the assets are ids.)
         * /linkify/multiple [POST]
         */
        async linkifyMultiple(requestParameters) {
          const response = await this.linkifyMultipleRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will revoke a link.
         * [POST} /linkify/{share}/revoke
         */
        async linkifyShareRevokeRaw(requestParameters) {
          if (requestParameters.share === null || requestParameters.share === void 0) {
            throw new runtime.RequiredError("share", "Required parameter requestParameters.share was null or undefined when calling linkifyShareRevoke.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/linkify/{share}/revoke`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This will revoke a link.
         * [POST} /linkify/{share}/revoke
         */
        async linkifyShareRevoke(requestParameters) {
          const response = await this.linkifyShareRevokeRaw(requestParameters);
          return await response.value();
        }
      };
      exports.LinkifyApi = LinkifyApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/MacOSApi.js
  var require_MacOSApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/MacOSApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MacOSApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var MacOSApi = class extends runtime.BaseAPI {
        /**
         * Exposes an endpoint for the MacOS Services plugin to send over MacOS Specific Data
         * /macos/assets/create [Post]
         */
        async assetsCreateNewAssetFromMacosRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/macos/assets/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededMacOSAssetToJSON)(requestParameters.seededMacOSAsset)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * Exposes an endpoint for the MacOS Services plugin to send over MacOS Specific Data
         * /macos/assets/create [Post]
         */
        async assetsCreateNewAssetFromMacos(requestParameters) {
          const response = await this.assetsCreateNewAssetFromMacosRaw(requestParameters);
          return await response.value();
        }
      };
      exports.MacOSApi = MacOSApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/MachineLearningApi.js
  var require_MachineLearningApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/MachineLearningApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MachineLearningApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var MachineLearningApi = class extends runtime.BaseAPI {
        /**
         * This is a functional endpoint that will parse a message or text in to text or code.  if the optional query param is passed along \'classify\' then we will optionally classify the just the code that is segmented.
         * /machine_learning/text/technical_language/parsers/segmentation [POST]
         */
        async segmentTechnicalLanguageRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.classify !== void 0) {
            queryParameters["classify"] = requestParameters.classify;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/machine_learning/text/technical_language/parsers/segmentation`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UnsegmentedTechnicalLanguageToJSON)(requestParameters.unsegmentedTechnicalLanguage)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SegmentedTechnicalLanguageFromJSON)(jsonValue));
        }
        /**
         * This is a functional endpoint that will parse a message or text in to text or code.  if the optional query param is passed along \'classify\' then we will optionally classify the just the code that is segmented.
         * /machine_learning/text/technical_language/parsers/segmentation [POST]
         */
        async segmentTechnicalLanguage(requestParameters) {
          const response = await this.segmentTechnicalLanguageRaw(requestParameters);
          return await response.value();
        }
      };
      exports.MachineLearningApi = MachineLearningApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/MetricsApi.js
  var require_MetricsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/MetricsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MetricsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var MetricsApi = class extends runtime.BaseAPI {
        /**
         * This is going to get a snapshot of our FormatsMetrics
         * /metrics/formats [GET]
         */
        async getMetricsFormatsRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/metrics/formats`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FormatsMetricsFromJSON)(jsonValue));
        }
        /**
         * This is going to get a snapshot of our FormatsMetrics
         * /metrics/formats [GET]
         */
        async getMetricsFormats() {
          const response = await this.getMetricsFormatsRaw();
          return await response.value();
        }
        /**
         * This will return a list of code formats in desc order from most to least formats uploaded.
         * /metrics/formats/ordered [GET]
         */
        async metricsFormatsOrderedRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/metrics/formats/ordered`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderedMetricsFromJSON)(jsonValue));
        }
        /**
         * This will return a list of code formats in desc order from most to least formats uploaded.
         * /metrics/formats/ordered [GET]
         */
        async metricsFormatsOrdered() {
          const response = await this.metricsFormatsOrderedRaw();
          return await response.value();
        }
      };
      exports.MetricsApi = MetricsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ModelApi.js
  var require_ModelApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ModelApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ModelApi = class extends runtime.BaseAPI {
        /**
         * This will download a specific model onto your local machine.
         * /model/{model}/download [POST]
         */
        async modelSpecificModelDownloadRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelSpecificModelDownload.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}/download`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will download a specific model onto your local machine.
         * /model/{model}/download [POST]
         */
        async modelSpecificModelDownload(requestParameters) {
          const response = await this.modelSpecificModelDownloadRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will cancel a specific model download in progress.
         * /model/{model}/download/cancel [POST]
         */
        async modelSpecificModelDownloadCancelRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelSpecificModelDownloadCancel.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}/download/cancel`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will cancel a specific model download in progress.
         * /model/{model}/download/cancel [POST]
         */
        async modelSpecificModelDownloadCancel(requestParameters) {
          const response = await this.modelSpecificModelDownloadCancelRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is a Websocket Connection, to get the progress of the downloading of a specific model.
         * /model/{model}/download/progress [WS]
         */
        async modelSpecificModelDownloadProgressRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelSpecificModelDownloadProgress.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}/download/progress`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelDownloadProgressFromJSON)(jsonValue));
        }
        /**
         * This is a Websocket Connection, to get the progress of the downloading of a specific model.
         * /model/{model}/download/progress [WS]
         */
        async modelSpecificModelDownloadProgress(requestParameters) {
          const response = await this.modelSpecificModelDownloadProgressRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will load an already downloaded model into memory. This is different that downloading becuase downloading the entire model onto your machine, load will load the downloaded model into memory.
         * /model/{model}/load [POST]
         */
        async modelSpecificModelLoadRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelSpecificModelLoad.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}/load`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will load an already downloaded model into memory. This is different that downloading becuase downloading the entire model onto your machine, load will load the downloaded model into memory.
         * /model/{model}/load [POST]
         */
        async modelSpecificModelLoad(requestParameters) {
          const response = await this.modelSpecificModelLoadRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will unload an already loaded model from memory. This will free up the ram that this model is currently consuming.
         * /model/{model}/unload [POST]
         */
        async modelSpecificModelUnloadRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelSpecificModelUnload.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}/unload`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will unload an already loaded model from memory. This will free up the ram that this model is currently consuming.
         * /model/{model}/unload [POST]
         */
        async modelSpecificModelUnload(requestParameters) {
          const response = await this.modelSpecificModelUnloadRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update Machinelearning Model, this is only available for \"custom:true\" models.
         * /model/update [POST]
         */
        async modelUpdateRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/model/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ModelToJSON)(requestParameters.model)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will update Machinelearning Model, this is only available for \"custom:true\" models.
         * /model/update [POST]
         */
        async modelUpdate(requestParameters) {
          const response = await this.modelUpdateRaw(requestParameters);
          return await response.value();
        }
        /**
         * /model/{model} [GET]
         */
        async modelsSpecificModelSnapshotRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelsSpecificModelSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/model/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * /model/{model} [GET]
         */
        async modelsSpecificModelSnapshot(requestParameters) {
          const response = await this.modelsSpecificModelSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ModelApi = ModelApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ModelsApi.js
  var require_ModelsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ModelsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ModelsApi = class extends runtime.BaseAPI {
        /**
         * This will create a ml model, this is aloud however all models will be set to custom: true.  && we will verify we dont have a model that matches this model.
         * /models/create [POST]
         */
        async modelsCreateNewModelRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/models/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededModelToJSON)(requestParameters.seededModel)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
        }
        /**
         * This will create a ml model, this is aloud however all models will be set to custom: true.  && we will verify we dont have a model that matches this model.
         * /models/create [POST]
         */
        async modelsCreateNewModel(requestParameters) {
          const response = await this.modelsCreateNewModelRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a model, This is only available for custom: true models.
         * /models/{model}/delete [POST]
         */
        async modelsDeleteSpecificModelRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelsDeleteSpecificModel.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/models/{model}/delete`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a model, This is only available for custom: true models.
         * /models/{model}/delete [POST]
         */
        async modelsDeleteSpecificModel(requestParameters) {
          await this.modelsDeleteSpecificModelRaw(requestParameters);
        }
        /**
         * This is going to delete and sort of data that is associated with the Model itself IE the Assets/Libraries downloaded specifically for this model.  This is only available for the LLLM models for now.
         * /models/{model}/delete/cache [POST]
         */
        async modelsDeleteSpecificModelCacheRaw(requestParameters) {
          if (requestParameters.model === null || requestParameters.model === void 0) {
            throw new runtime.RequiredError("model", "Required parameter requestParameters.model was null or undefined when calling modelsDeleteSpecificModelCache.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/models/{model}/delete/cache`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ModelDeleteCacheInputToJSON)(requestParameters.modelDeleteCacheInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelDeleteCacheOutputFromJSON)(jsonValue));
        }
        /**
         * This is going to delete and sort of data that is associated with the Model itself IE the Assets/Libraries downloaded specifically for this model.  This is only available for the LLLM models for now.
         * /models/{model}/delete/cache [POST]
         */
        async modelsDeleteSpecificModelCache(requestParameters) {
          const response = await this.modelsDeleteSpecificModelCacheRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a snapshot of all of your models.
         * /models [GET]
         */
        async modelsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/models`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your models.
         * /models [GET]
         */
        async modelsSnapshot() {
          const response = await this.modelsSnapshotRaw();
          return await response.value();
        }
        /**
         * This will unload all of the ml models.(that are unloadable)
         * /models/unload [POST]
         */
        async unloadModelsRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/models/unload`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will unload all of the ml models.(that are unloadable)
         * /models/unload [POST]
         */
        async unloadModels() {
          await this.unloadModelsRaw();
        }
      };
      exports.ModelsApi = ModelsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/NotificationsApi.js
  var require_NotificationsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/NotificationsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NotificationsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var NotificationsApi = class extends runtime.BaseAPI {
        /**
         * This one is to universaly send notifications from any member of the system
         * Send notification
         */
        async sendLocalNotificationRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/notifications/local/send`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.NotificationToJSON)(requestParameters.notification)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This one is to universaly send notifications from any member of the system
         * Send notification
         */
        async sendLocalNotification(requestParameters) {
          await this.sendLocalNotificationRaw(requestParameters);
        }
      };
      exports.NotificationsApi = NotificationsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/OCRAnalysesApi.js
  var require_OCRAnalysesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/OCRAnalysesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OCRAnalysesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var OCRAnalysesApi = class extends runtime.BaseAPI {
        /**
         * This will get a snapshot of all of your ocr analyses, an ocr analysis is attached to an image analysis.
         * Your GET endpoint
         */
        async ocrAnalysesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/ocr_analyses`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OCRAnalysesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your ocr analyses, an ocr analysis is attached to an image analysis.
         * Your GET endpoint
         */
        async ocrAnalysesSnapshot(requestParameters) {
          const response = await this.ocrAnalysesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.OCRAnalysesApi = OCRAnalysesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/OSApi.js
  var require_OSApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/OSApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OSApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var OSApi = class extends runtime.BaseAPI {
        /**
         * This will link an external provider to your current auth0 account.  Will throw errors if your user is not signed in.
         * /os/link_provider [POST]
         */
        async linkProviderRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/os/link_provider`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededExternalProviderToJSON)(requestParameters.seededExternalProvider)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReturnedUserProfileFromJSON)(jsonValue));
        }
        /**
         * This will link an external provider to your current auth0 account.  Will throw errors if your user is not signed in.
         * /os/link_provider [POST]
         */
        async linkProvider(requestParameters) {
          const response = await this.linkProviderRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will restart PiecesOS, if successfull with return a 204. This is a LOCALOS Only Endpoint.
         * Your GET endpoint
         */
        async osRestartRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/os/restart`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will restart PiecesOS, if successfull with return a 204. This is a LOCALOS Only Endpoint.
         * Your GET endpoint
         */
        async osRestart() {
          await this.osRestartRaw();
        }
        /**
         * This is a helper endpoint that will check the status of an update for PiecesOS. IE if there is an update downloading, if there is one available, but the downloading has not started... etc
         * /os/update/check [POST]
         */
        async osUpdateCheckRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/os/update/check`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UncheckedOSUpdateToJSON)(requestParameters.uncheckedOSUpdate)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CheckedOSUpdateFromJSON)(jsonValue));
        }
        /**
         * This is a helper endpoint that will check the status of an update for PiecesOS. IE if there is an update downloading, if there is one available, but the downloading has not started... etc
         * /os/update/check [POST]
         */
        async osUpdateCheck(requestParameters) {
          const response = await this.osUpdateCheckRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will trigger a filer picker and return the string paths of the files that were selected.
         * /os/files/pick [POST]
         */
        async pickFilesRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/os/files/pick`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.FilePickerInputToJSON)(requestParameters.filePickerInput)
          });
          return new runtime.JSONApiResponse(response);
        }
        /**
         * This will trigger a filer picker and return the string paths of the files that were selected.
         * /os/files/pick [POST]
         */
        async pickFiles(requestParameters) {
          const response = await this.pickFilesRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will trigger a folder picker and return the string paths of the folders that were selected.
         * /os/folders/pick [POST]
         */
        async pickFoldersRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/os/folders/pick`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response);
        }
        /**
         * This will trigger a folder picker and return the string paths of the folders that were selected.
         * /os/folders/pick [POST]
         */
        async pickFolders() {
          const response = await this.pickFoldersRaw();
          return await response.value();
        }
        /**
         * A trigger that launches a Sign into OS Server
         */
        async signIntoOSRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/os/sign_in`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * A trigger that launches a Sign into OS Server
         */
        async signIntoOS() {
          const response = await this.signIntoOSRaw();
          return await response.value();
        }
        /**
         * A trigger that signs out a user from the OS
         * /os/sign_out [POST]
         */
        async signOutOfOSRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/os/sign_out`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UsersFromJSON)(jsonValue));
        }
        /**
         * A trigger that signs out a user from the OS
         * /os/sign_out [POST]
         */
        async signOutOfOS() {
          const response = await this.signOutOfOSRaw();
          return await response.value();
        }
      };
      exports.OSApi = OSApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/OpenAIApi.js
  var require_OpenAIApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/OpenAIApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OpenAIApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var OpenAIApi = class extends runtime.BaseAPI {
        /**
         * This will get a list of all of your Models from OpenAI w/ you user.auth0.openAI.apiKey.  if the user is unauthenticated or if the openAI key doesnt exist or if it is invalid we will return a 401.  Requires internet as this will ping out to OpenAI\'s server to get the models.
         * /open_ai/models/list [POST]
         */
        async openAiModelsListRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/open_ai/models/list`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OpenAIModelsListInputToJSON)(requestParameters.openAIModelsListInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OpenAIModelsListOutputFromJSON)(jsonValue));
        }
        /**
         * This will get a list of all of your Models from OpenAI w/ you user.auth0.openAI.apiKey.  if the user is unauthenticated or if the openAI key doesnt exist or if it is invalid we will return a 401.  Requires internet as this will ping out to OpenAI\'s server to get the models.
         * /open_ai/models/list [POST]
         */
        async openAiModelsList(requestParameters) {
          const response = await this.openAiModelsListRaw(requestParameters);
          return await response.value();
        }
      };
      exports.OpenAIApi = OpenAIApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/PKCEApi.js
  var require_PKCEApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/PKCEApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PKCEApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var PKCEApi = class extends runtime.BaseAPI {
        /**
         * This is a function to Clear a PKCE Authentication Flow
         * /pkce/clear [POST]
         */
        async clearPKCERaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/pkce/clear`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This is a function to Clear a PKCE Authentication Flow
         * /pkce/clear [POST]
         */
        async clearPKCE() {
          await this.clearPKCERaw();
        }
        /**
         * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
         * /pkce/code [POST]
         */
        async generateCodeRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/pkce/code`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededPKCEToJSON)(requestParameters.seededPKCE)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
        }
        /**
         * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
         * /pkce/code [POST]
         */
        async generateCode(requestParameters) {
          const response = await this.generateCodeRaw(requestParameters);
          return await response.value();
        }
        /**
         * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
         * /pkce/token [POST]
         */
        async generateTokenRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/pkce/token`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TokenizedPKCEToJSON)(requestParameters.tokenizedPKCE)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
        }
        /**
         * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
         * /pkce/token [POST]
         */
        async generateToken(requestParameters) {
          const response = await this.generateTokenRaw(requestParameters);
          return await response.value();
        }
        /**
         * An endpoint that returns a PKCE Challenge
         * Your GET endpoint
         */
        async getChallengeRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/pkce/challenge`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
        }
        /**
         * An endpoint that returns a PKCE Challenge
         * Your GET endpoint
         */
        async getChallenge() {
          const response = await this.getChallengeRaw();
          return await response.value();
        }
        /**
         * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
         * /pkce/response/code [POST]
         */
        async respondWithCodeRaw(requestParameters) {
          if (requestParameters.code === null || requestParameters.code === void 0) {
            throw new runtime.RequiredError("code", "Required parameter requestParameters.code was null or undefined when calling respondWithCode.");
          }
          if (requestParameters.state === null || requestParameters.state === void 0) {
            throw new runtime.RequiredError("state", "Required parameter requestParameters.state was null or undefined when calling respondWithCode.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const consumes = [
            { contentType: "application/x-www-form-urlencoded" }
          ];
          const canConsumeForm = runtime.canConsumeForm(consumes);
          let formParams;
          let useForm = false;
          if (useForm) {
            formParams = new FormData();
          } else {
            formParams = new URLSearchParams();
          }
          if (requestParameters.schema !== void 0) {
            formParams.append("schema", new Blob([JSON.stringify((0, models_1.EmbeddedModelSchemaToJSON)(requestParameters.schema))], { type: "application/json" }));
          }
          if (requestParameters.code !== void 0) {
            formParams.append("code", requestParameters.code);
          }
          if (requestParameters.state !== void 0) {
            formParams.append("state", requestParameters.state);
          }
          const response = await this.request({
            path: `/pkce/response/code`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
        }
        /**
         * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
         * /pkce/response/code [POST]
         */
        async respondWithCode(requestParameters) {
          const response = await this.respondWithCodeRaw(requestParameters);
          return await response.value();
        }
      };
      exports.PKCEApi = PKCEApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/PersonApi.js
  var require_PersonApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/PersonApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var PersonApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/person/{person}/scores/increment\' [POST]
         */
        async personScoresIncrementRaw(requestParameters) {
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling personScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/person/{person}/scores/increment`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/person/{person}/scores/increment\' [POST]
         */
        async personScoresIncrement(requestParameters) {
          await this.personScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a snapshot of a specific person
         * /person/{person} [GET]
         */
        async personSnapshotRaw(requestParameters) {
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling personSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/person/{person}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PersonFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a specific person
         * /person/{person} [GET]
         */
        async personSnapshot(requestParameters) {
          const response = await this.personSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific person
         * /person/update [POST]
         */
        async updatePersonRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/person/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PersonToJSON)(requestParameters.person)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PersonFromJSON)(jsonValue));
        }
        /**
         * This will update a specific person
         * /person/update [POST]
         */
        async updatePerson(requestParameters) {
          const response = await this.updatePersonRaw(requestParameters);
          return await response.value();
        }
      };
      exports.PersonApi = PersonApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/PersonsApi.js
  var require_PersonsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/PersonsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var PersonsApi = class extends runtime.BaseAPI {
        /**
         * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
         * /persons/{person}/assets/delete/{asset} [POST]
         */
        async personDisassociateAssetRaw(requestParameters) {
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling personDisassociateAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling personDisassociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/persons/{person}/assets/delete/{asset}`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
         * /persons/{person}/assets/delete/{asset} [POST]
         */
        async personDisassociateAsset(requestParameters) {
          await this.personDisassociateAssetRaw(requestParameters);
        }
        /**
         * This will create a new person.
         * /persons/create [POST]
         */
        async personsCreateNewPersonRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/persons/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededPersonToJSON)(requestParameters.seededPerson)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PersonFromJSON)(jsonValue));
        }
        /**
         * This will create a new person.
         * /persons/create [POST]
         */
        async personsCreateNewPerson(requestParameters) {
          const response = await this.personsCreateNewPersonRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific person.
         * /persons/{person}/delete [POST]
         */
        async personsDeletePersonRaw(requestParameters) {
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling personsDeletePerson.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/persons/{person}/delete`.replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific person.
         * /persons/{person}/delete [POST]
         */
        async personsDeletePerson(requestParameters) {
          await this.personsDeletePersonRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all of your people
         * /persons [GET]
         */
        async personsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/persons`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PersonsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your people
         * /persons [GET]
         */
        async personsSnapshot(requestParameters) {
          const response = await this.personsSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.PersonsApi = PersonsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/PieceApi.js
  var require_PieceApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/PieceApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PieceApi = void 0;
      var runtime = __importStar(require_runtime());
      var PieceApi = class extends runtime.BaseAPI {
        /**
         * This is a cloud only Api. This will get a preview of your publically accessble Piece.
         * / [GET]
         */
        async htmlShareRaw(requestParameters) {
          if (requestParameters.p === null || requestParameters.p === void 0) {
            throw new runtime.RequiredError("p", "Required parameter requestParameters.p was null or undefined when calling htmlShare.");
          }
          const queryParameters = {};
          if (requestParameters.p !== void 0) {
            queryParameters["p"] = requestParameters.p;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This is a cloud only Api. This will get a preview of your publically accessble Piece.
         * / [GET]
         */
        async htmlShare(requestParameters) {
          const response = await this.htmlShareRaw(requestParameters);
          return await response.value();
        }
      };
      exports.PieceApi = PieceApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/QGPTApi.js
  var require_QGPTApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/QGPTApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QGPTApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var QGPTApi = class extends runtime.BaseAPI {
        /**
         * This is only to generate suggested questions that the user can ask. ( we will provide the answer we displayed to the user, the relevant snippets used for the answer, and the previous query.  We will return a list of questions that can be displayed to the user.
         * /qgpt/hints [POST]
         */
        async hintsRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/hints`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTHintsInputToJSON)(requestParameters.qGPTHintsInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTQuestionOutputFromJSON)(jsonValue));
        }
        /**
         * This is only to generate suggested questions that the user can ask. ( we will provide the answer we displayed to the user, the relevant snippets used for the answer, and the previous query.  We will return a list of questions that can be displayed to the user.
         * /qgpt/hints [POST]
         */
        async hints(requestParameters) {
          const response = await this.hintsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This Endpoint is used for Who Support.  IE given context like a Seed, or a qgptConversation, who will be able to help out.   Input: - (optional) seed: Seed - ONLY GOING TO SUPPORT fragments.for now. - (optional) conversation: QGPTConversation.  Output: - persons: Persons
         * /qgpt/persons/related [POST]
         */
        async personsRelatedRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/persons/related`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTPersonsRelatedInputToJSON)(requestParameters.qGPTPersonsRelatedInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTPersonsRelatedOutputFromJSON)(jsonValue));
        }
        /**
         * This Endpoint is used for Who Support.  IE given context like a Seed, or a qgptConversation, who will be able to help out.   Input: - (optional) seed: Seed - ONLY GOING TO SUPPORT fragments.for now. - (optional) conversation: QGPTConversation.  Output: - persons: Persons
         * /qgpt/persons/related [POST]
         */
        async personsRelated(requestParameters) {
          const response = await this.personsRelatedRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is a version of qGPT stream that will stream the inputs.  This will handle relevance.  This will handle question.  This will throw an error if both are passed in. That being said if you want to utalize question && relevant, you can get stream results by passing in relevance with options.question:true.  This will handle multiple conversations.  This is a Websocket.  StatusCodes of the output of this will be on the output of the websocket: 200: success 401: invalid authentication/api key 429: Rate limit/Quota exceeded 500: server had an error 503: the engine is currently overloaded
         * /qgpt/stream [GET]
         */
        async qgptStreamRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/stream`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTStreamInputToJSON)(requestParameters.qGPTStreamInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTStreamOutputFromJSON)(jsonValue));
        }
        /**
         * This is a version of qGPT stream that will stream the inputs.  This will handle relevance.  This will handle question.  This will throw an error if both are passed in. That being said if you want to utalize question && relevant, you can get stream results by passing in relevance with options.question:true.  This will handle multiple conversations.  This is a Websocket.  StatusCodes of the output of this will be on the output of the websocket: 200: success 401: invalid authentication/api key 429: Rate limit/Quota exceeded 500: server had an error 503: the engine is currently overloaded
         * /qgpt/stream [GET]
         */
        async qgptStream(requestParameters) {
          const response = await this.qgptStreamRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is going to accept, relevant code snippets or uuids returned from the /qgpt/relevance endpoint, as well as a question query and we will return possible results to answer your question.  NOTE: - The relevant seeds, must require either an id, that was used within the /qgpt/relevance endpoint or a seed with afragment/string. or else we will throw and error.  This endpoint will take your query and your relevant snippets and use them to answer your question, returning multiple answers to your question all of which with scores.  200: success 401: invalid authentication/api key 429: Rate limit/Quota exceeded 500: server had an error 503: the engine is currently overloaded
         * /qgpt/question [POST]
         */
        async questionRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/question`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTQuestionInputToJSON)(requestParameters.qGPTQuestionInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTQuestionOutputFromJSON)(jsonValue));
        }
        /**
         * This is going to accept, relevant code snippets or uuids returned from the /qgpt/relevance endpoint, as well as a question query and we will return possible results to answer your question.  NOTE: - The relevant seeds, must require either an id, that was used within the /qgpt/relevance endpoint or a seed with afragment/string. or else we will throw and error.  This endpoint will take your query and your relevant snippets and use them to answer your question, returning multiple answers to your question all of which with scores.  200: success 401: invalid authentication/api key 429: Rate limit/Quota exceeded 500: server had an error 503: the engine is currently overloaded
         * /qgpt/question [POST]
         */
        async question(requestParameters) {
          const response = await this.questionRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is the first phase to the QGPT flow.  Please one of the following. 1. provide an absolute path on the users machine that we can use locally. 2. provide Seeds that you want to compare to, which will be ONLY fragment/string values(all other values will be ignored) 3. provide assets, here you can provide an iterable of the asset id, and we will do the rest 4. you can set your database boolean to true which will tell us to use your entire DB as the query space.  required - query: string; This is the question of the user. optional - question: boolean; This will by-pass the second endpoint and just ask the question and return the results(as an ease of use bool)  This endpoint will embed everything. and will return the relevance snippets that we will use in the next phase, to answer your question.  on the UI: we can show this to users (around this is the snippets we used to answer your question.)  Next: feed this information to the /qgpt/question [POST] endpoint to get your question answered.(unless you included the question:true optional boolean, then you will get the results from here.)
         * /qgpt/relevance [POST]
         */
        async relevanceRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/relevance`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTRelevanceInputToJSON)(requestParameters.qGPTRelevanceInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTRelevanceOutputFromJSON)(jsonValue));
        }
        /**
         * This is the first phase to the QGPT flow.  Please one of the following. 1. provide an absolute path on the users machine that we can use locally. 2. provide Seeds that you want to compare to, which will be ONLY fragment/string values(all other values will be ignored) 3. provide assets, here you can provide an iterable of the asset id, and we will do the rest 4. you can set your database boolean to true which will tell us to use your entire DB as the query space.  required - query: string; This is the question of the user. optional - question: boolean; This will by-pass the second endpoint and just ask the question and return the results(as an ease of use bool)  This endpoint will embed everything. and will return the relevance snippets that we will use in the next phase, to answer your question.  on the UI: we can show this to users (around this is the snippets we used to answer your question.)  Next: feed this information to the /qgpt/question [POST] endpoint to get your question answered.(unless you included the question:true optional boolean, then you will get the results from here.)
         * /qgpt/relevance [POST]
         */
        async relevance(requestParameters) {
          const response = await this.relevanceRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will take in a followup question and the history of the conversation, and emit your a prompt or query that you can pass to the /qgpt/relevance and then the /qgpt/question endpoint to get your next answer.
         * /qgpt/reprompt [POST]
         */
        async repromptRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/qgpt/reprompt`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.QGPTRepromptInputToJSON)(requestParameters.qGPTRepromptInput)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QGPTRepromptOutputFromJSON)(jsonValue));
        }
        /**
         * This will take in a followup question and the history of the conversation, and emit your a prompt or query that you can pass to the /qgpt/relevance and then the /qgpt/question endpoint to get your next answer.
         * /qgpt/reprompt [POST]
         */
        async reprompt(requestParameters) {
          const response = await this.repromptRaw(requestParameters);
          return await response.value();
        }
      };
      exports.QGPTApi = QGPTApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/RelationshipApi.js
  var require_RelationshipApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/RelationshipApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelationshipApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var RelationshipApi = class extends runtime.BaseAPI {
        /**
         * This will return a single relationship object.
         * /relationship/{relationship} [GET]
         */
        async relationshipsSpecificRelationshipSnapshotRaw(requestParameters) {
          if (requestParameters.relationship === null || requestParameters.relationship === void 0) {
            throw new runtime.RequiredError("relationship", "Required parameter requestParameters.relationship was null or undefined when calling relationshipsSpecificRelationshipSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/relationship/{relationship}`.replace(`{${"relationship"}}`, encodeURIComponent(String(requestParameters.relationship))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RelationshipFromJSON)(jsonValue));
        }
        /**
         * This will return a single relationship object.
         * /relationship/{relationship} [GET]
         */
        async relationshipsSpecificRelationshipSnapshot(requestParameters) {
          const response = await this.relationshipsSpecificRelationshipSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.RelationshipApi = RelationshipApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/RelationshipsApi.js
  var require_RelationshipsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/RelationshipsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RelationshipsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var RelationshipsApi = class extends runtime.BaseAPI {
        /**
         * This will reurn all of the relationships that exists within your pieces db.
         * /relationships [GET]
         */
        async relationshipsSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/relationships`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RelationshipsFromJSON)(jsonValue));
        }
        /**
         * This will reurn all of the relationships that exists within your pieces db.
         * /relationships [GET]
         */
        async relationshipsSnapshot() {
          const response = await this.relationshipsSnapshotRaw();
          return await response.value();
        }
      };
      exports.RelationshipsApi = RelationshipsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/SearchApi.js
  var require_SearchApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/SearchApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SearchApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var SearchApi = class extends runtime.BaseAPI {
        /**
         * This will run FTS for exact search, and will NOT run fuzzy matching. This will only search the content within the
         * /search/full_text [GET]
         */
        async fullTextSearchRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.query !== void 0) {
            queryParameters["query"] = requestParameters.query;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/search/full_text`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SearchedAssetsFromJSON)(jsonValue));
        }
        /**
         * This will run FTS for exact search, and will NOT run fuzzy matching. This will only search the content within the
         * /search/full_text [GET]
         */
        async fullTextSearch(requestParameters) {
          const response = await this.fullTextSearchRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will run ncs on your assets. This will simply return FlattenedAssets, but will just be the assetuuids that match.
         * /search/neural_code [GET]
         */
        async neuralCodeSearchRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.query !== void 0) {
            queryParameters["query"] = requestParameters.query;
          }
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/search/neural_code`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SearchedAssetsFromJSON)(jsonValue));
        }
        /**
         * This will run ncs on your assets. This will simply return FlattenedAssets, but will just be the assetuuids that match.
         * /search/neural_code [GET]
         */
        async neuralCodeSearch(requestParameters) {
          const response = await this.neuralCodeSearchRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will run our tag based search, and return the assets that best match your passed in tags. This will simply return FlattenedAssets, but will just be the assetuuids that match.
         * /search/tag_based [POST]
         */
        async tagBasedSearchRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.pseudo !== void 0) {
            queryParameters["pseudo"] = requestParameters.pseudo;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/search/tag_based`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAssetTagsToJSON)(requestParameters.seededAssetTags)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SearchedAssetsFromJSON)(jsonValue));
        }
        /**
         * This will run our tag based search, and return the assets that best match your passed in tags. This will simply return FlattenedAssets, but will just be the assetuuids that match.
         * /search/tag_based [POST]
         */
        async tagBasedSearch(requestParameters) {
          const response = await this.tagBasedSearchRaw(requestParameters);
          return await response.value();
        }
      };
      exports.SearchApi = SearchApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/SensitiveApi.js
  var require_SensitiveApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/SensitiveApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitiveApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var SensitiveApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/sensitive/{sensitive}/scores/increment\' [POST]
         */
        async sensitiveScoresIncrementRaw(requestParameters) {
          if (requestParameters.sensitive === null || requestParameters.sensitive === void 0) {
            throw new runtime.RequiredError("sensitive", "Required parameter requestParameters.sensitive was null or undefined when calling sensitiveScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/sensitive/{sensitive}/scores/increment`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters.sensitive))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/sensitive/{sensitive}/scores/increment\' [POST]
         */
        async sensitiveScoresIncrement(requestParameters) {
          await this.sensitiveScoresIncrementRaw(requestParameters);
        }
        /**
         * This will get a specific sensitive via the sensitive uuid.
         * /sensitive/{sensitive} [GET]
         */
        async sensitiveSnapshotRaw(requestParameters) {
          if (requestParameters.sensitive === null || requestParameters.sensitive === void 0) {
            throw new runtime.RequiredError("sensitive", "Required parameter requestParameters.sensitive was null or undefined when calling sensitiveSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/sensitive/{sensitive}`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters.sensitive))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SensitiveFromJSON)(jsonValue));
        }
        /**
         * This will get a specific sensitive via the sensitive uuid.
         * /sensitive/{sensitive} [GET]
         */
        async sensitiveSnapshot(requestParameters) {
          const response = await this.sensitiveSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will update a specific sensitive
         * /sensitive/update [POST]
         */
        async updateSensitiveRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/sensitive/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SensitiveToJSON)(requestParameters.sensitive)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SensitiveFromJSON)(jsonValue));
        }
        /**
         * This will update a specific sensitive
         * /sensitive/update [POST]
         */
        async updateSensitive(requestParameters) {
          const response = await this.updateSensitiveRaw(requestParameters);
          return await response.value();
        }
      };
      exports.SensitiveApi = SensitiveApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/SensitivesApi.js
  var require_SensitivesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/SensitivesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SensitivesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var SensitivesApi = class extends runtime.BaseAPI {
        /**
         * This will create a new sensitive model.
         * /sensitives/create [POST]
         */
        async sensitivesCreateNewSensitiveRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/sensitives/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededSensitiveToJSON)(requestParameters.seededSensitive)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SensitiveFromJSON)(jsonValue));
        }
        /**
         * This will create a new sensitive model.
         * /sensitives/create [POST]
         */
        async sensitivesCreateNewSensitive(requestParameters) {
          const response = await this.sensitivesCreateNewSensitiveRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a sensitive based on the sensitive uuid.
         * /sensitives/{sensitive}/delete [POST]
         */
        async sensitivesDeleteSensitiveRaw(requestParameters) {
          if (requestParameters.sensitive === null || requestParameters.sensitive === void 0) {
            throw new runtime.RequiredError("sensitive", "Required parameter requestParameters.sensitive was null or undefined when calling sensitivesDeleteSensitive.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/sensitives/{sensitive}/delete`.replace(`{${"sensitive"}}`, encodeURIComponent(String(requestParameters.sensitive))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a sensitive based on the sensitive uuid.
         * /sensitives/{sensitive}/delete [POST]
         */
        async sensitivesDeleteSensitive(requestParameters) {
          await this.sensitivesDeleteSensitiveRaw(requestParameters);
        }
        /**
         * This will get a snapshot of all of the sensitives.
         * /sensitives [GET]
         */
        async sensitivesSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/sensitives`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SensitivesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of the sensitives.
         * /sensitives [GET]
         */
        async sensitivesSnapshot() {
          const response = await this.sensitivesSnapshotRaw();
          return await response.value();
        }
      };
      exports.SensitivesApi = SensitivesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/ShareApi.js
  var require_ShareApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/ShareApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ShareApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var ShareApi = class extends runtime.BaseAPI {
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/share/{share}/scores/increment\' [POST]
         */
        async shareScoresIncrementRaw(requestParameters) {
          if (requestParameters.share === null || requestParameters.share === void 0) {
            throw new runtime.RequiredError("share", "Required parameter requestParameters.share was null or undefined when calling shareScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/share/{share}/scores/increment`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/share/{share}/scores/increment\' [POST]
         */
        async shareScoresIncrement(requestParameters) {
          await this.shareScoresIncrementRaw(requestParameters);
        }
        /**
         * Get the snapshot of a specific share.
         * /share/{share}
         */
        async shareSnapshotRaw(requestParameters) {
          if (requestParameters.share === null || requestParameters.share === void 0) {
            throw new runtime.RequiredError("share", "Required parameter requestParameters.share was null or undefined when calling shareSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/share/{share}`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ShareFromJSON)(jsonValue));
        }
        /**
         * Get the snapshot of a specific share.
         * /share/{share}
         */
        async shareSnapshot(requestParameters) {
          const response = await this.shareSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will accept a Share that the user wants to update, and will return a full Share that was updated!
         * /share/update [POST]
         */
        async shareUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/share/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ShareToJSON)(requestParameters.share)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ShareFromJSON)(jsonValue));
        }
        /**
         * This endpoint will accept a Share that the user wants to update, and will return a full Share that was updated!
         * /share/update [POST]
         */
        async shareUpdate(requestParameters) {
          const response = await this.shareUpdateRaw(requestParameters);
          return await response.value();
        }
      };
      exports.ShareApi = ShareApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/SharesApi.js
  var require_SharesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/SharesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SharesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var SharesApi = class extends runtime.BaseAPI {
        /**
         * This endpoint will accept an asset. Response here will be a Share that was created.
         * /shares/create [POST]
         */
        async sharesCreateNewShareRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/shares/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededShareToJSON)(requestParameters.seededShare)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
        }
        /**
         * This endpoint will accept an asset. Response here will be a Share that was created.
         * /shares/create [POST]
         */
        async sharesCreateNewShare(requestParameters) {
          const response = await this.sharesCreateNewShareRaw(requestParameters);
          return await response.value();
        }
        /**
         * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
         * /shares/{share}/delete [POST]
         */
        async sharesDeleteShareRaw(requestParameters) {
          if (requestParameters.share === null || requestParameters.share === void 0) {
            throw new runtime.RequiredError("share", "Required parameter requestParameters.share was null or undefined when calling sharesDeleteShare.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/shares/{share}/delete`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
         * /shares/{share}/delete [POST]
         */
        async sharesDeleteShare(requestParameters) {
          const response = await this.sharesDeleteShareRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
         * /shares [GET]
         */
        async sharesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/shares`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
        }
        /**
         * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
         * /shares [GET]
         */
        async sharesSnapshot(requestParameters) {
          const response = await this.sharesSnapshotRaw(requestParameters);
          return await response.value();
        }
        /**
         * This is an endpoint to enable a client to access a specific share through a provided share id.
         * /shares/{share} [GET]
         */
        async sharesSpecificShareSnapshotRaw(requestParameters) {
          if (requestParameters.share === null || requestParameters.share === void 0) {
            throw new runtime.RequiredError("share", "Required parameter requestParameters.share was null or undefined when calling sharesSpecificShareSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/shares/{share}`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ShareFromJSON)(jsonValue));
        }
        /**
         * This is an endpoint to enable a client to access a specific share through a provided share id.
         * /shares/{share} [GET]
         */
        async sharesSpecificShareSnapshot(requestParameters) {
          const response = await this.sharesSpecificShareSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.SharesApi = SharesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/TagApi.js
  var require_TagApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/TagApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TagApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var TagApi = class extends runtime.BaseAPI {
        /**
         * This will associate a tag with a asset.
         * /tag/{tag}/assets/associate/{asset} [POST]
         */
        async tagAssociateAssetRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling tagAssociateAsset.");
          }
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagAssociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/tag/{tag}/assets/associate/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a tag with a asset.
         * /tag/{tag}/assets/associate/{asset} [POST]
         */
        async tagAssociateAsset(requestParameters) {
          await this.tagAssociateAssetRaw(requestParameters);
        }
        /**
         * This will associate a tag with a person.
         * /tag/{tag}/persons/associate/{person} [POST]
         */
        async tagAssociatePersonRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagAssociatePerson.");
          }
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling tagAssociatePerson.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/tag/{tag}/persons/associate/{person}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a tag with a person.
         * /tag/{tag}/persons/associate/{person} [POST]
         */
        async tagAssociatePerson(requestParameters) {
          await this.tagAssociatePersonRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a tag from a asset.
         * /tag/{tag}/assets/disassociate/{asset} [POST]
         */
        async tagDisassociateAssetRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagDisassociateAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling tagDisassociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/tag/{tag}/assets/disassociate/{asset}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a tag from a asset.
         * /tag/{tag}/assets/disassociate/{asset} [POST]
         */
        async tagDisassociateAsset(requestParameters) {
          await this.tagDisassociateAssetRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a tag from a person.
         * /tag/{tag}/persons/disassociate/{person} [POST]
         */
        async tagDisassociatePersonRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagDisassociatePerson.");
          }
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling tagDisassociatePerson.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/tag/{tag}/persons/disassociate/{person}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a tag from a person.
         * /tag/{tag}/persons/disassociate/{person} [POST]
         */
        async tagDisassociatePerson(requestParameters) {
          await this.tagDisassociatePersonRaw(requestParameters);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/tag/{tag}/scores/increment\' [POST]
         */
        async tagScoresIncrementRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/tag/{tag}/scores/increment`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/tag/{tag}/scores/increment\' [POST]
         */
        async tagScoresIncrement(requestParameters) {
          await this.tagScoresIncrementRaw(requestParameters);
        }
        /**
         * This will update a specific tag.
         * /tag/update [POST]
         */
        async tagUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/tag/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TagToJSON)(requestParameters.tag)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TagFromJSON)(jsonValue));
        }
        /**
         * This will update a specific tag.
         * /tag/update [POST]
         */
        async tagUpdate(requestParameters) {
          const response = await this.tagUpdateRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a specific tag.
         * /tag/{tag} [GET]
         */
        async tagsSpecificTagSnapshotRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagsSpecificTagSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/tag/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TagFromJSON)(jsonValue));
        }
        /**
         * This will get a specific tag.
         * /tag/{tag} [GET]
         */
        async tagsSpecificTagSnapshot(requestParameters) {
          const response = await this.tagsSpecificTagSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.TagApi = TagApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/TagsApi.js
  var require_TagsApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/TagsApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TagsApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var TagsApi = class extends runtime.BaseAPI {
        /**
         * This will create a new tag.
         * /tags/create [POST]
         */
        async tagsCreateNewTagRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/tags/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTagToJSON)(requestParameters.seededTag)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TagFromJSON)(jsonValue));
        }
        /**
         * This will create a new tag.
         * /tags/create [POST]
         */
        async tagsCreateNewTag(requestParameters) {
          const response = await this.tagsCreateNewTagRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific tag.
         * /tags/{tag}/delete [POST]
         */
        async tagsDeleteSpecificTagRaw(requestParameters) {
          if (requestParameters.tag === null || requestParameters.tag === void 0) {
            throw new runtime.RequiredError("tag", "Required parameter requestParameters.tag was null or undefined when calling tagsDeleteSpecificTag.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/tags/{tag}/delete`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific tag.
         * /tags/{tag}/delete [POST]
         */
        async tagsDeleteSpecificTag(requestParameters) {
          await this.tagsDeleteSpecificTagRaw(requestParameters);
        }
        /**
         * This will check all of the tags in our database to see if this specific provided tag actually exists, if not we will just return a null tag in the output.
         * /tags/exists [POST]
         */
        async tagsExistsRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/tags/exists`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ExistentMetadataToJSON)(requestParameters.existentMetadata)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExistingMetadataFromJSON)(jsonValue));
        }
        /**
         * This will check all of the tags in our database to see if this specific provided tag actually exists, if not we will just return a null tag in the output.
         * /tags/exists [POST]
         */
        async tagsExists(requestParameters) {
          const response = await this.tagsExistsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a snapshot of all of your tags.
         * /tags [GET]
         */
        async tagsSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/tags`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TagsFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all of your tags.
         * /tags [GET]
         */
        async tagsSnapshot(requestParameters) {
          const response = await this.tagsSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.TagsApi = TagsApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/UltraSuiteApi.js
  var require_UltraSuiteApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/UltraSuiteApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UltraSuiteApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var UltraSuiteApi = class extends runtime.BaseAPI {
        /**
         * This Endpoint will create an Asset that is sent from UltraSuite.
         * /ultra_suite/assets/create [POST]
         */
        async assetsCreateUltraSuiteAssetRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/ultra_suite/assets/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededUltraSuiteAssetToJSON)(requestParameters.seededUltraSuiteAsset)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssetFromJSON)(jsonValue));
        }
        /**
         * This Endpoint will create an Asset that is sent from UltraSuite.
         * /ultra_suite/assets/create [POST]
         */
        async assetsCreateUltraSuiteAsset(requestParameters) {
          const response = await this.assetsCreateUltraSuiteAssetRaw(requestParameters);
          return await response.value();
        }
      };
      exports.UltraSuiteApi = UltraSuiteApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/UserApi.js
  var require_UserApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/UserApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UserApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var UserApi = class extends runtime.BaseAPI {
        /**
         * An endpoint to clear the current user.
         * /user/clear
         */
        async clearUserRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/user/clear`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * An endpoint to clear the current user.
         * /user/clear
         */
        async clearUser() {
          await this.clearUserRaw();
        }
        /**
         * This will select the current user.
         * /user/select [POST]
         */
        async selectUserRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          const response = await this.request({
            path: `/user/select`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.Auth0UserToJSON)(requestParameters.auth0User)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * This will select the current user.
         * /user/select [POST]
         */
        async selectUser(requestParameters) {
          const response = await this.selectUserRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will stream in the current user, not quiet sure yet how we want to do this.
         * /user/stream [GET]
         */
        async streamUserRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/user/stream`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * This will stream in the current user, not quiet sure yet how we want to do this.
         * /user/stream [GET]
         */
        async streamUser() {
          const response = await this.streamUserRaw();
          return await response.value();
        }
        /**
         * This will update a specific user in the database.
         * /user/update [POST]
         */
        async updateUserRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/user/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * This will update a specific user in the database.
         * /user/update [POST]
         */
        async updateUser(requestParameters) {
          const response = await this.updateUserRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
         * Your GET endpoint
         */
        async userProvidersRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/user/providers`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReturnedUserProfileFromJSON)(jsonValue));
        }
        /**
         * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
         * Your GET endpoint
         */
        async userProviders() {
          const response = await this.userProvidersRaw();
          return await response.value();
        }
        /**
         * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
         * /user [GET]
         */
        async userSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/user`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReturnedUserProfileFromJSON)(jsonValue));
        }
        /**
         * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
         * /user [GET]
         */
        async userSnapshot() {
          const response = await this.userSnapshotRaw();
          return await response.value();
        }
        /**
         * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
         * /user/update/vanity [POST]
         */
        async userUpdateVanityRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/user/update/vanity`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
         * /user/update/vanity [POST]
         */
        async userUpdateVanity(requestParameters) {
          const response = await this.userUpdateVanityRaw(requestParameters);
          return await response.value();
        }
      };
      exports.UserApi = UserApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/UsersApi.js
  var require_UsersApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/UsersApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UsersApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var UsersApi = class extends runtime.BaseAPI {
        /**
         * Creates a User From a oAuth Token
         * /users/authenticate/from_token [POST]
         */
        async authenticateFromOauthTokenRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          if (this.configuration && this.configuration.accessToken) {
            if (typeof this.configuration.accessToken === "function") {
              headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            } else {
              headerParameters["Authorization"] = this.configuration.accessToken;
            }
          }
          const response = await this.request({
            path: `/users/authenticate/from_token`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OAuthTokenToJSON)(requestParameters.oAuthToken)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * Creates a User From a oAuth Token
         * /users/authenticate/from_token [POST]
         */
        async authenticateFromOauthToken(requestParameters) {
          const response = await this.authenticateFromOauthTokenRaw(requestParameters);
          return await response.value();
        }
        /**
         * Locally Removing a user for the purpose of Signing Out
         * /users/{user}/disconnect [POST]
         */
        async usersDisconnectUserRaw(requestParameters) {
          if (requestParameters.user === null || requestParameters.user === void 0) {
            throw new runtime.RequiredError("user", "Required parameter requestParameters.user was null or undefined when calling usersDisconnectUser.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/users/{user}/disconnect`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UsersFromJSON)(jsonValue));
        }
        /**
         * Locally Removing a user for the purpose of Signing Out
         * /users/{user}/disconnect [POST]
         */
        async usersDisconnectUser(requestParameters) {
          const response = await this.usersDisconnectUserRaw(requestParameters);
          return await response.value();
        }
        /**
         * this will return a snapshot of all of the users that are in the users database. TODO might want to make this internal.
         * /users [GET]
         */
        async usersSnapshotRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/users`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UsersFromJSON)(jsonValue));
        }
        /**
         * this will return a snapshot of all of the users that are in the users database. TODO might want to make this internal.
         * /users [GET]
         */
        async usersSnapshot() {
          const response = await this.usersSnapshotRaw();
          return await response.value();
        }
        /**
         * This enables the client to get the current user.  This endpoint will return a UserPRofile or will throw an error since you are sending user uid.
         * /users/{user} [GET] Scoped to Users
         */
        async usersSpecificUserSnapshotRaw(requestParameters) {
          if (requestParameters.user === null || requestParameters.user === void 0) {
            throw new runtime.RequiredError("user", "Required parameter requestParameters.user was null or undefined when calling usersSpecificUserSnapshot.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/users/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
        }
        /**
         * This enables the client to get the current user.  This endpoint will return a UserPRofile or will throw an error since you are sending user uid.
         * /users/{user} [GET] Scoped to Users
         */
        async usersSpecificUserSnapshot(requestParameters) {
          const response = await this.usersSpecificUserSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.UsersApi = UsersApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/WebsiteApi.js
  var require_WebsiteApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/WebsiteApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebsiteApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var WebsiteApi = class extends runtime.BaseAPI {
        /**
         * This will associate a website with a asset.
         * /website/{website}/assets/associate/{asset} [POST]
         */
        async websiteAssociateAssetRaw(requestParameters) {
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling websiteAssociateAsset.");
          }
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websiteAssociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/website/{website}/assets/associate/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a website with a asset.
         * /website/{website}/assets/associate/{asset} [POST]
         */
        async websiteAssociateAsset(requestParameters) {
          await this.websiteAssociateAssetRaw(requestParameters);
        }
        /**
         * This will associate a website with a person.
         * /website/{website}/persons/associate/{person} [POST]
         */
        async websiteAssociatePersonRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websiteAssociatePerson.");
          }
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling websiteAssociatePerson.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/website/{website}/persons/associate/{person}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will associate a website with a person.
         * /website/{website}/persons/associate/{person} [POST]
         */
        async websiteAssociatePerson(requestParameters) {
          await this.websiteAssociatePersonRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a website from a asset.
         * /website/{website}/assets/disassociate/{asset} [POST]
         */
        async websiteDisassociateAssetRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websiteDisassociateAsset.");
          }
          if (requestParameters.asset === null || requestParameters.asset === void 0) {
            throw new runtime.RequiredError("asset", "Required parameter requestParameters.asset was null or undefined when calling websiteDisassociateAsset.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/website/{website}/assets/disassociate/{asset}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a website from a asset.
         * /website/{website}/assets/disassociate/{asset} [POST]
         */
        async websiteDisassociateAsset(requestParameters) {
          await this.websiteDisassociateAssetRaw(requestParameters);
        }
        /**
         * This will enable us to dissassociate a website from a person.
         * /website/{website}/persons/disassociate/{person} [POST]
         */
        async websiteDisassociatePersonRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websiteDisassociatePerson.");
          }
          if (requestParameters.person === null || requestParameters.person === void 0) {
            throw new runtime.RequiredError("person", "Required parameter requestParameters.person was null or undefined when calling websiteDisassociatePerson.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/website/{website}/persons/disassociate/{person}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))).replace(`{${"person"}}`, encodeURIComponent(String(requestParameters.person))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will enable us to dissassociate a website from a person.
         * /website/{website}/persons/disassociate/{person} [POST]
         */
        async websiteDisassociatePerson(requestParameters) {
          await this.websiteDisassociatePersonRaw(requestParameters);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/website/{website}/scores/increment\' [POST]
         */
        async websiteScoresIncrementRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websiteScoresIncrement.");
          }
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/website/{website}/scores/increment`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement)
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
         * \'/website/{website}/scores/increment\' [POST]
         */
        async websiteScoresIncrement(requestParameters) {
          await this.websiteScoresIncrementRaw(requestParameters);
        }
        /**
         * This will update a specific website.
         * /website/update [POST]
         */
        async websiteUpdateRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/website/update`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.WebsiteToJSON)(requestParameters.website)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WebsiteFromJSON)(jsonValue));
        }
        /**
         * This will update a specific website.
         * /website/update [POST]
         */
        async websiteUpdate(requestParameters) {
          const response = await this.websiteUpdateRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a snapshot of a single website.
         * /website/{website} [GET]
         */
        async websitesSpecificWebsiteSnapshotRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websitesSpecificWebsiteSnapshot.");
          }
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/website/{website}`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WebsiteFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of a single website.
         * /website/{website} [GET]
         */
        async websitesSpecificWebsiteSnapshot(requestParameters) {
          const response = await this.websitesSpecificWebsiteSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.WebsiteApi = WebsiteApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/WebsitesApi.js
  var require_WebsitesApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/WebsitesApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebsitesApi = void 0;
      var runtime = __importStar(require_runtime());
      var models_1 = require_models();
      var WebsitesApi = class extends runtime.BaseAPI {
        /**
         * This will create a website and attach it to a specific asset.
         * /websites/create [POST]
         */
        async websitesCreateNewWebsiteRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/websites/create`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededWebsiteToJSON)(requestParameters.seededWebsite)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WebsiteFromJSON)(jsonValue));
        }
        /**
         * This will create a website and attach it to a specific asset.
         * /websites/create [POST]
         */
        async websitesCreateNewWebsite(requestParameters) {
          const response = await this.websitesCreateNewWebsiteRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will delete a specific website!
         * /websites/{website}/delete [POST]
         */
        async websitesDeleteSpecificWebsiteRaw(requestParameters) {
          if (requestParameters.website === null || requestParameters.website === void 0) {
            throw new runtime.RequiredError("website", "Required parameter requestParameters.website was null or undefined when calling websitesDeleteSpecificWebsite.");
          }
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/websites/{website}/delete`.replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.VoidApiResponse(response);
        }
        /**
         * This will delete a specific website!
         * /websites/{website}/delete [POST]
         */
        async websitesDeleteSpecificWebsite(requestParameters) {
          await this.websitesDeleteSpecificWebsiteRaw(requestParameters);
        }
        /**
         * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
         * /websites/exists [POST]
         */
        async websitesExistsRaw(requestParameters) {
          const queryParameters = {};
          const headerParameters = {};
          headerParameters["Content-Type"] = "application/json";
          const response = await this.request({
            path: `/websites/exists`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ExistentMetadataToJSON)(requestParameters.existentMetadata)
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExistingMetadataFromJSON)(jsonValue));
        }
        /**
         * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
         * /websites/exists [POST]
         */
        async websitesExists(requestParameters) {
          const response = await this.websitesExistsRaw(requestParameters);
          return await response.value();
        }
        /**
         * This will get a snapshot of all your websites.
         * /websites [GET]
         */
        async websitesSnapshotRaw(requestParameters) {
          const queryParameters = {};
          if (requestParameters.transferables !== void 0) {
            queryParameters["transferables"] = requestParameters.transferables;
          }
          const headerParameters = {};
          const response = await this.request({
            path: `/websites`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WebsitesFromJSON)(jsonValue));
        }
        /**
         * This will get a snapshot of all your websites.
         * /websites [GET]
         */
        async websitesSnapshot(requestParameters) {
          const response = await this.websitesSnapshotRaw(requestParameters);
          return await response.value();
        }
      };
      exports.WebsitesApi = WebsitesApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/WellKnownApi.js
  var require_WellKnownApi = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/WellKnownApi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WellKnownApi = void 0;
      var runtime = __importStar(require_runtime());
      var WellKnownApi = class extends runtime.BaseAPI {
        /**
         * This will get the health of the server.
         * /.well-known/health [GET]
         */
        async getWellKnownHealthRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/.well-known/health`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This will get the health of the server.
         * /.well-known/health [GET]
         */
        async getWellKnownHealth() {
          const response = await this.getWellKnownHealthRaw();
          return await response.value();
        }
        /**
         * This will get the version of the server. This will return a string of current version.
         * /.well-known/version [Get]
         */
        async getWellKnownVersionRaw() {
          const queryParameters = {};
          const headerParameters = {};
          const response = await this.request({
            path: `/.well-known/version`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters
          });
          return new runtime.TextApiResponse(response);
        }
        /**
         * This will get the version of the server. This will return a string of current version.
         * /.well-known/version [Get]
         */
        async getWellKnownVersion() {
          const response = await this.getWellKnownVersionRaw();
          return await response.value();
        }
      };
      exports.WellKnownApi = WellKnownApi;
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/apis/index.js
  var require_apis = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/apis/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_ActivitiesApi(), exports);
      __exportStar(require_ActivityApi(), exports);
      __exportStar(require_AllocationApi(), exports);
      __exportStar(require_AllocationsApi(), exports);
      __exportStar(require_AnalysesApi(), exports);
      __exportStar(require_AnchorApi(), exports);
      __exportStar(require_AnchorPointApi(), exports);
      __exportStar(require_AnchorPointsApi(), exports);
      __exportStar(require_AnchorsApi(), exports);
      __exportStar(require_AnnotationApi(), exports);
      __exportStar(require_AnnotationsApi(), exports);
      __exportStar(require_ApplicationApi(), exports);
      __exportStar(require_ApplicationsApi(), exports);
      __exportStar(require_AssetApi(), exports);
      __exportStar(require_AssetsApi(), exports);
      __exportStar(require_Auth0Api(), exports);
      __exportStar(require_BackupApi(), exports);
      __exportStar(require_ClassificationApi(), exports);
      __exportStar(require_CodeAnalysesApi(), exports);
      __exportStar(require_ConnectorApi(), exports);
      __exportStar(require_ConversationApi(), exports);
      __exportStar(require_ConversationMessageApi(), exports);
      __exportStar(require_ConversationMessagesApi(), exports);
      __exportStar(require_ConversationsApi(), exports);
      __exportStar(require_DatabaseApi(), exports);
      __exportStar(require_DiscoveryApi(), exports);
      __exportStar(require_DistributionApi(), exports);
      __exportStar(require_DistributionsApi(), exports);
      __exportStar(require_ExternalProviderApi(), exports);
      __exportStar(require_FormatApi(), exports);
      __exportStar(require_FormatsApi(), exports);
      __exportStar(require_GithubApi(), exports);
      __exportStar(require_HintApi(), exports);
      __exportStar(require_HintsApi(), exports);
      __exportStar(require_ImageAnalysesApi(), exports);
      __exportStar(require_LinkifyApi(), exports);
      __exportStar(require_MacOSApi(), exports);
      __exportStar(require_MachineLearningApi(), exports);
      __exportStar(require_MetricsApi(), exports);
      __exportStar(require_ModelApi(), exports);
      __exportStar(require_ModelsApi(), exports);
      __exportStar(require_NotificationsApi(), exports);
      __exportStar(require_OCRAnalysesApi(), exports);
      __exportStar(require_OSApi(), exports);
      __exportStar(require_OpenAIApi(), exports);
      __exportStar(require_PKCEApi(), exports);
      __exportStar(require_PersonApi(), exports);
      __exportStar(require_PersonsApi(), exports);
      __exportStar(require_PieceApi(), exports);
      __exportStar(require_QGPTApi(), exports);
      __exportStar(require_RelationshipApi(), exports);
      __exportStar(require_RelationshipsApi(), exports);
      __exportStar(require_SearchApi(), exports);
      __exportStar(require_SensitiveApi(), exports);
      __exportStar(require_SensitivesApi(), exports);
      __exportStar(require_ShareApi(), exports);
      __exportStar(require_SharesApi(), exports);
      __exportStar(require_TagApi(), exports);
      __exportStar(require_TagsApi(), exports);
      __exportStar(require_UltraSuiteApi(), exports);
      __exportStar(require_UserApi(), exports);
      __exportStar(require_UsersApi(), exports);
      __exportStar(require_WebsiteApi(), exports);
      __exportStar(require_WebsitesApi(), exports);
      __exportStar(require_WellKnownApi(), exports);
    }
  });

  // node_modules/@pieces.app/pieces-os-client/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@pieces.app/pieces-os-client/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_runtime(), exports);
      __exportStar(require_apis(), exports);
      __exportStar(require_models(), exports);
    }
  });

  // src/CopilotStreamController.ts
  var Pieces = __toESM(require_dist());
  var CopilotStreamController = class _CopilotStreamController {
    //@TODO implement socket unloading
    constructor() {
      this.ws = null;
      // the current answer element to be updated from socket events
      // this is resolved when the socket is ready.
      this.connectionPromise = new Promise((res) => res);
      this.connect();
    }
    /**
     * cleanup function
     */
    closeSocket() {
      this.ws?.close();
    }
    /**
     * This is the entry point for all chat messages into this socket.
     * @param param0 The inputted user query, and the function to update the message
     */
    async askQGPT({
      query,
      setMessage: setMessage2
    }) {
      if (!this.ws) {
        this.connect();
      }
      const input = {
        question: {
          query,
          relevant: { iterable: [] }
          //@TODO hook up /relevance here for context
        }
      };
      this.handleMessages({ input, setMessage: setMessage2 });
    }
    /**
     * Connects the websocket, handles all message callbacks, error handling, and rendering.
     */
    connect() {
      this.ws = new WebSocket(`ws://localhost:1000/qgpt/stream`);
      let totalMessage = "";
      this.ws.onmessage = (msg) => {
        const json = JSON.parse(msg.data);
        const result = Pieces.QGPTStreamOutputFromJSON(json);
        const answer = result.question?.answers.iterable[0];
        if (result.status === "COMPLETED") {
          if (!totalMessage) {
            this.setMessage?.("ERROR: received no messages from the copilot websockets");
          }
          this.setMessage?.(
            totalMessage
          );
          totalMessage = "";
          return;
        } else if (result.status === "FAILED" || result.status === "UNKNOWN") {
          this.setMessage?.("Message failed");
          totalMessage = "";
          return;
        }
        if (answer?.text) {
          totalMessage += answer.text;
        }
        this.setMessage?.(totalMessage);
      };
      const refreshSockets = (error) => {
        if (error)
          console.error(error);
        totalMessage = "";
        this.setMessage?.("Websocket closed");
        this.ws = null;
      };
      this.ws.onerror = refreshSockets;
      this.ws.onclose = refreshSockets;
      this.connectionPromise = new Promise((res) => {
        if (!this.ws)
          throw new Error(
            "There is no websocket in Copilot Stream Controller (race condition)"
          );
        this.ws.onopen = () => res();
      });
    }
    /**
     *
     * @param param0 the input into the websocket, and the function to update the ui.
     */
    async handleMessages({
      input,
      setMessage: setMessage2
    }) {
      if (!this.ws)
        this.connect();
      await this.connectionPromise;
      this.setMessage = setMessage2;
      try {
        this.ws.send(JSON.stringify(input));
      } catch (err) {
        console.error("err", err);
        setMessage2?.(JSON.stringify(err, void 0, 2));
      }
    }
    static getInstance() {
      return _CopilotStreamController.instance ??= new _CopilotStreamController();
    }
  };

  // src/index.ts
  function setMessage(message) {
    const outputDiv = document.getElementById("chat-output");
    if (!outputDiv)
      throw new Error("expected id chat-output");
    outputDiv.innerText = message;
  }
  async function sendMessage() {
    const input = document.getElementById("chat-input");
    if (!input)
      throw new Error("expected id chat-input");
    const userInput = input.value;
    CopilotStreamController.getInstance().askQGPT({
      query: userInput,
      setMessage
    });
  }
  async function main() {
    CopilotStreamController.getInstance();
    const sendChatBtn = document.getElementById("send-chat-btn");
    if (!sendChatBtn)
      throw new Error("expected id send-chat-btn");
    const connectBtn = document.getElementById("connect-btn");
    if (!connectBtn)
      throw new Error("expected id connect-btn");
    const userInput = document.getElementById("chat-input");
    if (!userInput)
      throw new Error("expected id chat-input");
    userInput.onkeydown = (event) => {
      if (event.key === "Enter")
        sendMessage();
    };
    sendChatBtn.onclick = sendMessage;
  }
  window.onload = main;
})();
//# sourceMappingURL=data:application/json;base64,
